 /******************************************************************************
 *
 * Module: MOTOR
 *
 * File Name: motor.c
 *
 * Description: Source file for the MOTOR driver
 *
 * Author: Omar Adel
 *
 *******************************************************************************/
#include "motor.h"
#include "gpio.h"
#include "avr/io.h" /* To use the IO Ports Registers */
#include "common_macros.h" /* To use the macros like SET_BIT */
#include "timer.h"
#include "util/delay.h"

/*void PWM_INIT(uint8 speed){
	uint8 dutyCycle;
	switch(speed){
	case 25: dutyCycle = 64; break;
	case 50: dutyCycle = 128; break;
	case 75: dutyCycle = 192; break;
	case 100: dutyCycle = 255; break;
	default : dutyCycle = 0; break;
	}
	TCCR0 = (1<<WGM00) | (1<<WGM01)| (1<<COM01)| (1<<CS01);
	TCNT0 = 0;
	OCR0 = dutyCycle;
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);

}*/
void DcMotor_init(void){
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, PIN_OUTPUT);
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
	state = stop;
}

void DcMotor_Rotate(enum DcMotor_State currentState){
	state = currentState;
	switch(currentState){
	case stop:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
			  GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
			  GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_LOW);
			  TIMER_ConfigType config_ptr = {COMPARE,INIT_0,8000,F_CPU_1024};
			  TIMER_Init(&config_ptr,TIMER_1);
			  _delay_ms(5000);
			  TIMER_setCallBack(MOTOR_DONE);
			  break;

	case clockwise:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
				   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_HIGH);
				   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_HIGH);
				   TIMER_ConfigType config = {COMPARE,INIT_0,8000,F_CPU_1024};
				   TIMER_Init(&config,TIMER_1);
				   TIMER_setCallBack(MOTOR_DONE);
				   break;

	case antiClockwise:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_HIGH);
					   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
					   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_HIGH);
					   break;
	default: break;
	}

/*#if(currentState == stop)
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);
#elif(currentState == antiClockwise)
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_LOW);

#elif(currentState == clockwise)
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
#endif*/

//PWM_INIT(speed);
}

void MOTOR_DONE(void){
	TIMER_DeInit(TIMER_1);
}
