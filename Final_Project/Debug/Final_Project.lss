
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00003cda  00003d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800164  00800164  00003e72  2**0
                  ALLOC
  3 .stab         00003450  00000000  00000000  00003e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001278  00000000  00000000  000072c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000853c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000867c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a435  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <main>
      8a:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e5       	ldi	r26, 0x5B	; 91
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e5       	ldi	r24, 0x5B	; 91
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
			{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				break;
			}
		}


}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
			{
				return 0;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
				{
				case PORTA_ID:
					if(BIT_IS_SET(PINA,pin_num)){
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
						return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
					}

					break;
				case PORTB_ID:
					if(BIT_IS_SET(PINB,pin_num)){
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
						return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5d 83       	std	Y+5, r21	; 0x05
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
					}
					break;
				case PORTC_ID:
					if(BIT_IS_SET(PINC,pin_num)){
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
						return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
     fe2:	1d 82       	std	Y+5, r1	; 0x05
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
					}
					break;
				case PORTD_ID:
					if(BIT_IS_SET(PIND,pin_num)){
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
						return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
					}
					break;
				}
			}

}
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
				/* Do Nothing */
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
				{
				case PORTA_ID:
					PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
					break;
				case PORTB_ID:
					PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
					break;
				case PORTC_ID:
					PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
					break;
				case PORTD_ID:
					PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
					break;
				}
			}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	10 f0       	brcs	.+4      	; 0x115a <GPIO_readPort+0x1a>
				{
					return 0;
    1156:	1c 82       	std	Y+4, r1	; 0x04
    1158:	34 c0       	rjmp	.+104    	; 0x11c2 <GPIO_readPort+0x82>
				}
				else
				{
					/* Setup the pin direction as required */
					switch(port_num)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3b 83       	std	Y+3, r19	; 0x03
    1162:	2a 83       	std	Y+2, r18	; 0x02
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <GPIO_readPort+0x62>
    116e:	2a 81       	ldd	r18, Y+2	; 0x02
    1170:	3b 81       	ldd	r19, Y+3	; 0x03
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <GPIO_readPort+0x42>
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <GPIO_readPort+0x58>
    1180:	1f c0       	rjmp	.+62     	; 0x11c0 <GPIO_readPort+0x80>
    1182:	2a 81       	ldd	r18, Y+2	; 0x02
    1184:	3b 81       	ldd	r19, Y+3	; 0x03
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <GPIO_readPort+0x6c>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	81 f0       	breq	.+32     	; 0x11b6 <GPIO_readPort+0x76>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <GPIO_readPort+0x80>
					{
					case PORTA_ID:
						return PINA;
    1198:	e9 e3       	ldi	r30, 0x39	; 57
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <GPIO_readPort+0x82>

						break;
					case PORTB_ID:
						return PINB;
    11a2:	e6 e3       	ldi	r30, 0x36	; 54
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	20 81       	ld	r18, Z
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <GPIO_readPort+0x82>
						break;
					case PORTC_ID:
						return PINC;
    11ac:	e3 e3       	ldi	r30, 0x33	; 51
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	30 81       	ld	r19, Z
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <GPIO_readPort+0x82>
						break;
					case PORTD_ID:
						return PIND;
    11b6:	e0 e3       	ldi	r30, 0x30	; 48
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <GPIO_readPort+0x82>
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_readPort+0x86>
						break;
					}
				}
}
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	9d 83       	std	Y+5, r25	; 0x05
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <KEYPAD_getPressedKey+0x6>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    11e6:	1b 82       	std	Y+3, r1	; 0x03
    11e8:	44 c0       	rjmp	.+136    	; 0x1272 <KEYPAD_getPressedKey+0x9a>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	98 2f       	mov	r25, r24
    11f6:	9c 5f       	subi	r25, 0xFC	; 252
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	69 2f       	mov	r22, r25
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 01       	movw	r18, r24
    120a:	2c 5f       	subi	r18, 0xFC	; 252
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <KEYPAD_getPressedKey+0x40>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <KEYPAD_getPressedKey+0x3c>
    121c:	80 95       	com	r24
    121e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	69 81       	ldd	r22, Y+1	; 0x01
    1224:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	1d c0       	rjmp	.+58     	; 0x1266 <KEYPAD_getPressedKey+0x8e>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	6a 81       	ldd	r22, Y+2	; 0x02
    1230:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1234:	88 23       	and	r24, r24
    1236:	a1 f4       	brne	.+40     	; 0x1260 <KEYPAD_getPressedKey+0x88>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	c9 01       	movw	r24, r18
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	82 0f       	add	r24, r18
    1246:	93 1f       	adc	r25, r19
    1248:	98 2f       	mov	r25, r24
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	89 0f       	add	r24, r25
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	0e 94 3e 09 	call	0x127c	; 0x127c <KEYPAD_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	00 f3       	brcs	.-64     	; 0x122c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	8f 5f       	subi	r24, 0xFF	; 255
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	83 30       	cpi	r24, 0x03	; 3
    1276:	08 f4       	brcc	.+2      	; 0x127a <KEYPAD_getPressedKey+0xa2>
    1278:	b8 cf       	rjmp	.-144    	; 0x11ea <KEYPAD_getPressedKey+0x12>
    127a:	b5 cf       	rjmp	.-150    	; 0x11e6 <KEYPAD_getPressedKey+0xe>

0000127c <KEYPAD_4x3_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x3 shape
 */
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 button_number)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <KEYPAD_4x3_adjustKeyNumber+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <KEYPAD_4x3_adjustKeyNumber+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    128a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3c 83       	std	Y+4, r19	; 0x04
    1294:	2b 83       	std	Y+3, r18	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	8a 30       	cpi	r24, 0x0A	; 10
    129c:	91 05       	cpc	r25, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <KEYPAD_4x3_adjustKeyNumber+0x44>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	2a 30       	cpi	r18, 0x0A	; 10
    12a6:	31 05       	cpc	r19, r1
    12a8:	9c f0       	brlt	.+38     	; 0x12d0 <KEYPAD_4x3_adjustKeyNumber+0x54>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	8b 30       	cpi	r24, 0x0B	; 11
    12b0:	91 05       	cpc	r25, r1
    12b2:	49 f0       	breq	.+18     	; 0x12c6 <KEYPAD_4x3_adjustKeyNumber+0x4a>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	2c 30       	cpi	r18, 0x0C	; 12
    12ba:	31 05       	cpc	r19, r1
    12bc:	31 f0       	breq	.+12     	; 0x12ca <KEYPAD_4x3_adjustKeyNumber+0x4e>
    12be:	08 c0       	rjmp	.+16     	; 0x12d0 <KEYPAD_4x3_adjustKeyNumber+0x54>
	{
		case 10: keypad_button = '*'; // ASCII Code of *
    12c0:	8a e2       	ldi	r24, 0x2A	; 42
    12c2:	89 83       	std	Y+1, r24	; 0x01
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		case 11: keypad_button = 0;
    12c6:	19 82       	std	Y+1, r1	; 0x01
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;		
		case 12: keypad_button = '#'; // ASCII Code of #
    12ca:	83 e2       	ldi	r24, 0x23	; 35
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <KEYPAD_4x3_adjustKeyNumber+0x58>
				 break;
		default: keypad_button = button_number;
    12d0:	8a 81       	ldd	r24, Y+2	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */

void LCD_init(void){
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID, PIN_OUTPUT);  /*SET Directions of PINS 0,1,2 in PORTD*/
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	65 e0       	ldi	r22, 0x05	; 5
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID, PIN_OUTPUT);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	66 e0       	ldi	r22, 0x06	; 6
    12fa:	41 e0       	ldi	r20, 0x01	; 1
    12fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID, PIN_OUTPUT);
    1300:	83 e0       	ldi	r24, 0x03	; 3
    1302:	67 e0       	ldi	r22, 0x07	; 7
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);/*2 lines + 4 - bit Mode*/

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT); /* Set PORTC Direction*/
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);/*2 lines + 8 - bit Mode*/
    1312:	88 e3       	ldi	r24, 0x38	; 56
    1314:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_sendCommand>

#endif
	LCD_sendCommand(LCD_CURSOR_OFF); /*Curser Off*/
    1318:	8c e0       	ldi	r24, 0x0C	; 12
    131a:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /*Clear Screen*/
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_sendCommand>
}
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <LCD_sendCommand>:
/*
 * Description :
 * Setup the Send command function for the LCD driver
 * Following the Datasheet's AC characteristics steps to complete the function send command
 */
void LCD_sendCommand(uint8 command){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	ea 97       	sbiw	r28, 0x3a	; 58
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	8a af       	std	Y+58, r24	; 0x3a

	uint8 lcd_port_value = 0;
    1340:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); 		/*Set RS = 0*/
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	65 e0       	ldi	r22, 0x05	; 5
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); 		/*Set R/W = 0*/
    134c:	83 e0       	ldi	r24, 0x03	; 3
    134e:	66 e0       	ldi	r22, 0x06	; 6
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a0 e8       	ldi	r26, 0x80	; 128
    135c:	bf e3       	ldi	r27, 0x3F	; 63
    135e:	8d ab       	std	Y+53, r24	; 0x35
    1360:	9e ab       	std	Y+54, r25	; 0x36
    1362:	af ab       	std	Y+55, r26	; 0x37
    1364:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1366:	6d a9       	ldd	r22, Y+53	; 0x35
    1368:	7e a9       	ldd	r23, Y+54	; 0x36
    136a:	8f a9       	ldd	r24, Y+55	; 0x37
    136c:	98 ad       	ldd	r25, Y+56	; 0x38
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	4a ef       	ldi	r20, 0xFA	; 250
    1374:	54 e4       	ldi	r21, 0x44	; 68
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	89 ab       	std	Y+49, r24	; 0x31
    1380:	9a ab       	std	Y+50, r25	; 0x32
    1382:	ab ab       	std	Y+51, r26	; 0x33
    1384:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1386:	69 a9       	ldd	r22, Y+49	; 0x31
    1388:	7a a9       	ldd	r23, Y+50	; 0x32
    138a:	8b a9       	ldd	r24, Y+51	; 0x33
    138c:	9c a9       	ldd	r25, Y+52	; 0x34
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    139a:	88 23       	and	r24, r24
    139c:	2c f4       	brge	.+10     	; 0x13a8 <LCD_sendCommand+0x7e>
		__ticks = 1;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	98 ab       	std	Y+48, r25	; 0x30
    13a4:	8f a7       	std	Y+47, r24	; 0x2f
    13a6:	3f c0       	rjmp	.+126    	; 0x1426 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    13a8:	69 a9       	ldd	r22, Y+49	; 0x31
    13aa:	7a a9       	ldd	r23, Y+50	; 0x32
    13ac:	8b a9       	ldd	r24, Y+51	; 0x33
    13ae:	9c a9       	ldd	r25, Y+52	; 0x34
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	3f ef       	ldi	r19, 0xFF	; 255
    13b4:	4f e7       	ldi	r20, 0x7F	; 127
    13b6:	57 e4       	ldi	r21, 0x47	; 71
    13b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13bc:	18 16       	cp	r1, r24
    13be:	4c f5       	brge	.+82     	; 0x1412 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c0:	6d a9       	ldd	r22, Y+53	; 0x35
    13c2:	7e a9       	ldd	r23, Y+54	; 0x36
    13c4:	8f a9       	ldd	r24, Y+55	; 0x37
    13c6:	98 ad       	ldd	r25, Y+56	; 0x38
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	98 ab       	std	Y+48, r25	; 0x30
    13e6:	8f a7       	std	Y+47, r24	; 0x2f
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <LCD_sendCommand+0xde>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9e a7       	std	Y+46, r25	; 0x2e
    13f0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13f4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <LCD_sendCommand+0xcc>
    13fa:	9e a7       	std	Y+46, r25	; 0x2e
    13fc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1400:	98 a9       	ldd	r25, Y+48	; 0x30
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	98 ab       	std	Y+48, r25	; 0x30
    1406:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8f a5       	ldd	r24, Y+47	; 0x2f
    140a:	98 a9       	ldd	r25, Y+48	; 0x30
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <LCD_sendCommand+0xc0>
    1410:	14 c0       	rjmp	.+40     	; 0x143a <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	69 a9       	ldd	r22, Y+49	; 0x31
    1414:	7a a9       	ldd	r23, Y+50	; 0x32
    1416:	8b a9       	ldd	r24, Y+51	; 0x33
    1418:	9c a9       	ldd	r25, Y+52	; 0x34
    141a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	98 ab       	std	Y+48, r25	; 0x30
    1424:	8f a7       	std	Y+47, r24	; 0x2f
    1426:	8f a5       	ldd	r24, Y+47	; 0x2f
    1428:	98 a9       	ldd	r25, Y+48	; 0x30
    142a:	9c a7       	std	Y+44, r25	; 0x2c
    142c:	8b a7       	std	Y+43, r24	; 0x2b
    142e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1430:	9c a5       	ldd	r25, Y+44	; 0x2c
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	f1 f7       	brne	.-4      	; 0x1432 <LCD_sendCommand+0x108>
    1436:	9c a7       	std	Y+44, r25	; 0x2c
    1438:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); 	/*Set Enable = 1*/
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	67 e0       	ldi	r22, 0x07	; 7
    143e:	41 e0       	ldi	r20, 0x01	; 1
    1440:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	a0 e8       	ldi	r26, 0x80	; 128
    144a:	bf e3       	ldi	r27, 0x3F	; 63
    144c:	8f a3       	std	Y+39, r24	; 0x27
    144e:	98 a7       	std	Y+40, r25	; 0x28
    1450:	a9 a7       	std	Y+41, r26	; 0x29
    1452:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1454:	6f a1       	ldd	r22, Y+39	; 0x27
    1456:	78 a5       	ldd	r23, Y+40	; 0x28
    1458:	89 a5       	ldd	r24, Y+41	; 0x29
    145a:	9a a5       	ldd	r25, Y+42	; 0x2a
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	4a ef       	ldi	r20, 0xFA	; 250
    1462:	54 e4       	ldi	r21, 0x44	; 68
    1464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	8b a3       	std	Y+35, r24	; 0x23
    146e:	9c a3       	std	Y+36, r25	; 0x24
    1470:	ad a3       	std	Y+37, r26	; 0x25
    1472:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1474:	6b a1       	ldd	r22, Y+35	; 0x23
    1476:	7c a1       	ldd	r23, Y+36	; 0x24
    1478:	8d a1       	ldd	r24, Y+37	; 0x25
    147a:	9e a1       	ldd	r25, Y+38	; 0x26
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	2c f4       	brge	.+10     	; 0x1496 <LCD_sendCommand+0x16c>
		__ticks = 1;
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9a a3       	std	Y+34, r25	; 0x22
    1492:	89 a3       	std	Y+33, r24	; 0x21
    1494:	3f c0       	rjmp	.+126    	; 0x1514 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1496:	6b a1       	ldd	r22, Y+35	; 0x23
    1498:	7c a1       	ldd	r23, Y+36	; 0x24
    149a:	8d a1       	ldd	r24, Y+37	; 0x25
    149c:	9e a1       	ldd	r25, Y+38	; 0x26
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	3f ef       	ldi	r19, 0xFF	; 255
    14a2:	4f e7       	ldi	r20, 0x7F	; 127
    14a4:	57 e4       	ldi	r21, 0x47	; 71
    14a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	4c f5       	brge	.+82     	; 0x1500 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	6f a1       	ldd	r22, Y+39	; 0x27
    14b0:	78 a5       	ldd	r23, Y+40	; 0x28
    14b2:	89 a5       	ldd	r24, Y+41	; 0x29
    14b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e2       	ldi	r20, 0x20	; 32
    14bc:	51 e4       	ldi	r21, 0x41	; 65
    14be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	bc 01       	movw	r22, r24
    14c8:	cd 01       	movw	r24, r26
    14ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	9a a3       	std	Y+34, r25	; 0x22
    14d4:	89 a3       	std	Y+33, r24	; 0x21
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <LCD_sendCommand+0x1cc>
    14d8:	88 ec       	ldi	r24, 0xC8	; 200
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	98 a3       	std	Y+32, r25	; 0x20
    14de:	8f 8f       	std	Y+31, r24	; 0x1f
    14e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e2:	98 a1       	ldd	r25, Y+32	; 0x20
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <LCD_sendCommand+0x1ba>
    14e8:	98 a3       	std	Y+32, r25	; 0x20
    14ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	9a a3       	std	Y+34, r25	; 0x22
    14f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f6:	89 a1       	ldd	r24, Y+33	; 0x21
    14f8:	9a a1       	ldd	r25, Y+34	; 0x22
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	69 f7       	brne	.-38     	; 0x14d8 <LCD_sendCommand+0x1ae>
    14fe:	14 c0       	rjmp	.+40     	; 0x1528 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1500:	6b a1       	ldd	r22, Y+35	; 0x23
    1502:	7c a1       	ldd	r23, Y+36	; 0x24
    1504:	8d a1       	ldd	r24, Y+37	; 0x25
    1506:	9e a1       	ldd	r25, Y+38	; 0x26
    1508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	9a a3       	std	Y+34, r25	; 0x22
    1512:	89 a3       	std	Y+33, r24	; 0x21
    1514:	89 a1       	ldd	r24, Y+33	; 0x21
    1516:	9a a1       	ldd	r25, Y+34	; 0x22
    1518:	9e 8f       	std	Y+30, r25	; 0x1e
    151a:	8d 8f       	std	Y+29, r24	; 0x1d
    151c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    151e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	f1 f7       	brne	.-4      	; 0x1520 <LCD_sendCommand+0x1f6>
    1524:	9e 8f       	std	Y+30, r25	; 0x1e
    1526:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);		/*Set Enable = 0*/
	_delay_ms(1);

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	6a ad       	ldd	r22, Y+58	; 0x3a
    152c:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a0 e8       	ldi	r26, 0x80	; 128
    1536:	bf e3       	ldi	r27, 0x3F	; 63
    1538:	89 8f       	std	Y+25, r24	; 0x19
    153a:	9a 8f       	std	Y+26, r25	; 0x1a
    153c:	ab 8f       	std	Y+27, r26	; 0x1b
    153e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1540:	69 8d       	ldd	r22, Y+25	; 0x19
    1542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a ef       	ldi	r20, 0xFA	; 250
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8d 8b       	std	Y+21, r24	; 0x15
    155a:	9e 8b       	std	Y+22, r25	; 0x16
    155c:	af 8b       	std	Y+23, r26	; 0x17
    155e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1560:	6d 89       	ldd	r22, Y+21	; 0x15
    1562:	7e 89       	ldd	r23, Y+22	; 0x16
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <LCD_sendCommand+0x258>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1582:	6d 89       	ldd	r22, Y+21	; 0x15
    1584:	7e 89       	ldd	r23, Y+22	; 0x16
    1586:	8f 89       	ldd	r24, Y+23	; 0x17
    1588:	98 8d       	ldd	r25, Y+24	; 0x18
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	4c f5       	brge	.+82     	; 0x15ec <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	69 8d       	ldd	r22, Y+25	; 0x19
    159c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    159e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9c 8b       	std	Y+20, r25	; 0x14
    15c0:	8b 8b       	std	Y+19, r24	; 0x13
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <LCD_sendCommand+0x2b8>
    15c4:	88 ec       	ldi	r24, 0xC8	; 200
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9a 8b       	std	Y+18, r25	; 0x12
    15ca:	89 8b       	std	Y+17, r24	; 0x11
    15cc:	89 89       	ldd	r24, Y+17	; 0x11
    15ce:	9a 89       	ldd	r25, Y+18	; 0x12
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_sendCommand+0x2a6>
    15d4:	9a 8b       	std	Y+18, r25	; 0x12
    15d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	8b 89       	ldd	r24, Y+19	; 0x13
    15da:	9c 89       	ldd	r25, Y+20	; 0x14
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9c 8b       	std	Y+20, r25	; 0x14
    15e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <LCD_sendCommand+0x29a>
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6d 89       	ldd	r22, Y+21	; 0x15
    15ee:	7e 89       	ldd	r23, Y+22	; 0x16
    15f0:	8f 89       	ldd	r24, Y+23	; 0x17
    15f2:	98 8d       	ldd	r25, Y+24	; 0x18
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9c 8b       	std	Y+20, r25	; 0x14
    15fe:	8b 8b       	std	Y+19, r24	; 0x13
    1600:	8b 89       	ldd	r24, Y+19	; 0x13
    1602:	9c 89       	ldd	r25, Y+20	; 0x14
    1604:	98 8b       	std	Y+16, r25	; 0x10
    1606:	8f 87       	std	Y+15, r24	; 0x0f
    1608:	8f 85       	ldd	r24, Y+15	; 0x0f
    160a:	98 89       	ldd	r25, Y+16	; 0x10
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_sendCommand+0x2e2>
    1610:	98 8b       	std	Y+16, r25	; 0x10
    1612:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	67 e0       	ldi	r22, 0x07	; 7
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	a0 e8       	ldi	r26, 0x80	; 128
    1624:	bf e3       	ldi	r27, 0x3F	; 63
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	ad 87       	std	Y+13, r26	; 0x0d
    162c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a ef       	ldi	r20, 0xFA	; 250
    163c:	54 e4       	ldi	r21, 0x44	; 68
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	a9 87       	std	Y+9, r26	; 0x09
    164c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <LCD_sendCommand+0x346>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <LCD_sendCommand+0x3a6>
    16b2:	88 ec       	ldi	r24, 0xC8	; 200
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCD_sendCommand+0x394>
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <LCD_sendCommand+0x388>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_sendCommand+0x3d0>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1702:	ea 96       	adiw	r28, 0x3a	; 58
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <LCD_displayCharacter>:
/*
 * Description :
 * Setup the Send Data function for the LCD driver
 * Following the Datasheet's AC characteristics steps to complete the function send data
 */
void LCD_displayCharacter(uint8 data){
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	ea 97       	sbiw	r28, 0x3a	; 58
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	f8 94       	cli
    1722:	de bf       	out	0x3e, r29	; 62
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	cd bf       	out	0x3d, r28	; 61
    1728:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    172a:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); 		/*Set RS = 1*/
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	65 e0       	ldi	r22, 0x05	; 5
    1730:	41 e0       	ldi	r20, 0x01	; 1
    1732:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); 		/*Set R/W = 0*/
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	66 e0       	ldi	r22, 0x06	; 6
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e8       	ldi	r26, 0x80	; 128
    1746:	bf e3       	ldi	r27, 0x3F	; 63
    1748:	8d ab       	std	Y+53, r24	; 0x35
    174a:	9e ab       	std	Y+54, r25	; 0x36
    174c:	af ab       	std	Y+55, r26	; 0x37
    174e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1750:	6d a9       	ldd	r22, Y+53	; 0x35
    1752:	7e a9       	ldd	r23, Y+54	; 0x36
    1754:	8f a9       	ldd	r24, Y+55	; 0x37
    1756:	98 ad       	ldd	r25, Y+56	; 0x38
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	4a ef       	ldi	r20, 0xFA	; 250
    175e:	54 e4       	ldi	r21, 0x44	; 68
    1760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	89 ab       	std	Y+49, r24	; 0x31
    176a:	9a ab       	std	Y+50, r25	; 0x32
    176c:	ab ab       	std	Y+51, r26	; 0x33
    176e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1770:	69 a9       	ldd	r22, Y+49	; 0x31
    1772:	7a a9       	ldd	r23, Y+50	; 0x32
    1774:	8b a9       	ldd	r24, Y+51	; 0x33
    1776:	9c a9       	ldd	r25, Y+52	; 0x34
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e8       	ldi	r20, 0x80	; 128
    177e:	5f e3       	ldi	r21, 0x3F	; 63
    1780:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1784:	88 23       	and	r24, r24
    1786:	2c f4       	brge	.+10     	; 0x1792 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	98 ab       	std	Y+48, r25	; 0x30
    178e:	8f a7       	std	Y+47, r24	; 0x2f
    1790:	3f c0       	rjmp	.+126    	; 0x1810 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    1792:	69 a9       	ldd	r22, Y+49	; 0x31
    1794:	7a a9       	ldd	r23, Y+50	; 0x32
    1796:	8b a9       	ldd	r24, Y+51	; 0x33
    1798:	9c a9       	ldd	r25, Y+52	; 0x34
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	3f ef       	ldi	r19, 0xFF	; 255
    179e:	4f e7       	ldi	r20, 0x7F	; 127
    17a0:	57 e4       	ldi	r21, 0x47	; 71
    17a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a6:	18 16       	cp	r1, r24
    17a8:	4c f5       	brge	.+82     	; 0x17fc <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17aa:	6d a9       	ldd	r22, Y+53	; 0x35
    17ac:	7e a9       	ldd	r23, Y+54	; 0x36
    17ae:	8f a9       	ldd	r24, Y+55	; 0x37
    17b0:	98 ad       	ldd	r25, Y+56	; 0x38
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e2       	ldi	r20, 0x20	; 32
    17b8:	51 e4       	ldi	r21, 0x41	; 65
    17ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ca:	dc 01       	movw	r26, r24
    17cc:	cb 01       	movw	r24, r22
    17ce:	98 ab       	std	Y+48, r25	; 0x30
    17d0:	8f a7       	std	Y+47, r24	; 0x2f
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <LCD_displayCharacter+0xde>
    17d4:	88 ec       	ldi	r24, 0xC8	; 200
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	9e a7       	std	Y+46, r25	; 0x2e
    17da:	8d a7       	std	Y+45, r24	; 0x2d
    17dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    17de:	9e a5       	ldd	r25, Y+46	; 0x2e
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_displayCharacter+0xcc>
    17e4:	9e a7       	std	Y+46, r25	; 0x2e
    17e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ea:	98 a9       	ldd	r25, Y+48	; 0x30
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	98 ab       	std	Y+48, r25	; 0x30
    17f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f4:	98 a9       	ldd	r25, Y+48	; 0x30
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	69 f7       	brne	.-38     	; 0x17d4 <LCD_displayCharacter+0xc0>
    17fa:	14 c0       	rjmp	.+40     	; 0x1824 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fc:	69 a9       	ldd	r22, Y+49	; 0x31
    17fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1800:	8b a9       	ldd	r24, Y+51	; 0x33
    1802:	9c a9       	ldd	r25, Y+52	; 0x34
    1804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	98 ab       	std	Y+48, r25	; 0x30
    180e:	8f a7       	std	Y+47, r24	; 0x2f
    1810:	8f a5       	ldd	r24, Y+47	; 0x2f
    1812:	98 a9       	ldd	r25, Y+48	; 0x30
    1814:	9c a7       	std	Y+44, r25	; 0x2c
    1816:	8b a7       	std	Y+43, r24	; 0x2b
    1818:	8b a5       	ldd	r24, Y+43	; 0x2b
    181a:	9c a5       	ldd	r25, Y+44	; 0x2c
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_displayCharacter+0x108>
    1820:	9c a7       	std	Y+44, r25	; 0x2c
    1822:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); 	/*Set Enable = 1*/
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	67 e0       	ldi	r22, 0x07	; 7
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	a0 e8       	ldi	r26, 0x80	; 128
    1834:	bf e3       	ldi	r27, 0x3F	; 63
    1836:	8f a3       	std	Y+39, r24	; 0x27
    1838:	98 a7       	std	Y+40, r25	; 0x28
    183a:	a9 a7       	std	Y+41, r26	; 0x29
    183c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	6f a1       	ldd	r22, Y+39	; 0x27
    1840:	78 a5       	ldd	r23, Y+40	; 0x28
    1842:	89 a5       	ldd	r24, Y+41	; 0x29
    1844:	9a a5       	ldd	r25, Y+42	; 0x2a
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	8b a3       	std	Y+35, r24	; 0x23
    1858:	9c a3       	std	Y+36, r25	; 0x24
    185a:	ad a3       	std	Y+37, r26	; 0x25
    185c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    185e:	6b a1       	ldd	r22, Y+35	; 0x23
    1860:	7c a1       	ldd	r23, Y+36	; 0x24
    1862:	8d a1       	ldd	r24, Y+37	; 0x25
    1864:	9e a1       	ldd	r25, Y+38	; 0x26
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	9a a3       	std	Y+34, r25	; 0x22
    187c:	89 a3       	std	Y+33, r24	; 0x21
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    1880:	6b a1       	ldd	r22, Y+35	; 0x23
    1882:	7c a1       	ldd	r23, Y+36	; 0x24
    1884:	8d a1       	ldd	r24, Y+37	; 0x25
    1886:	9e a1       	ldd	r25, Y+38	; 0x26
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	6f a1       	ldd	r22, Y+39	; 0x27
    189a:	78 a5       	ldd	r23, Y+40	; 0x28
    189c:	89 a5       	ldd	r24, Y+41	; 0x29
    189e:	9a a5       	ldd	r25, Y+42	; 0x2a
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <LCD_displayCharacter+0x1cc>
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	98 a3       	std	Y+32, r25	; 0x20
    18c8:	8f 8f       	std	Y+31, r24	; 0x1f
    18ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18cc:	98 a1       	ldd	r25, Y+32	; 0x20
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_displayCharacter+0x1ba>
    18d2:	98 a3       	std	Y+32, r25	; 0x20
    18d4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	89 a1       	ldd	r24, Y+33	; 0x21
    18d8:	9a a1       	ldd	r25, Y+34	; 0x22
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	9a a3       	std	Y+34, r25	; 0x22
    18de:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	89 a1       	ldd	r24, Y+33	; 0x21
    18e2:	9a a1       	ldd	r25, Y+34	; 0x22
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <LCD_displayCharacter+0x1ae>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9a a3       	std	Y+34, r25	; 0x22
    18fc:	89 a3       	std	Y+33, r24	; 0x21
    18fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1900:	9a a1       	ldd	r25, Y+34	; 0x22
    1902:	9e 8f       	std	Y+30, r25	; 0x1e
    1904:	8d 8f       	std	Y+29, r24	; 0x1d
    1906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1908:	9e 8d       	ldd	r25, Y+30	; 0x1e
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_displayCharacter+0x1f6>
    190e:	9e 8f       	std	Y+30, r25	; 0x1e
    1910:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	6a ad       	ldd	r22, Y+58	; 0x3a
    1916:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a0 e8       	ldi	r26, 0x80	; 128
    1920:	bf e3       	ldi	r27, 0x3F	; 63
    1922:	89 8f       	std	Y+25, r24	; 0x19
    1924:	9a 8f       	std	Y+26, r25	; 0x1a
    1926:	ab 8f       	std	Y+27, r26	; 0x1b
    1928:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    192a:	69 8d       	ldd	r22, Y+25	; 0x19
    192c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    192e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	4a ef       	ldi	r20, 0xFA	; 250
    1938:	54 e4       	ldi	r21, 0x44	; 68
    193a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	8d 8b       	std	Y+21, r24	; 0x15
    1944:	9e 8b       	std	Y+22, r25	; 0x16
    1946:	af 8b       	std	Y+23, r26	; 0x17
    1948:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    194a:	6d 89       	ldd	r22, Y+21	; 0x15
    194c:	7e 89       	ldd	r23, Y+22	; 0x16
    194e:	8f 89       	ldd	r24, Y+23	; 0x17
    1950:	98 8d       	ldd	r25, Y+24	; 0x18
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e8       	ldi	r20, 0x80	; 128
    1958:	5f e3       	ldi	r21, 0x3F	; 63
    195a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195e:	88 23       	and	r24, r24
    1960:	2c f4       	brge	.+10     	; 0x196c <LCD_displayCharacter+0x258>
		__ticks = 1;
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 8b       	std	Y+20, r25	; 0x14
    1968:	8b 8b       	std	Y+19, r24	; 0x13
    196a:	3f c0       	rjmp	.+126    	; 0x19ea <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    196c:	6d 89       	ldd	r22, Y+21	; 0x15
    196e:	7e 89       	ldd	r23, Y+22	; 0x16
    1970:	8f 89       	ldd	r24, Y+23	; 0x17
    1972:	98 8d       	ldd	r25, Y+24	; 0x18
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	3f ef       	ldi	r19, 0xFF	; 255
    1978:	4f e7       	ldi	r20, 0x7F	; 127
    197a:	57 e4       	ldi	r21, 0x47	; 71
    197c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1980:	18 16       	cp	r1, r24
    1982:	4c f5       	brge	.+82     	; 0x19d6 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	40 e2       	ldi	r20, 0x20	; 32
    1992:	51 e4       	ldi	r21, 0x41	; 65
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	9c 8b       	std	Y+20, r25	; 0x14
    19aa:	8b 8b       	std	Y+19, r24	; 0x13
    19ac:	0f c0       	rjmp	.+30     	; 0x19cc <LCD_displayCharacter+0x2b8>
    19ae:	88 ec       	ldi	r24, 0xC8	; 200
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9a 8b       	std	Y+18, r25	; 0x12
    19b4:	89 8b       	std	Y+17, r24	; 0x11
    19b6:	89 89       	ldd	r24, Y+17	; 0x11
    19b8:	9a 89       	ldd	r25, Y+18	; 0x12
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_displayCharacter+0x2a6>
    19be:	9a 8b       	std	Y+18, r25	; 0x12
    19c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c2:	8b 89       	ldd	r24, Y+19	; 0x13
    19c4:	9c 89       	ldd	r25, Y+20	; 0x14
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	9c 8b       	std	Y+20, r25	; 0x14
    19ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19cc:	8b 89       	ldd	r24, Y+19	; 0x13
    19ce:	9c 89       	ldd	r25, Y+20	; 0x14
    19d0:	00 97       	sbiw	r24, 0x00	; 0
    19d2:	69 f7       	brne	.-38     	; 0x19ae <LCD_displayCharacter+0x29a>
    19d4:	14 c0       	rjmp	.+40     	; 0x19fe <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9c 8b       	std	Y+20, r25	; 0x14
    19e8:	8b 8b       	std	Y+19, r24	; 0x13
    19ea:	8b 89       	ldd	r24, Y+19	; 0x13
    19ec:	9c 89       	ldd	r25, Y+20	; 0x14
    19ee:	98 8b       	std	Y+16, r25	; 0x10
    19f0:	8f 87       	std	Y+15, r24	; 0x0f
    19f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f4:	98 89       	ldd	r25, Y+16	; 0x10
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_displayCharacter+0x2e2>
    19fa:	98 8b       	std	Y+16, r25	; 0x10
    19fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    19fe:	83 e0       	ldi	r24, 0x03	; 3
    1a00:	67 e0       	ldi	r22, 0x07	; 7
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_displayCharacter+0x346>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_displayCharacter+0x3a6>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_displayCharacter+0x394>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_displayCharacter+0x388>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_displayCharacter+0x3d0>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1aec:	ea 96       	adiw	r28, 0x3a	; 58
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <LCD_displayString>:
void LCD_displayString(const char*Str){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <LCD_displayString+0x6>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	9b 83       	std	Y+3, r25	; 0x03
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1b0e:	19 82       	std	Y+1, r1	; 0x01
    1b10:	0e c0       	rjmp	.+28     	; 0x1b2e <LCD_displayString+0x30>

	while(Str[i] != '\0'){
		LCD_displayCharacter(Str[i]);
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	e2 0f       	add	r30, r18
    1b20:	f3 1f       	adc	r31, r19
    1b22:	80 81       	ld	r24, Z
    1b24:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LCD_displayCharacter>
		i++;
    1b28:	89 81       	ldd	r24, Y+1	; 0x01
    1b2a:	8f 5f       	subi	r24, 0xFF	; 255
    1b2c:	89 83       	std	Y+1, r24	; 0x01
#endif
}
void LCD_displayString(const char*Str){
	uint8 i = 0;

	while(Str[i] != '\0'){
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	9b 81       	ldd	r25, Y+3	; 0x03
    1b38:	fc 01       	movw	r30, r24
    1b3a:	e2 0f       	add	r30, r18
    1b3c:	f3 1f       	adc	r31, r19
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 23       	and	r24, r24
    1b42:	39 f7       	brne	.-50     	; 0x1b12 <LCD_displayString+0x14>
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <LCD_moveCursor+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <LCD_moveCursor+0x8>
    1b58:	0f 92       	push	r0
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	8a 83       	std	Y+2, r24	; 0x02
    1b60:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	3d 83       	std	Y+5, r19	; 0x05
    1b6a:	2c 83       	std	Y+4, r18	; 0x04
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	91 05       	cpc	r25, r1
    1b74:	c1 f0       	breq	.+48     	; 0x1ba6 <LCD_moveCursor+0x56>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	2c f4       	brge	.+10     	; 0x1b8a <LCD_moveCursor+0x3a>
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	61 f0       	breq	.+24     	; 0x1ba0 <LCD_moveCursor+0x50>
    1b88:	19 c0       	rjmp	.+50     	; 0x1bbc <LCD_moveCursor+0x6c>
    1b8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8e:	22 30       	cpi	r18, 0x02	; 2
    1b90:	31 05       	cpc	r19, r1
    1b92:	69 f0       	breq	.+26     	; 0x1bae <LCD_moveCursor+0x5e>
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	83 30       	cpi	r24, 0x03	; 3
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	61 f0       	breq	.+24     	; 0x1bb6 <LCD_moveCursor+0x66>
    1b9e:	0e c0       	rjmp	.+28     	; 0x1bbc <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	0b c0       	rjmp	.+22     	; 0x1bbc <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	80 5c       	subi	r24, 0xC0	; 192
    1baa:	89 83       	std	Y+1, r24	; 0x01
    1bac:	07 c0       	rjmp	.+14     	; 0x1bbc <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1bae:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb0:	80 5f       	subi	r24, 0xF0	; 240
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	80 5b       	subi	r24, 0xB0	; 176
    1bba:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	80 68       	ori	r24, 0x80	; 128
    1bc0:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_sendCommand>
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <LCD_displayStringRowColumn+0x6>
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <LCD_displayStringRowColumn+0x8>
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	89 83       	std	Y+1, r24	; 0x01
    1be2:	6a 83       	std	Y+2, r22	; 0x02
    1be4:	5c 83       	std	Y+4, r21	; 0x04
    1be6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	6a 81       	ldd	r22, Y+2	; 0x02
    1bec:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_displayString>
}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	08 95       	ret

00001c06 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1c06:	df 93       	push	r29
    1c08:	cf 93       	push	r28
    1c0a:	cd b7       	in	r28, 0x3d	; 61
    1c0c:	de b7       	in	r29, 0x3e	; 62
    1c0e:	62 97       	sbiw	r28, 0x12	; 18
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1c1e:	89 89       	ldd	r24, Y+17	; 0x11
    1c20:	9a 89       	ldd	r25, Y+18	; 0x12
    1c22:	9e 01       	movw	r18, r28
    1c24:	2f 5f       	subi	r18, 0xFF	; 255
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	b9 01       	movw	r22, r18
    1c2a:	4a e0       	ldi	r20, 0x0A	; 10
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <itoa>
   LCD_displayString(buff); /* Display the string */
    1c32:	ce 01       	movw	r24, r28
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_displayString>
}
    1c3a:	62 96       	adiw	r28, 0x12	; 18
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	0e 94 95 09 	call	0x132a	; 0x132a <LCD_sendCommand>
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <main>:
PASS pass = CORRECT;

//TIMER_ConfigType config_timePtr = {NORMAL,INIT_0,0,F_CPU_1024};

int main(void)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	ac 97       	sbiw	r28, 0x2c	; 44
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
	/* Initialize the UART Driver */
//	UART_ConfigType CONFIG_Ptr = {ASYNCHRONOUS,RATE_9600,ENABLED_EVEN,STOP_2bit,BitNumber_8};
//	UART_init(&CONFIG_Ptr);

	UART_ConfigType *PTR ;
	PTR->synchType = ASYNCHRONOUS;
    1c74:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c76:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c78:	10 82       	st	Z, r1
	PTR->baud_rate = RATE_9600;
    1c7a:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c7c:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	95 e2       	ldi	r25, 0x25	; 37
    1c82:	92 83       	std	Z+2, r25	; 0x02
    1c84:	81 83       	std	Z+1, r24	; 0x01
	PTR->parity = ENABLED_EVEN;
    1c86:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c88:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	83 83       	std	Z+3, r24	; 0x03
	PTR->stop = STOP_2bit;
    1c8e:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c90:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	84 83       	std	Z+4, r24	; 0x04
	PTR->bitNumber = BitNumber_8;
    1c96:	eb a5       	ldd	r30, Y+43	; 0x2b
    1c98:	fc a5       	ldd	r31, Y+44	; 0x2c
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	85 83       	std	Z+5, r24	; 0x05
	UART_init((UART_ConfigType*)&PTR);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	8b 96       	adiw	r24, 0x2b	; 43
    1ca2:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <UART_init>



	/* Initialize the LCD Driver */
	LCD_init();
    1ca6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <LCD_init>


    while(1)
    {
		enterPassword();
    1caa:	0e 94 0d 10 	call	0x201a	; 0x201a <enterPassword>
		reEnterPassword();
    1cae:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <reEnterPassword>
		passCompare();
    1cb2:	0e 94 b5 11 	call	0x236a	; 0x236a <passCompare>

		if(flag == NOT_MATCH){
    1cb6:	80 91 66 01 	lds	r24, 0x0166
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <main+0x64>
			flag = MATCH;
    1cbe:	10 92 66 01 	sts	0x0166, r1
    1cc2:	f3 cf       	rjmp	.-26     	; 0x1caa <main+0x4a>


/************************************************************************************/
/*          SEND THE PASSWORD TO MC2 TO SAVE THE PASS IN THE EEPROM MEMORY          */
/************************************************************************************/
		savePass();
    1cc4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <savePass>

/************************************************************************************/
		LCD_clearScreen();
    1cc8:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Welcome Omar");
    1ccc:	20 e6       	ldi	r18, 0x60	; 96
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	aa e7       	ldi	r26, 0x7A	; 122
    1ce0:	b4 e4       	ldi	r27, 0x44	; 68
    1ce2:	8f a3       	std	Y+39, r24	; 0x27
    1ce4:	98 a7       	std	Y+40, r25	; 0x28
    1ce6:	a9 a7       	std	Y+41, r26	; 0x29
    1ce8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6f a1       	ldd	r22, Y+39	; 0x27
    1cec:	78 a5       	ldd	r23, Y+40	; 0x28
    1cee:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8b a3       	std	Y+35, r24	; 0x23
    1d04:	9c a3       	std	Y+36, r25	; 0x24
    1d06:	ad a3       	std	Y+37, r26	; 0x25
    1d08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d10:	9e a1       	ldd	r25, Y+38	; 0x26
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <main+0xcc>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <main+0x14a>
	else if (__tmp > 65535)
    1d2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d30:	8d a1       	ldd	r24, Y+37	; 0x25
    1d32:	9e a1       	ldd	r25, Y+38	; 0x26
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6f a1       	ldd	r22, Y+39	; 0x27
    1d46:	78 a5       	ldd	r23, Y+40	; 0x28
    1d48:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <main+0x12c>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	98 a3       	std	Y+32, r25	; 0x20
    1d74:	8f 8f       	std	Y+31, r24	; 0x1f
    1d76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d78:	98 a1       	ldd	r25, Y+32	; 0x20
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0x11a>
    1d7e:	98 a3       	std	Y+32, r25	; 0x20
    1d80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	89 a1       	ldd	r24, Y+33	; 0x21
    1d84:	9a a1       	ldd	r25, Y+34	; 0x22
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9a a3       	std	Y+34, r25	; 0x22
    1d8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <main+0x10e>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6b a1       	ldd	r22, Y+35	; 0x23
    1d98:	7c a1       	ldd	r23, Y+36	; 0x24
    1d9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9a a3       	std	Y+34, r25	; 0x22
    1da8:	89 a3       	std	Y+33, r24	; 0x21
    1daa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dac:	9a a1       	ldd	r25, Y+34	; 0x22
    1dae:	9e 8f       	std	Y+30, r25	; 0x1e
    1db0:	8d 8f       	std	Y+29, r24	; 0x1d
    1db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0x156>
    1dba:	9e 8f       	std	Y+30, r25	; 0x1e
    1dbc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
/************************************************************************************/
/*                                 MAIN OPTIONS                                     */
/************************************************************************************/
		while(1){
			LCD_clearScreen();
    1dbe:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Choose option:");
    1dc2:	2d e6       	ldi	r18, 0x6D	; 109
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	a9 01       	movw	r20, r18
    1dcc:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"1)Open door");
    1dd0:	2c e7       	ldi	r18, 0x7C	; 124
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	a9 01       	movw	r20, r18
    1dda:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"2)Change Pass");
    1dde:	28 e8       	ldi	r18, 0x88	; 136
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	a9 01       	movw	r20, r18
    1de8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
			LCD_moveCursor(3,0);
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_moveCursor>
			key = KEYPAD_getPressedKey();
    1df4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    1df8:	80 93 6e 01 	sts	0x016E, r24
			UART_sendByte(key);
    1dfc:	80 91 6e 01 	lds	r24, 0x016E
    1e00:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
/************************************************************************************/
/*                                OPEN DOOR OPTION                                  */
/************************************************************************************/
			if(key == 1){
    1e04:	80 91 6e 01 	lds	r24, 0x016E
    1e08:	81 30       	cpi	r24, 0x01	; 1
    1e0a:	09 f0       	breq	.+2      	; 0x1e0e <main+0x1ae>
    1e0c:	7d c0       	rjmp	.+250    	; 0x1f08 <main+0x2a8>
				UART_sendByte(key);
    1e0e:	80 91 6e 01 	lds	r24, 0x016E
    1e12:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a8 ec       	ldi	r26, 0xC8	; 200
    1e1c:	b2 e4       	ldi	r27, 0x42	; 66
    1e1e:	89 8f       	std	Y+25, r24	; 0x19
    1e20:	9a 8f       	std	Y+26, r25	; 0x1a
    1e22:	ab 8f       	std	Y+27, r26	; 0x1b
    1e24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	69 8d       	ldd	r22, Y+25	; 0x19
    1e28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8d 8b       	std	Y+21, r24	; 0x15
    1e40:	9e 8b       	std	Y+22, r25	; 0x16
    1e42:	af 8b       	std	Y+23, r26	; 0x17
    1e44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e46:	6d 89       	ldd	r22, Y+21	; 0x15
    1e48:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <main+0x208>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9c 8b       	std	Y+20, r25	; 0x14
    1e64:	8b 8b       	std	Y+19, r24	; 0x13
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <main+0x286>
	else if (__tmp > 65535)
    1e68:	6d 89       	ldd	r22, Y+21	; 0x15
    1e6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <main+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	69 8d       	ldd	r22, Y+25	; 0x19
    1e82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <main+0x268>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9a 8b       	std	Y+18, r25	; 0x12
    1eb0:	89 8b       	std	Y+17, r24	; 0x11
    1eb2:	89 89       	ldd	r24, Y+17	; 0x11
    1eb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <main+0x256>
    1eba:	9a 8b       	std	Y+18, r25	; 0x12
    1ebc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9c 8b       	std	Y+20, r25	; 0x14
    1ec6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <main+0x24a>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <main+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9c 8b       	std	Y+20, r25	; 0x14
    1ee4:	8b 8b       	std	Y+19, r24	; 0x13
    1ee6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eea:	98 8b       	std	Y+16, r25	; 0x10
    1eec:	8f 87       	std	Y+15, r24	; 0x0f
    1eee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef0:	98 89       	ldd	r25, Y+16	; 0x10
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <main+0x292>
    1ef6:	98 8b       	std	Y+16, r25	; 0x10
    1ef8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				while(UART_recieveByte() != ACK){};
    1efa:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    1efe:	89 30       	cpi	r24, 0x09	; 9
    1f00:	e1 f7       	brne	.-8      	; 0x1efa <main+0x29a>
				openDoor();
    1f02:	0e 94 ef 14 	call	0x29de	; 0x29de <openDoor>
    1f06:	5b cf       	rjmp	.-330    	; 0x1dbe <main+0x15e>
				continue;
			}
/************************************************************************************/
/*                             Change Password OPTION                               */
/************************************************************************************/
			else if (key == 2){
    1f08:	80 91 6e 01 	lds	r24, 0x016E
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <main+0x2b2>
    1f10:	56 cf       	rjmp	.-340    	; 0x1dbe <main+0x15e>
				UART_sendByte(key);
    1f12:	80 91 6e 01 	lds	r24, 0x016E
    1f16:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	a8 ec       	ldi	r26, 0xC8	; 200
    1f20:	b2 e4       	ldi	r27, 0x42	; 66
    1f22:	8b 87       	std	Y+11, r24	; 0x0b
    1f24:	9c 87       	std	Y+12, r25	; 0x0c
    1f26:	ad 87       	std	Y+13, r26	; 0x0d
    1f28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4a ef       	ldi	r20, 0xFA	; 250
    1f38:	54 e4       	ldi	r21, 0x44	; 68
    1f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3e:	dc 01       	movw	r26, r24
    1f40:	cb 01       	movw	r24, r22
    1f42:	8f 83       	std	Y+7, r24	; 0x07
    1f44:	98 87       	std	Y+8, r25	; 0x08
    1f46:	a9 87       	std	Y+9, r26	; 0x09
    1f48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4c:	78 85       	ldd	r23, Y+8	; 0x08
    1f4e:	89 85       	ldd	r24, Y+9	; 0x09
    1f50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e8       	ldi	r20, 0x80	; 128
    1f58:	5f e3       	ldi	r21, 0x3F	; 63
    1f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f5e:	88 23       	and	r24, r24
    1f60:	2c f4       	brge	.+10     	; 0x1f6c <main+0x30c>
		__ticks = 1;
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	3f c0       	rjmp	.+126    	; 0x1fea <main+0x38a>
	else if (__tmp > 65535)
    1f6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6e:	78 85       	ldd	r23, Y+8	; 0x08
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	4c f5       	brge	.+82     	; 0x1fd6 <main+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e2       	ldi	r20, 0x20	; 32
    1f92:	51 e4       	ldi	r21, 0x41	; 65
    1f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	bc 01       	movw	r22, r24
    1f9e:	cd 01       	movw	r24, r26
    1fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <main+0x36c>
    1fae:	88 ec       	ldi	r24, 0xC8	; 200
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	f1 f7       	brne	.-4      	; 0x1fba <main+0x35a>
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	00 97       	sbiw	r24, 0x00	; 0
    1fd2:	69 f7       	brne	.-38     	; 0x1fae <main+0x34e>
    1fd4:	14 c0       	rjmp	.+40     	; 0x1ffe <main+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd8:	78 85       	ldd	r23, Y+8	; 0x08
    1fda:	89 85       	ldd	r24, Y+9	; 0x09
    1fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <main+0x396>
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(100);
				while(UART_recieveByte() != ACK){};
    1ffe:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    2002:	89 30       	cpi	r24, 0x09	; 9
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <main+0x39e>
				changePass();
    2006:	0e 94 c8 19 	call	0x3390	; 0x3390 <changePass>
				if(pass == CORRECT){
    200a:	80 91 67 01 	lds	r24, 0x0167
    200e:	88 23       	and	r24, r24
    2010:	09 f4       	brne	.+2      	; 0x2014 <main+0x3b4>
    2012:	4b ce       	rjmp	.-874    	; 0x1caa <main+0x4a>
					break;
				}
				else{
					pass = CORRECT;
    2014:	10 92 67 01 	sts	0x0167, r1
    2018:	d2 ce       	rjmp	.-604    	; 0x1dbe <main+0x15e>

0000201a <enterPassword>:

    } /* APPLICATION WHILE 1*/
} /* MAIN METHOD*/


void enterPassword(void){
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
    2022:	2f 97       	sbiw	r28, 0x0f	; 15
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    202e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please Enter");
    2032:	26 e9       	ldi	r18, 0x96	; 150
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	a9 01       	movw	r20, r18
    203c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"The Password :");
    2040:	23 ea       	ldi	r18, 0xA3	; 163
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	a9 01       	movw	r20, r18
    204a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>

	for(uint8 i = 0; i<6 ; i++){
    204e:	1f 86       	std	Y+15, r1	; 0x0f
    2050:	ab c0       	rjmp	.+342    	; 0x21a8 <enterPassword+0x18e>
		LCD_moveCursor(2,i);
    2052:	82 e0       	ldi	r24, 0x02	; 2
    2054:	6f 85       	ldd	r22, Y+15	; 0x0f
    2056:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_moveCursor>
		key = KEYPAD_getPressedKey(); /* get the pressed key number */
    205a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    205e:	80 93 6e 01 	sts	0x016E, r24

		if(i!=5){
    2062:	8f 85       	ldd	r24, Y+15	; 0x0f
    2064:	85 30       	cpi	r24, 0x05	; 5
    2066:	e9 f0       	breq	.+58     	; 0x20a2 <enterPassword+0x88>
			if(((key <= 9) && (key >= 0)) || (key == 42))
    2068:	80 91 6e 01 	lds	r24, 0x016E
    206c:	8a 30       	cpi	r24, 0x0A	; 10
    206e:	20 f0       	brcs	.+8      	; 0x2078 <enterPassword+0x5e>
    2070:	80 91 6e 01 	lds	r24, 0x016E
    2074:	8a 32       	cpi	r24, 0x2A	; 42
    2076:	69 f4       	brne	.+26     	; 0x2092 <enterPassword+0x78>
			{
				LCD_displayCharacter('*');
    2078:	8a e2       	ldi	r24, 0x2A	; 42
    207a:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LCD_displayCharacter>
				passArray[i] = key;
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	88 2f       	mov	r24, r24
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	20 91 6e 01 	lds	r18, 0x016E
    2088:	fc 01       	movw	r30, r24
    208a:	e1 59       	subi	r30, 0x91	; 145
    208c:	fe 4f       	sbci	r31, 0xFE	; 254
    208e:	20 83       	st	Z, r18
    2090:	16 c0       	rjmp	.+44     	; 0x20be <enterPassword+0xa4>
				//LCD_intgerToString(key); /* display the pressed keypad switch */
			}
			else if(key == 35){
    2092:	80 91 6e 01 	lds	r24, 0x016E
    2096:	83 32       	cpi	r24, 0x23	; 35
    2098:	91 f4       	brne	.+36     	; 0x20be <enterPassword+0xa4>
				i--;
    209a:	8f 85       	ldd	r24, Y+15	; 0x0f
    209c:	81 50       	subi	r24, 0x01	; 1
    209e:	8f 87       	std	Y+15, r24	; 0x0f
    20a0:	0e c0       	rjmp	.+28     	; 0x20be <enterPassword+0xa4>
				//	LCD_displayCharacter(key); /* display the pressed keypad switch */
			}
		}
		else if (i ==5){
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	85 30       	cpi	r24, 0x05	; 5
    20a6:	59 f4       	brne	.+22     	; 0x20be <enterPassword+0xa4>
			if(((key <= 9) && (key >= 0)) || (key == 42))
    20a8:	80 91 6e 01 	lds	r24, 0x016E
    20ac:	8a 30       	cpi	r24, 0x0A	; 10
    20ae:	20 f0       	brcs	.+8      	; 0x20b8 <enterPassword+0x9e>
    20b0:	80 91 6e 01 	lds	r24, 0x016E
    20b4:	8a 32       	cpi	r24, 0x2A	; 42
    20b6:	19 f4       	brne	.+6      	; 0x20be <enterPassword+0xa4>
			{
				i--;
    20b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ba:	81 50       	subi	r24, 0x01	; 1
    20bc:	8f 87       	std	Y+15, r24	; 0x0f
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a6 e1       	ldi	r26, 0x16	; 22
    20c4:	b4 e4       	ldi	r27, 0x44	; 68
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <enterPassword+0xf6>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <enterPassword+0x174>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <enterPassword+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <enterPassword+0x156>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <enterPassword+0x144>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <enterPassword+0x138>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <enterPassword+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <enterPassword+0x180>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
void enterPassword(void){
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Please Enter");
	LCD_displayStringRowColumn(1,0,"The Password :");

	for(uint8 i = 0; i<6 ; i++){
    21a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	8f 87       	std	Y+15, r24	; 0x0f
    21a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21aa:	86 30       	cpi	r24, 0x06	; 6
    21ac:	08 f4       	brcc	.+2      	; 0x21b0 <enterPassword+0x196>
    21ae:	51 cf       	rjmp	.-350    	; 0x2052 <enterPassword+0x38>
				i--;
			}
		}
		_delay_ms(600); /* Press time */
	}
}
    21b0:	2f 96       	adiw	r28, 0x0f	; 15
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <reEnterPassword>:

void reEnterPassword(void){
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	2f 97       	sbiw	r28, 0x0f	; 15
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    21d6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Please Re-Enter");
    21da:	22 eb       	ldi	r18, 0xB2	; 178
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	a9 01       	movw	r20, r18
    21e4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"The Password :");
    21e8:	23 ea       	ldi	r18, 0xA3	; 163
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	a9 01       	movw	r20, r18
    21f2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>

	for(uint8 i = 0; i<6 ; i++){
    21f6:	1f 86       	std	Y+15, r1	; 0x0f
    21f8:	ab c0       	rjmp	.+342    	; 0x2350 <reEnterPassword+0x18e>
		LCD_moveCursor(2,i);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    21fe:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_moveCursor>
		key = KEYPAD_getPressedKey(); /* get the pressed key number */
    2202:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2206:	80 93 6e 01 	sts	0x016E, r24

		if(i!=5){
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	85 30       	cpi	r24, 0x05	; 5
    220e:	e9 f0       	breq	.+58     	; 0x224a <reEnterPassword+0x88>
			if(((key <= 9) && (key >= 0)) || (key == 42))
    2210:	80 91 6e 01 	lds	r24, 0x016E
    2214:	8a 30       	cpi	r24, 0x0A	; 10
    2216:	20 f0       	brcs	.+8      	; 0x2220 <reEnterPassword+0x5e>
    2218:	80 91 6e 01 	lds	r24, 0x016E
    221c:	8a 32       	cpi	r24, 0x2A	; 42
    221e:	69 f4       	brne	.+26     	; 0x223a <reEnterPassword+0x78>
			{
				LCD_displayCharacter('*');
    2220:	8a e2       	ldi	r24, 0x2A	; 42
    2222:	0e 94 8a 0b 	call	0x1714	; 0x1714 <LCD_displayCharacter>
				rePassArray[i] = key;
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	20 91 6e 01 	lds	r18, 0x016E
    2230:	fc 01       	movw	r30, r24
    2232:	e8 59       	subi	r30, 0x98	; 152
    2234:	fe 4f       	sbci	r31, 0xFE	; 254
    2236:	20 83       	st	Z, r18
    2238:	16 c0       	rjmp	.+44     	; 0x2266 <reEnterPassword+0xa4>
			}
			else if(key == 35){
    223a:	80 91 6e 01 	lds	r24, 0x016E
    223e:	83 32       	cpi	r24, 0x23	; 35
    2240:	91 f4       	brne	.+36     	; 0x2266 <reEnterPassword+0xa4>
				i--;
    2242:	8f 85       	ldd	r24, Y+15	; 0x0f
    2244:	81 50       	subi	r24, 0x01	; 1
    2246:	8f 87       	std	Y+15, r24	; 0x0f
    2248:	0e c0       	rjmp	.+28     	; 0x2266 <reEnterPassword+0xa4>
			}
		}
		else if (i ==5){
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	85 30       	cpi	r24, 0x05	; 5
    224e:	59 f4       	brne	.+22     	; 0x2266 <reEnterPassword+0xa4>
			if(((key <= 9) && (key >= 0)) || (key == 42))
    2250:	80 91 6e 01 	lds	r24, 0x016E
    2254:	8a 30       	cpi	r24, 0x0A	; 10
    2256:	20 f0       	brcs	.+8      	; 0x2260 <reEnterPassword+0x9e>
    2258:	80 91 6e 01 	lds	r24, 0x016E
    225c:	8a 32       	cpi	r24, 0x2A	; 42
    225e:	19 f4       	brne	.+6      	; 0x2266 <reEnterPassword+0xa4>
			{
				i--;
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	81 50       	subi	r24, 0x01	; 1
    2264:	8f 87       	std	Y+15, r24	; 0x0f
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a8 e4       	ldi	r26, 0x48	; 72
    226c:	b4 e4       	ldi	r27, 0x44	; 68
    226e:	8b 87       	std	Y+11, r24	; 0x0b
    2270:	9c 87       	std	Y+12, r25	; 0x0c
    2272:	ad 87       	std	Y+13, r26	; 0x0d
    2274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2276:	6b 85       	ldd	r22, Y+11	; 0x0b
    2278:	7c 85       	ldd	r23, Y+12	; 0x0c
    227a:	8d 85       	ldd	r24, Y+13	; 0x0d
    227c:	9e 85       	ldd	r25, Y+14	; 0x0e
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	4a ef       	ldi	r20, 0xFA	; 250
    2284:	54 e4       	ldi	r21, 0x44	; 68
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	8f 83       	std	Y+7, r24	; 0x07
    2290:	98 87       	std	Y+8, r25	; 0x08
    2292:	a9 87       	std	Y+9, r26	; 0x09
    2294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	2c f4       	brge	.+10     	; 0x22b8 <reEnterPassword+0xf6>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	3f c0       	rjmp	.+126    	; 0x2336 <reEnterPassword+0x174>
	else if (__tmp > 65535)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	3f ef       	ldi	r19, 0xFF	; 255
    22c4:	4f e7       	ldi	r20, 0x7F	; 127
    22c6:	57 e4       	ldi	r21, 0x47	; 71
    22c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	4c f5       	brge	.+82     	; 0x2322 <reEnterPassword+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e2       	ldi	r20, 0x20	; 32
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	bc 01       	movw	r22, r24
    22ea:	cd 01       	movw	r24, r26
    22ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <reEnterPassword+0x156>
    22fa:	88 ec       	ldi	r24, 0xC8	; 200
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9c 83       	std	Y+4, r25	; 0x04
    2300:	8b 83       	std	Y+3, r24	; 0x03
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <reEnterPassword+0x144>
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2318:	8d 81       	ldd	r24, Y+5	; 0x05
    231a:	9e 81       	ldd	r25, Y+6	; 0x06
    231c:	00 97       	sbiw	r24, 0x00	; 0
    231e:	69 f7       	brne	.-38     	; 0x22fa <reEnterPassword+0x138>
    2320:	14 c0       	rjmp	.+40     	; 0x234a <reEnterPassword+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	89 83       	std	Y+1, r24	; 0x01
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	9a 81       	ldd	r25, Y+2	; 0x02
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <reEnterPassword+0x180>
    2346:	9a 83       	std	Y+2, r25	; 0x02
    2348:	89 83       	std	Y+1, r24	; 0x01
void reEnterPassword(void){
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Please Re-Enter");
	LCD_displayStringRowColumn(1,0,"The Password :");

	for(uint8 i = 0; i<6 ; i++){
    234a:	8f 85       	ldd	r24, Y+15	; 0x0f
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	8f 87       	std	Y+15, r24	; 0x0f
    2350:	8f 85       	ldd	r24, Y+15	; 0x0f
    2352:	86 30       	cpi	r24, 0x06	; 6
    2354:	08 f4       	brcc	.+2      	; 0x2358 <reEnterPassword+0x196>
    2356:	51 cf       	rjmp	.-350    	; 0x21fa <reEnterPassword+0x38>
			}
		}
		_delay_ms(800); /* Press time */
	}

}
    2358:	2f 96       	adiw	r28, 0x0f	; 15
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <passCompare>:
void passCompare(void){
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	2e 97       	sbiw	r28, 0x0e	; 14
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
	for(counter = 0 ; counter<5;counter++){
    237e:	10 92 6d 01 	sts	0x016D, r1
    2382:	9e c0       	rjmp	.+316    	; 0x24c0 <passCompare+0x156>
		if(passArray[counter] != rePassArray[counter]){
    2384:	80 91 6d 01 	lds	r24, 0x016D
    2388:	88 2f       	mov	r24, r24
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	fc 01       	movw	r30, r24
    238e:	e1 59       	subi	r30, 0x91	; 145
    2390:	fe 4f       	sbci	r31, 0xFE	; 254
    2392:	20 81       	ld	r18, Z
    2394:	80 91 6d 01 	lds	r24, 0x016D
    2398:	88 2f       	mov	r24, r24
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fc 01       	movw	r30, r24
    239e:	e8 59       	subi	r30, 0x98	; 152
    23a0:	fe 4f       	sbci	r31, 0xFE	; 254
    23a2:	80 81       	ld	r24, Z
    23a4:	28 17       	cp	r18, r24
    23a6:	09 f4       	brne	.+2      	; 0x23aa <passCompare+0x40>
    23a8:	86 c0       	rjmp	.+268    	; 0x24b6 <passCompare+0x14c>
			LCD_clearScreen();
    23aa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Password Doesn't");
    23ae:	22 ec       	ldi	r18, 0xC2	; 194
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	a9 01       	movw	r20, r18
    23b8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Match Try again");
    23bc:	23 ed       	ldi	r18, 0xD3	; 211
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	a9 01       	movw	r20, r18
    23c6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e8       	ldi	r25, 0x80	; 128
    23ce:	ab e3       	ldi	r26, 0x3B	; 59
    23d0:	b5 e4       	ldi	r27, 0x45	; 69
    23d2:	8b 87       	std	Y+11, r24	; 0x0b
    23d4:	9c 87       	std	Y+12, r25	; 0x0c
    23d6:	ad 87       	std	Y+13, r26	; 0x0d
    23d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6b 85       	ldd	r22, Y+11	; 0x0b
    23dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23de:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a ef       	ldi	r20, 0xFA	; 250
    23e8:	54 e4       	ldi	r21, 0x44	; 68
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8f 83       	std	Y+7, r24	; 0x07
    23f4:	98 87       	std	Y+8, r25	; 0x08
    23f6:	a9 87       	std	Y+9, r26	; 0x09
    23f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fa:	6f 81       	ldd	r22, Y+7	; 0x07
    23fc:	78 85       	ldd	r23, Y+8	; 0x08
    23fe:	89 85       	ldd	r24, Y+9	; 0x09
    2400:	9a 85       	ldd	r25, Y+10	; 0x0a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <passCompare+0xb2>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9e 83       	std	Y+6, r25	; 0x06
    2418:	8d 83       	std	Y+5, r24	; 0x05
    241a:	3f c0       	rjmp	.+126    	; 0x249a <passCompare+0x130>
	else if (__tmp > 65535)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <passCompare+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6b 85       	ldd	r22, Y+11	; 0x0b
    2436:	7c 85       	ldd	r23, Y+12	; 0x0c
    2438:	8d 85       	ldd	r24, Y+13	; 0x0d
    243a:	9e 85       	ldd	r25, Y+14	; 0x0e
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	0f c0       	rjmp	.+30     	; 0x247c <passCompare+0x112>
    245e:	88 ec       	ldi	r24, 0xC8	; 200
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <passCompare+0x100>
    246e:	9c 83       	std	Y+4, r25	; 0x04
    2470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9e 83       	std	Y+6, r25	; 0x06
    247a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	8d 81       	ldd	r24, Y+5	; 0x05
    247e:	9e 81       	ldd	r25, Y+6	; 0x06
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <passCompare+0xf4>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <passCompare+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6f 81       	ldd	r22, Y+7	; 0x07
    2488:	78 85       	ldd	r23, Y+8	; 0x08
    248a:	89 85       	ldd	r24, Y+9	; 0x09
    248c:	9a 85       	ldd	r25, Y+10	; 0x0a
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9e 83       	std	Y+6, r25	; 0x06
    2498:	8d 83       	std	Y+5, r24	; 0x05
    249a:	8d 81       	ldd	r24, Y+5	; 0x05
    249c:	9e 81       	ldd	r25, Y+6	; 0x06
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	89 81       	ldd	r24, Y+1	; 0x01
    24a4:	9a 81       	ldd	r25, Y+2	; 0x02
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <passCompare+0x13c>
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			flag = NOT_MATCH;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	80 93 66 01 	sts	0x0166, r24
    24b4:	0a c0       	rjmp	.+20     	; 0x24ca <passCompare+0x160>
		_delay_ms(800); /* Press time */
	}

}
void passCompare(void){
	for(counter = 0 ; counter<5;counter++){
    24b6:	80 91 6d 01 	lds	r24, 0x016D
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	80 93 6d 01 	sts	0x016D, r24
    24c0:	80 91 6d 01 	lds	r24, 0x016D
    24c4:	85 30       	cpi	r24, 0x05	; 5
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <passCompare+0x160>
    24c8:	5d cf       	rjmp	.-326    	; 0x2384 <passCompare+0x1a>
			_delay_ms(3000);
			flag = NOT_MATCH;
			break;
		}
	}
}
    24ca:	2e 96       	adiw	r28, 0x0e	; 14
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	cf 91       	pop	r28
    24d8:	df 91       	pop	r29
    24da:	08 95       	ret

000024dc <savePass>:
void savePass(void){
    24dc:	0f 93       	push	r16
    24de:	1f 93       	push	r17
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	cd b7       	in	r28, 0x3d	; 61
    24e6:	de b7       	in	r29, 0x3e	; 62
    24e8:	c6 54       	subi	r28, 0x46	; 70
    24ea:	d0 40       	sbci	r29, 0x00	; 0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(MC1_DONE);
    24f6:	81 e1       	ldi	r24, 0x11	; 17
    24f8:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    24fc:	fe 01       	movw	r30, r28
    24fe:	ed 5b       	subi	r30, 0xBD	; 189
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 ec       	ldi	r26, 0xC8	; 200
    2508:	b2 e4       	ldi	r27, 0x42	; 66
    250a:	80 83       	st	Z, r24
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	a2 83       	std	Z+2, r26	; 0x02
    2510:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	8e 01       	movw	r16, r28
    2514:	01 5c       	subi	r16, 0xC1	; 193
    2516:	1f 4f       	sbci	r17, 0xFF	; 255
    2518:	fe 01       	movw	r30, r28
    251a:	ed 5b       	subi	r30, 0xBD	; 189
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	f8 01       	movw	r30, r16
    2538:	80 83       	st	Z, r24
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	a2 83       	std	Z+2, r26	; 0x02
    253e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2540:	fe 01       	movw	r30, r28
    2542:	ff 96       	adiw	r30, 0x3f	; 63
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e8       	ldi	r20, 0x80	; 128
    2552:	5f e3       	ldi	r21, 0x3F	; 63
    2554:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2558:	88 23       	and	r24, r24
    255a:	2c f4       	brge	.+10     	; 0x2566 <savePass+0x8a>
		__ticks = 1;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	9e af       	std	Y+62, r25	; 0x3e
    2562:	8d af       	std	Y+61, r24	; 0x3d
    2564:	46 c0       	rjmp	.+140    	; 0x25f2 <savePass+0x116>
	else if (__tmp > 65535)
    2566:	fe 01       	movw	r30, r28
    2568:	ff 96       	adiw	r30, 0x3f	; 63
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	64 f5       	brge	.+88     	; 0x25da <savePass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2582:	fe 01       	movw	r30, r28
    2584:	ed 5b       	subi	r30, 0xBD	; 189
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	82 81       	ldd	r24, Z+2	; 0x02
    258e:	93 81       	ldd	r25, Z+3	; 0x03
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e2       	ldi	r20, 0x20	; 32
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	9e af       	std	Y+62, r25	; 0x3e
    25ae:	8d af       	std	Y+61, r24	; 0x3d
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <savePass+0xf4>
    25b2:	88 ec       	ldi	r24, 0xC8	; 200
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	9c af       	std	Y+60, r25	; 0x3c
    25b8:	8b af       	std	Y+59, r24	; 0x3b
    25ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    25bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <savePass+0xe2>
    25c2:	9c af       	std	Y+60, r25	; 0x3c
    25c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	9e af       	std	Y+62, r25	; 0x3e
    25ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	69 f7       	brne	.-38     	; 0x25b2 <savePass+0xd6>
    25d8:	16 c0       	rjmp	.+44     	; 0x2606 <savePass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25da:	fe 01       	movw	r30, r28
    25dc:	ff 96       	adiw	r30, 0x3f	; 63
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9e af       	std	Y+62, r25	; 0x3e
    25f0:	8d af       	std	Y+61, r24	; 0x3d
    25f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    25f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    25f6:	9a af       	std	Y+58, r25	; 0x3a
    25f8:	89 af       	std	Y+57, r24	; 0x39
    25fa:	89 ad       	ldd	r24, Y+57	; 0x39
    25fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <savePass+0x122>
    2602:	9a af       	std	Y+58, r25	; 0x3a
    2604:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(100);
	while(UART_recieveByte() != MC2_READY){};
    2606:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    260a:	89 31       	cpi	r24, 0x19	; 25
    260c:	e1 f7       	brne	.-8      	; 0x2606 <savePass+0x12a>
	UART_sendByte(passArray[0]);
    260e:	80 91 6f 01 	lds	r24, 0x016F
    2612:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a8 ec       	ldi	r26, 0xC8	; 200
    261c:	b2 e4       	ldi	r27, 0x42	; 66
    261e:	8d ab       	std	Y+53, r24	; 0x35
    2620:	9e ab       	std	Y+54, r25	; 0x36
    2622:	af ab       	std	Y+55, r26	; 0x37
    2624:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2626:	6d a9       	ldd	r22, Y+53	; 0x35
    2628:	7e a9       	ldd	r23, Y+54	; 0x36
    262a:	8f a9       	ldd	r24, Y+55	; 0x37
    262c:	98 ad       	ldd	r25, Y+56	; 0x38
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	4a ef       	ldi	r20, 0xFA	; 250
    2634:	54 e4       	ldi	r21, 0x44	; 68
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	89 ab       	std	Y+49, r24	; 0x31
    2640:	9a ab       	std	Y+50, r25	; 0x32
    2642:	ab ab       	std	Y+51, r26	; 0x33
    2644:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2646:	69 a9       	ldd	r22, Y+49	; 0x31
    2648:	7a a9       	ldd	r23, Y+50	; 0x32
    264a:	8b a9       	ldd	r24, Y+51	; 0x33
    264c:	9c a9       	ldd	r25, Y+52	; 0x34
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e8       	ldi	r20, 0x80	; 128
    2654:	5f e3       	ldi	r21, 0x3F	; 63
    2656:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    265a:	88 23       	and	r24, r24
    265c:	2c f4       	brge	.+10     	; 0x2668 <savePass+0x18c>
		__ticks = 1;
    265e:	81 e0       	ldi	r24, 0x01	; 1
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	98 ab       	std	Y+48, r25	; 0x30
    2664:	8f a7       	std	Y+47, r24	; 0x2f
    2666:	3f c0       	rjmp	.+126    	; 0x26e6 <savePass+0x20a>
	else if (__tmp > 65535)
    2668:	69 a9       	ldd	r22, Y+49	; 0x31
    266a:	7a a9       	ldd	r23, Y+50	; 0x32
    266c:	8b a9       	ldd	r24, Y+51	; 0x33
    266e:	9c a9       	ldd	r25, Y+52	; 0x34
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	3f ef       	ldi	r19, 0xFF	; 255
    2674:	4f e7       	ldi	r20, 0x7F	; 127
    2676:	57 e4       	ldi	r21, 0x47	; 71
    2678:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267c:	18 16       	cp	r1, r24
    267e:	4c f5       	brge	.+82     	; 0x26d2 <savePass+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2680:	6d a9       	ldd	r22, Y+53	; 0x35
    2682:	7e a9       	ldd	r23, Y+54	; 0x36
    2684:	8f a9       	ldd	r24, Y+55	; 0x37
    2686:	98 ad       	ldd	r25, Y+56	; 0x38
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e2       	ldi	r20, 0x20	; 32
    268e:	51 e4       	ldi	r21, 0x41	; 65
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	bc 01       	movw	r22, r24
    269a:	cd 01       	movw	r24, r26
    269c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	98 ab       	std	Y+48, r25	; 0x30
    26a6:	8f a7       	std	Y+47, r24	; 0x2f
    26a8:	0f c0       	rjmp	.+30     	; 0x26c8 <savePass+0x1ec>
    26aa:	88 ec       	ldi	r24, 0xC8	; 200
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	9e a7       	std	Y+46, r25	; 0x2e
    26b0:	8d a7       	std	Y+45, r24	; 0x2d
    26b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    26b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b6:	01 97       	sbiw	r24, 0x01	; 1
    26b8:	f1 f7       	brne	.-4      	; 0x26b6 <savePass+0x1da>
    26ba:	9e a7       	std	Y+46, r25	; 0x2e
    26bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c0:	98 a9       	ldd	r25, Y+48	; 0x30
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	98 ab       	std	Y+48, r25	; 0x30
    26c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ca:	98 a9       	ldd	r25, Y+48	; 0x30
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	69 f7       	brne	.-38     	; 0x26aa <savePass+0x1ce>
    26d0:	14 c0       	rjmp	.+40     	; 0x26fa <savePass+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d2:	69 a9       	ldd	r22, Y+49	; 0x31
    26d4:	7a a9       	ldd	r23, Y+50	; 0x32
    26d6:	8b a9       	ldd	r24, Y+51	; 0x33
    26d8:	9c a9       	ldd	r25, Y+52	; 0x34
    26da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	98 ab       	std	Y+48, r25	; 0x30
    26e4:	8f a7       	std	Y+47, r24	; 0x2f
    26e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ea:	9c a7       	std	Y+44, r25	; 0x2c
    26ec:	8b a7       	std	Y+43, r24	; 0x2b
    26ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    26f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <savePass+0x216>
    26f6:	9c a7       	std	Y+44, r25	; 0x2c
    26f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);
	UART_sendByte(passArray[1]);
    26fa:	80 91 70 01 	lds	r24, 0x0170
    26fe:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a8 ec       	ldi	r26, 0xC8	; 200
    2708:	b2 e4       	ldi	r27, 0x42	; 66
    270a:	8f a3       	std	Y+39, r24	; 0x27
    270c:	98 a7       	std	Y+40, r25	; 0x28
    270e:	a9 a7       	std	Y+41, r26	; 0x29
    2710:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	6f a1       	ldd	r22, Y+39	; 0x27
    2714:	78 a5       	ldd	r23, Y+40	; 0x28
    2716:	89 a5       	ldd	r24, Y+41	; 0x29
    2718:	9a a5       	ldd	r25, Y+42	; 0x2a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a ef       	ldi	r20, 0xFA	; 250
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8b a3       	std	Y+35, r24	; 0x23
    272c:	9c a3       	std	Y+36, r25	; 0x24
    272e:	ad a3       	std	Y+37, r26	; 0x25
    2730:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2732:	6b a1       	ldd	r22, Y+35	; 0x23
    2734:	7c a1       	ldd	r23, Y+36	; 0x24
    2736:	8d a1       	ldd	r24, Y+37	; 0x25
    2738:	9e a1       	ldd	r25, Y+38	; 0x26
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <savePass+0x278>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <savePass+0x2f6>
	else if (__tmp > 65535)
    2754:	6b a1       	ldd	r22, Y+35	; 0x23
    2756:	7c a1       	ldd	r23, Y+36	; 0x24
    2758:	8d a1       	ldd	r24, Y+37	; 0x25
    275a:	9e a1       	ldd	r25, Y+38	; 0x26
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <savePass+0x2e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	6f a1       	ldd	r22, Y+39	; 0x27
    276e:	78 a5       	ldd	r23, Y+40	; 0x28
    2770:	89 a5       	ldd	r24, Y+41	; 0x29
    2772:	9a a5       	ldd	r25, Y+42	; 0x2a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <savePass+0x2d8>
    2796:	88 ec       	ldi	r24, 0xC8	; 200
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	98 a3       	std	Y+32, r25	; 0x20
    279c:	8f 8f       	std	Y+31, r24	; 0x1f
    279e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27a0:	98 a1       	ldd	r25, Y+32	; 0x20
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <savePass+0x2c6>
    27a6:	98 a3       	std	Y+32, r25	; 0x20
    27a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	89 a1       	ldd	r24, Y+33	; 0x21
    27ac:	9a a1       	ldd	r25, Y+34	; 0x22
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <savePass+0x2ba>
    27bc:	14 c0       	rjmp	.+40     	; 0x27e6 <savePass+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	6b a1       	ldd	r22, Y+35	; 0x23
    27c0:	7c a1       	ldd	r23, Y+36	; 0x24
    27c2:	8d a1       	ldd	r24, Y+37	; 0x25
    27c4:	9e a1       	ldd	r25, Y+38	; 0x26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	89 a1       	ldd	r24, Y+33	; 0x21
    27d4:	9a a1       	ldd	r25, Y+34	; 0x22
    27d6:	9e 8f       	std	Y+30, r25	; 0x1e
    27d8:	8d 8f       	std	Y+29, r24	; 0x1d
    27da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <savePass+0x302>
    27e2:	9e 8f       	std	Y+30, r25	; 0x1e
    27e4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(100);
	UART_sendByte(passArray[2]);
    27e6:	80 91 71 01 	lds	r24, 0x0171
    27ea:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a8 ec       	ldi	r26, 0xC8	; 200
    27f4:	b2 e4       	ldi	r27, 0x42	; 66
    27f6:	89 8f       	std	Y+25, r24	; 0x19
    27f8:	9a 8f       	std	Y+26, r25	; 0x1a
    27fa:	ab 8f       	std	Y+27, r26	; 0x1b
    27fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8d 8b       	std	Y+21, r24	; 0x15
    2818:	9e 8b       	std	Y+22, r25	; 0x16
    281a:	af 8b       	std	Y+23, r26	; 0x17
    281c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281e:	6d 89       	ldd	r22, Y+21	; 0x15
    2820:	7e 89       	ldd	r23, Y+22	; 0x16
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <savePass+0x364>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
    283e:	3f c0       	rjmp	.+126    	; 0x28be <savePass+0x3e2>
	else if (__tmp > 65535)
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <savePass+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	69 8d       	ldd	r22, Y+25	; 0x19
    285a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <savePass+0x3c4>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	89 8b       	std	Y+17, r24	; 0x11
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	9a 89       	ldd	r25, Y+18	; 0x12
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <savePass+0x3b2>
    2892:	9a 8b       	std	Y+18, r25	; 0x12
    2894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <savePass+0x3a6>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <savePass+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	98 8b       	std	Y+16, r25	; 0x10
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	98 89       	ldd	r25, Y+16	; 0x10
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <savePass+0x3ee>
    28ce:	98 8b       	std	Y+16, r25	; 0x10
    28d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	UART_sendByte(passArray[3]);
    28d2:	80 91 72 01 	lds	r24, 0x0172
    28d6:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	a8 ec       	ldi	r26, 0xC8	; 200
    28e0:	b2 e4       	ldi	r27, 0x42	; 66
    28e2:	8b 87       	std	Y+11, r24	; 0x0b
    28e4:	9c 87       	std	Y+12, r25	; 0x0c
    28e6:	ad 87       	std	Y+13, r26	; 0x0d
    28e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a ef       	ldi	r20, 0xFA	; 250
    28f8:	54 e4       	ldi	r21, 0x44	; 68
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	8f 83       	std	Y+7, r24	; 0x07
    2904:	98 87       	std	Y+8, r25	; 0x08
    2906:	a9 87       	std	Y+9, r26	; 0x09
    2908:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290a:	6f 81       	ldd	r22, Y+7	; 0x07
    290c:	78 85       	ldd	r23, Y+8	; 0x08
    290e:	89 85       	ldd	r24, Y+9	; 0x09
    2910:	9a 85       	ldd	r25, Y+10	; 0x0a
    2912:	20 e0       	ldi	r18, 0x00	; 0
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	40 e8       	ldi	r20, 0x80	; 128
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    291e:	88 23       	and	r24, r24
    2920:	2c f4       	brge	.+10     	; 0x292c <savePass+0x450>
		__ticks = 1;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	3f c0       	rjmp	.+126    	; 0x29aa <savePass+0x4ce>
	else if (__tmp > 65535)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	3f ef       	ldi	r19, 0xFF	; 255
    2938:	4f e7       	ldi	r20, 0x7F	; 127
    293a:	57 e4       	ldi	r21, 0x47	; 71
    293c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2940:	18 16       	cp	r1, r24
    2942:	4c f5       	brge	.+82     	; 0x2996 <savePass+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e2       	ldi	r20, 0x20	; 32
    2952:	51 e4       	ldi	r21, 0x41	; 65
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	bc 01       	movw	r22, r24
    295e:	cd 01       	movw	r24, r26
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	0f c0       	rjmp	.+30     	; 0x298c <savePass+0x4b0>
    296e:	88 ec       	ldi	r24, 0xC8	; 200
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <savePass+0x49e>
    297e:	9c 83       	std	Y+4, r25	; 0x04
    2980:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	00 97       	sbiw	r24, 0x00	; 0
    2992:	69 f7       	brne	.-38     	; 0x296e <savePass+0x492>
    2994:	14 c0       	rjmp	.+40     	; 0x29be <savePass+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2996:	6f 81       	ldd	r22, Y+7	; 0x07
    2998:	78 85       	ldd	r23, Y+8	; 0x08
    299a:	89 85       	ldd	r24, Y+9	; 0x09
    299c:	9a 85       	ldd	r25, Y+10	; 0x0a
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9e 83       	std	Y+6, r25	; 0x06
    29a8:	8d 83       	std	Y+5, r24	; 0x05
    29aa:	8d 81       	ldd	r24, Y+5	; 0x05
    29ac:	9e 81       	ldd	r25, Y+6	; 0x06
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <savePass+0x4da>
    29ba:	9a 83       	std	Y+2, r25	; 0x02
    29bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	UART_sendByte(passArray[4]);
    29be:	80 91 73 01 	lds	r24, 0x0173
    29c2:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>

}
    29c6:	ca 5b       	subi	r28, 0xBA	; 186
    29c8:	df 4f       	sbci	r29, 0xFF	; 255
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	08 95       	ret

000029de <openDoor>:
void openDoor(void){
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	c0 57       	subi	r28, 0x70	; 112
    29ec:	d0 40       	sbci	r29, 0x00	; 0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
	LCD_intgerToString(key);
    29f8:	80 91 6e 01 	lds	r24, 0x016E
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_intgerToString>
    2a04:	fe 01       	movw	r30, r28
    2a06:	e3 59       	subi	r30, 0x93	; 147
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a8 ec       	ldi	r26, 0xC8	; 200
    2a10:	b2 e4       	ldi	r27, 0x42	; 66
    2a12:	80 83       	st	Z, r24
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	a2 83       	std	Z+2, r26	; 0x02
    2a18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	07 59       	subi	r16, 0x97	; 151
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e3 59       	subi	r30, 0x93	; 147
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a ef       	ldi	r20, 0xFA	; 250
    2a34:	54 e4       	ldi	r21, 0x44	; 68
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	f8 01       	movw	r30, r16
    2a40:	80 83       	st	Z, r24
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	a2 83       	std	Z+2, r26	; 0x02
    2a46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a48:	fe 01       	movw	r30, r28
    2a4a:	e7 59       	subi	r30, 0x97	; 151
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	60 81       	ld	r22, Z
    2a50:	71 81       	ldd	r23, Z+1	; 0x01
    2a52:	82 81       	ldd	r24, Z+2	; 0x02
    2a54:	93 81       	ldd	r25, Z+3	; 0x03
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a62:	88 23       	and	r24, r24
    2a64:	44 f4       	brge	.+16     	; 0x2a76 <openDoor+0x98>
		__ticks = 1;
    2a66:	fe 01       	movw	r30, r28
    2a68:	e9 59       	subi	r30, 0x99	; 153
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
    2a74:	64 c0       	rjmp	.+200    	; 0x2b3e <openDoor+0x160>
	else if (__tmp > 65535)
    2a76:	fe 01       	movw	r30, r28
    2a78:	e7 59       	subi	r30, 0x97	; 151
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	60 81       	ld	r22, Z
    2a7e:	71 81       	ldd	r23, Z+1	; 0x01
    2a80:	82 81       	ldd	r24, Z+2	; 0x02
    2a82:	93 81       	ldd	r25, Z+3	; 0x03
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	3f ef       	ldi	r19, 0xFF	; 255
    2a88:	4f e7       	ldi	r20, 0x7F	; 127
    2a8a:	57 e4       	ldi	r21, 0x47	; 71
    2a8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a90:	18 16       	cp	r1, r24
    2a92:	0c f0       	brlt	.+2      	; 0x2a96 <openDoor+0xb8>
    2a94:	43 c0       	rjmp	.+134    	; 0x2b1c <openDoor+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e3 59       	subi	r30, 0x93	; 147
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	60 81       	ld	r22, Z
    2a9e:	71 81       	ldd	r23, Z+1	; 0x01
    2aa0:	82 81       	ldd	r24, Z+2	; 0x02
    2aa2:	93 81       	ldd	r25, Z+3	; 0x03
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e2       	ldi	r20, 0x20	; 32
    2aaa:	51 e4       	ldi	r21, 0x41	; 65
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	09 59       	subi	r16, 0x99	; 153
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	bc 01       	movw	r22, r24
    2abc:	cd 01       	movw	r24, r26
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	1f c0       	rjmp	.+62     	; 0x2b0c <openDoor+0x12e>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	eb 59       	subi	r30, 0x9B	; 155
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	88 ec       	ldi	r24, 0xC8	; 200
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	91 83       	std	Z+1, r25	; 0x01
    2ada:	80 83       	st	Z, r24
    2adc:	fe 01       	movw	r30, r28
    2ade:	eb 59       	subi	r30, 0x9B	; 155
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <openDoor+0x108>
    2aea:	fe 01       	movw	r30, r28
    2aec:	eb 59       	subi	r30, 0x9B	; 155
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	91 83       	std	Z+1, r25	; 0x01
    2af2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	de 01       	movw	r26, r28
    2af6:	a9 59       	subi	r26, 0x99	; 153
    2af8:	bf 4f       	sbci	r27, 0xFF	; 255
    2afa:	fe 01       	movw	r30, r28
    2afc:	e9 59       	subi	r30, 0x99	; 153
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	91 81       	ldd	r25, Z+1	; 0x01
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	11 96       	adiw	r26, 0x01	; 1
    2b08:	9c 93       	st	X, r25
    2b0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e9 59       	subi	r30, 0x99	; 153
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	00 97       	sbiw	r24, 0x00	; 0
    2b18:	d1 f6       	brne	.-76     	; 0x2ace <openDoor+0xf0>
    2b1a:	27 c0       	rjmp	.+78     	; 0x2b6a <openDoor+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b1c:	8e 01       	movw	r16, r28
    2b1e:	09 59       	subi	r16, 0x99	; 153
    2b20:	1f 4f       	sbci	r17, 0xFF	; 255
    2b22:	fe 01       	movw	r30, r28
    2b24:	e7 59       	subi	r30, 0x97	; 151
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	60 81       	ld	r22, Z
    2b2a:	71 81       	ldd	r23, Z+1	; 0x01
    2b2c:	82 81       	ldd	r24, Z+2	; 0x02
    2b2e:	93 81       	ldd	r25, Z+3	; 0x03
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	de 01       	movw	r26, r28
    2b40:	ad 59       	subi	r26, 0x9D	; 157
    2b42:	bf 4f       	sbci	r27, 0xFF	; 255
    2b44:	fe 01       	movw	r30, r28
    2b46:	e9 59       	subi	r30, 0x99	; 153
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	8d 93       	st	X+, r24
    2b50:	9c 93       	st	X, r25
    2b52:	fe 01       	movw	r30, r28
    2b54:	ed 59       	subi	r30, 0x9D	; 157
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	80 81       	ld	r24, Z
    2b5a:	91 81       	ldd	r25, Z+1	; 0x01
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	f1 f7       	brne	.-4      	; 0x2b5c <openDoor+0x17e>
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 59       	subi	r30, 0x9D	; 157
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	91 83       	std	Z+1, r25	; 0x01
    2b68:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_clearScreen();
    2b6a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Open Door");
    2b6e:	23 ee       	ldi	r18, 0xE3	; 227
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	a9 01       	movw	r20, r18
    2b78:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e1 5a       	subi	r30, 0xA1	; 161
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 e0       	ldi	r24, 0x00	; 0
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	aa ef       	ldi	r26, 0xFA	; 250
    2b88:	b3 e4       	ldi	r27, 0x43	; 67
    2b8a:	80 83       	st	Z, r24
    2b8c:	91 83       	std	Z+1, r25	; 0x01
    2b8e:	a2 83       	std	Z+2, r26	; 0x02
    2b90:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b92:	8e 01       	movw	r16, r28
    2b94:	05 5a       	subi	r16, 0xA5	; 165
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e1 5a       	subi	r30, 0xA1	; 161
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	60 81       	ld	r22, Z
    2ba0:	71 81       	ldd	r23, Z+1	; 0x01
    2ba2:	82 81       	ldd	r24, Z+2	; 0x02
    2ba4:	93 81       	ldd	r25, Z+3	; 0x03
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a ef       	ldi	r20, 0xFA	; 250
    2bac:	54 e4       	ldi	r21, 0x44	; 68
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	80 83       	st	Z, r24
    2bba:	91 83       	std	Z+1, r25	; 0x01
    2bbc:	a2 83       	std	Z+2, r26	; 0x02
    2bbe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e5 5a       	subi	r30, 0xA5	; 165
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	60 81       	ld	r22, Z
    2bc8:	71 81       	ldd	r23, Z+1	; 0x01
    2bca:	82 81       	ldd	r24, Z+2	; 0x02
    2bcc:	93 81       	ldd	r25, Z+3	; 0x03
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bda:	88 23       	and	r24, r24
    2bdc:	44 f4       	brge	.+16     	; 0x2bee <openDoor+0x210>
		__ticks = 1;
    2bde:	fe 01       	movw	r30, r28
    2be0:	e7 5a       	subi	r30, 0xA7	; 167
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	91 83       	std	Z+1, r25	; 0x01
    2bea:	80 83       	st	Z, r24
    2bec:	64 c0       	rjmp	.+200    	; 0x2cb6 <openDoor+0x2d8>
	else if (__tmp > 65535)
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e5 5a       	subi	r30, 0xA5	; 165
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	60 81       	ld	r22, Z
    2bf6:	71 81       	ldd	r23, Z+1	; 0x01
    2bf8:	82 81       	ldd	r24, Z+2	; 0x02
    2bfa:	93 81       	ldd	r25, Z+3	; 0x03
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	3f ef       	ldi	r19, 0xFF	; 255
    2c00:	4f e7       	ldi	r20, 0x7F	; 127
    2c02:	57 e4       	ldi	r21, 0x47	; 71
    2c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c08:	18 16       	cp	r1, r24
    2c0a:	0c f0       	brlt	.+2      	; 0x2c0e <openDoor+0x230>
    2c0c:	43 c0       	rjmp	.+134    	; 0x2c94 <openDoor+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e1 5a       	subi	r30, 0xA1	; 161
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	60 81       	ld	r22, Z
    2c16:	71 81       	ldd	r23, Z+1	; 0x01
    2c18:	82 81       	ldd	r24, Z+2	; 0x02
    2c1a:	93 81       	ldd	r25, Z+3	; 0x03
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8e 01       	movw	r16, r28
    2c2e:	07 5a       	subi	r16, 0xA7	; 167
    2c30:	1f 4f       	sbci	r17, 0xFF	; 255
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	91 83       	std	Z+1, r25	; 0x01
    2c42:	80 83       	st	Z, r24
    2c44:	1f c0       	rjmp	.+62     	; 0x2c84 <openDoor+0x2a6>
    2c46:	fe 01       	movw	r30, r28
    2c48:	e9 5a       	subi	r30, 0xA9	; 169
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	88 ec       	ldi	r24, 0xC8	; 200
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	fe 01       	movw	r30, r28
    2c56:	e9 5a       	subi	r30, 0xA9	; 169
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <openDoor+0x280>
    2c62:	fe 01       	movw	r30, r28
    2c64:	e9 5a       	subi	r30, 0xA9	; 169
    2c66:	ff 4f       	sbci	r31, 0xFF	; 255
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	de 01       	movw	r26, r28
    2c6e:	a7 5a       	subi	r26, 0xA7	; 167
    2c70:	bf 4f       	sbci	r27, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e7 5a       	subi	r30, 0xA7	; 167
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	80 81       	ld	r24, Z
    2c7a:	91 81       	ldd	r25, Z+1	; 0x01
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	11 96       	adiw	r26, 0x01	; 1
    2c80:	9c 93       	st	X, r25
    2c82:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c84:	fe 01       	movw	r30, r28
    2c86:	e7 5a       	subi	r30, 0xA7	; 167
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	80 81       	ld	r24, Z
    2c8c:	91 81       	ldd	r25, Z+1	; 0x01
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	d1 f6       	brne	.-76     	; 0x2c46 <openDoor+0x268>
    2c92:	27 c0       	rjmp	.+78     	; 0x2ce2 <openDoor+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c94:	8e 01       	movw	r16, r28
    2c96:	07 5a       	subi	r16, 0xA7	; 167
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	e5 5a       	subi	r30, 0xA5	; 165
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	91 83       	std	Z+1, r25	; 0x01
    2cb4:	80 83       	st	Z, r24
    2cb6:	de 01       	movw	r26, r28
    2cb8:	ab 5a       	subi	r26, 0xAB	; 171
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e7 5a       	subi	r30, 0xA7	; 167
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	8d 93       	st	X+, r24
    2cc8:	9c 93       	st	X, r25
    2cca:	fe 01       	movw	r30, r28
    2ccc:	eb 5a       	subi	r30, 0xAB	; 171
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	80 81       	ld	r24, Z
    2cd2:	91 81       	ldd	r25, Z+1	; 0x01
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <openDoor+0x2f6>
    2cd8:	fe 01       	movw	r30, r28
    2cda:	eb 5a       	subi	r30, 0xAB	; 171
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
	/*		UART_sendByte(OPEN_DOOR);
			_delay_ms(100);
			while(UART_recieveByte() != MC2_READY){};*/


			enterPassword();
    2ce2:	0e 94 0d 10 	call	0x201a	; 0x201a <enterPassword>

			savePass();
    2ce6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <savePass>

			for(counter = 0 ; counter<3;counter++){
    2cea:	10 92 6d 01 	sts	0x016D, r1
    2cee:	3f c3       	rjmp	.+1662   	; 0x336e <openDoor+0x990>
				if(UART_recieveByte() == NOT_EQUAL){
    2cf0:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    2cf4:	83 31       	cpi	r24, 0x13	; 19
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <openDoor+0x31c>
    2cf8:	51 c1       	rjmp	.+674    	; 0x2f9c <openDoor+0x5be>
					LCD_clearScreen();
    2cfa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"WRONG PASS");
    2cfe:	2d ee       	ldi	r18, 0xED	; 237
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	a9 01       	movw	r20, r18
    2d08:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ef 5a       	subi	r30, 0xAF	; 175
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	aa e7       	ldi	r26, 0x7A	; 122
    2d18:	b4 e4       	ldi	r27, 0x44	; 68
    2d1a:	80 83       	st	Z, r24
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	a2 83       	std	Z+2, r26	; 0x02
    2d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d22:	8e 01       	movw	r16, r28
    2d24:	03 5b       	subi	r16, 0xB3	; 179
    2d26:	1f 4f       	sbci	r17, 0xFF	; 255
    2d28:	fe 01       	movw	r30, r28
    2d2a:	ef 5a       	subi	r30, 0xAF	; 175
    2d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2e:	60 81       	ld	r22, Z
    2d30:	71 81       	ldd	r23, Z+1	; 0x01
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a ef       	ldi	r20, 0xFA	; 250
    2d3c:	54 e4       	ldi	r21, 0x44	; 68
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	f8 01       	movw	r30, r16
    2d48:	80 83       	st	Z, r24
    2d4a:	91 83       	std	Z+1, r25	; 0x01
    2d4c:	a2 83       	std	Z+2, r26	; 0x02
    2d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d50:	fe 01       	movw	r30, r28
    2d52:	e3 5b       	subi	r30, 0xB3	; 179
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d6a:	88 23       	and	r24, r24
    2d6c:	44 f4       	brge	.+16     	; 0x2d7e <openDoor+0x3a0>
		__ticks = 1;
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5b       	subi	r30, 0xB5	; 181
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	91 83       	std	Z+1, r25	; 0x01
    2d7a:	80 83       	st	Z, r24
    2d7c:	64 c0       	rjmp	.+200    	; 0x2e46 <openDoor+0x468>
	else if (__tmp > 65535)
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e3 5b       	subi	r30, 0xB3	; 179
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <openDoor+0x3c0>
    2d9c:	43 c0       	rjmp	.+134    	; 0x2e24 <openDoor+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9e:	fe 01       	movw	r30, r28
    2da0:	ef 5a       	subi	r30, 0xAF	; 175
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	60 81       	ld	r22, Z
    2da6:	71 81       	ldd	r23, Z+1	; 0x01
    2da8:	82 81       	ldd	r24, Z+2	; 0x02
    2daa:	93 81       	ldd	r25, Z+3	; 0x03
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e2       	ldi	r20, 0x20	; 32
    2db2:	51 e4       	ldi	r21, 0x41	; 65
    2db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	8e 01       	movw	r16, r28
    2dbe:	05 5b       	subi	r16, 0xB5	; 181
    2dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	f8 01       	movw	r30, r16
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	1f c0       	rjmp	.+62     	; 0x2e14 <openDoor+0x436>
    2dd6:	fe 01       	movw	r30, r28
    2dd8:	e7 5b       	subi	r30, 0xB7	; 183
    2dda:	ff 4f       	sbci	r31, 0xFF	; 255
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	80 83       	st	Z, r24
    2de4:	fe 01       	movw	r30, r28
    2de6:	e7 5b       	subi	r30, 0xB7	; 183
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <openDoor+0x410>
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 5b       	subi	r30, 0xB7	; 183
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	91 83       	std	Z+1, r25	; 0x01
    2dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	de 01       	movw	r26, r28
    2dfe:	a5 5b       	subi	r26, 0xB5	; 181
    2e00:	bf 4f       	sbci	r27, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	e5 5b       	subi	r30, 0xB5	; 181
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	80 81       	ld	r24, Z
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	01 97       	sbiw	r24, 0x01	; 1
    2e0e:	11 96       	adiw	r26, 0x01	; 1
    2e10:	9c 93       	st	X, r25
    2e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	fe 01       	movw	r30, r28
    2e16:	e5 5b       	subi	r30, 0xB5	; 181
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	80 81       	ld	r24, Z
    2e1c:	91 81       	ldd	r25, Z+1	; 0x01
    2e1e:	00 97       	sbiw	r24, 0x00	; 0
    2e20:	d1 f6       	brne	.-76     	; 0x2dd6 <openDoor+0x3f8>
    2e22:	28 c0       	rjmp	.+80     	; 0x2e74 <openDoor+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e24:	8e 01       	movw	r16, r28
    2e26:	05 5b       	subi	r16, 0xB5	; 181
    2e28:	1f 4f       	sbci	r17, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e3 5b       	subi	r30, 0xB3	; 179
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	f8 01       	movw	r30, r16
    2e42:	91 83       	std	Z+1, r25	; 0x01
    2e44:	80 83       	st	Z, r24
    2e46:	de 01       	movw	r26, r28
    2e48:	a9 5b       	subi	r26, 0xB9	; 185
    2e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e4c:	fe 01       	movw	r30, r28
    2e4e:	e5 5b       	subi	r30, 0xB5	; 181
    2e50:	ff 4f       	sbci	r31, 0xFF	; 255
    2e52:	80 81       	ld	r24, Z
    2e54:	91 81       	ldd	r25, Z+1	; 0x01
    2e56:	11 96       	adiw	r26, 0x01	; 1
    2e58:	9c 93       	st	X, r25
    2e5a:	8e 93       	st	-X, r24
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e9 5b       	subi	r30, 0xB9	; 185
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 81       	ld	r24, Z
    2e64:	91 81       	ldd	r25, Z+1	; 0x01
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <openDoor+0x488>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	e9 5b       	subi	r30, 0xB9	; 185
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
					_delay_ms(1000);
					if(counter < 2){
    2e74:	80 91 6d 01 	lds	r24, 0x016D
    2e78:	82 30       	cpi	r24, 0x02	; 2
    2e7a:	50 f4       	brcc	.+20     	; 0x2e90 <openDoor+0x4b2>
						enterPassword();
    2e7c:	0e 94 0d 10 	call	0x201a	; 0x201a <enterPassword>
						savePass();
    2e80:	0e 94 6e 12 	call	0x24dc	; 0x24dc <savePass>

			enterPassword();

			savePass();

			for(counter = 0 ; counter<3;counter++){
    2e84:	80 91 6d 01 	lds	r24, 0x016D
    2e88:	8f 5f       	subi	r24, 0xFF	; 255
    2e8a:	80 93 6d 01 	sts	0x016D, r24
    2e8e:	6f c2       	rjmp	.+1246   	; 0x336e <openDoor+0x990>
    2e90:	fe 01       	movw	r30, r28
    2e92:	ed 5b       	subi	r30, 0xBD	; 189
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	90 e4       	ldi	r25, 0x40	; 64
    2e9a:	ac e9       	ldi	r26, 0x9C	; 156
    2e9c:	b5 e4       	ldi	r27, 0x45	; 69
    2e9e:	80 83       	st	Z, r24
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	a2 83       	std	Z+2, r26	; 0x02
    2ea4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea6:	8e 01       	movw	r16, r28
    2ea8:	01 5c       	subi	r16, 0xC1	; 193
    2eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    2eac:	fe 01       	movw	r30, r28
    2eae:	ed 5b       	subi	r30, 0xBD	; 189
    2eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb2:	60 81       	ld	r22, Z
    2eb4:	71 81       	ldd	r23, Z+1	; 0x01
    2eb6:	82 81       	ldd	r24, Z+2	; 0x02
    2eb8:	93 81       	ldd	r25, Z+3	; 0x03
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	4a ef       	ldi	r20, 0xFA	; 250
    2ec0:	54 e4       	ldi	r21, 0x44	; 68
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	f8 01       	movw	r30, r16
    2ecc:	80 83       	st	Z, r24
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	a2 83       	std	Z+2, r26	; 0x02
    2ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ff 96       	adiw	r30, 0x3f	; 63
    2ed8:	60 81       	ld	r22, Z
    2eda:	71 81       	ldd	r23, Z+1	; 0x01
    2edc:	82 81       	ldd	r24, Z+2	; 0x02
    2ede:	93 81       	ldd	r25, Z+3	; 0x03
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e8       	ldi	r20, 0x80	; 128
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eec:	88 23       	and	r24, r24
    2eee:	2c f4       	brge	.+10     	; 0x2efa <openDoor+0x51c>
		__ticks = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9e af       	std	Y+62, r25	; 0x3e
    2ef6:	8d af       	std	Y+61, r24	; 0x3d
    2ef8:	46 c0       	rjmp	.+140    	; 0x2f86 <openDoor+0x5a8>
	else if (__tmp > 65535)
    2efa:	fe 01       	movw	r30, r28
    2efc:	ff 96       	adiw	r30, 0x3f	; 63
    2efe:	60 81       	ld	r22, Z
    2f00:	71 81       	ldd	r23, Z+1	; 0x01
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	93 81       	ldd	r25, Z+3	; 0x03
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	3f ef       	ldi	r19, 0xFF	; 255
    2f0a:	4f e7       	ldi	r20, 0x7F	; 127
    2f0c:	57 e4       	ldi	r21, 0x47	; 71
    2f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f12:	18 16       	cp	r1, r24
    2f14:	64 f5       	brge	.+88     	; 0x2f6e <openDoor+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f16:	fe 01       	movw	r30, r28
    2f18:	ed 5b       	subi	r30, 0xBD	; 189
    2f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	40 e2       	ldi	r20, 0x20	; 32
    2f2a:	51 e4       	ldi	r21, 0x41	; 65
    2f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9e af       	std	Y+62, r25	; 0x3e
    2f42:	8d af       	std	Y+61, r24	; 0x3d
    2f44:	0f c0       	rjmp	.+30     	; 0x2f64 <openDoor+0x586>
    2f46:	88 ec       	ldi	r24, 0xC8	; 200
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	9c af       	std	Y+60, r25	; 0x3c
    2f4c:	8b af       	std	Y+59, r24	; 0x3b
    2f4e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f50:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	f1 f7       	brne	.-4      	; 0x2f52 <openDoor+0x574>
    2f56:	9c af       	std	Y+60, r25	; 0x3c
    2f58:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f5e:	01 97       	sbiw	r24, 0x01	; 1
    2f60:	9e af       	std	Y+62, r25	; 0x3e
    2f62:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f66:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f68:	00 97       	sbiw	r24, 0x00	; 0
    2f6a:	69 f7       	brne	.-38     	; 0x2f46 <openDoor+0x568>
    2f6c:	05 c2       	rjmp	.+1034   	; 0x3378 <openDoor+0x99a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f6e:	fe 01       	movw	r30, r28
    2f70:	ff 96       	adiw	r30, 0x3f	; 63
    2f72:	60 81       	ld	r22, Z
    2f74:	71 81       	ldd	r23, Z+1	; 0x01
    2f76:	82 81       	ldd	r24, Z+2	; 0x02
    2f78:	93 81       	ldd	r25, Z+3	; 0x03
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	9e af       	std	Y+62, r25	; 0x3e
    2f84:	8d af       	std	Y+61, r24	; 0x3d
    2f86:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f88:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f8a:	9a af       	std	Y+58, r25	; 0x3a
    2f8c:	89 af       	std	Y+57, r24	; 0x39
    2f8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f90:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <openDoor+0x5b4>
    2f96:	9a af       	std	Y+58, r25	; 0x3a
    2f98:	89 af       	std	Y+57, r24	; 0x39
    2f9a:	ee c1       	rjmp	.+988    	; 0x3378 <openDoor+0x99a>
						break;
					}

				}
				else{
					LCD_clearScreen();
    2f9c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Password Correct:");
    2fa0:	28 ef       	ldi	r18, 0xF8	; 248
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	a9 01       	movw	r20, r18
    2faa:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(2,0,"DOOR OPENING");
    2fae:	2a e0       	ldi	r18, 0x0A	; 10
    2fb0:	31 e0       	ldi	r19, 0x01	; 1
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	a9 01       	movw	r20, r18
    2fb8:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e4       	ldi	r25, 0x40	; 64
    2fc0:	ac e1       	ldi	r26, 0x1C	; 28
    2fc2:	b6 e4       	ldi	r27, 0x46	; 70
    2fc4:	8d ab       	std	Y+53, r24	; 0x35
    2fc6:	9e ab       	std	Y+54, r25	; 0x36
    2fc8:	af ab       	std	Y+55, r26	; 0x37
    2fca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fcc:	6d a9       	ldd	r22, Y+53	; 0x35
    2fce:	7e a9       	ldd	r23, Y+54	; 0x36
    2fd0:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd2:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a ef       	ldi	r20, 0xFA	; 250
    2fda:	54 e4       	ldi	r21, 0x44	; 68
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	89 ab       	std	Y+49, r24	; 0x31
    2fe6:	9a ab       	std	Y+50, r25	; 0x32
    2fe8:	ab ab       	std	Y+51, r26	; 0x33
    2fea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fec:	69 a9       	ldd	r22, Y+49	; 0x31
    2fee:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	2c f4       	brge	.+10     	; 0x300e <openDoor+0x630>
		__ticks = 1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	98 ab       	std	Y+48, r25	; 0x30
    300a:	8f a7       	std	Y+47, r24	; 0x2f
    300c:	3f c0       	rjmp	.+126    	; 0x308c <openDoor+0x6ae>
	else if (__tmp > 65535)
    300e:	69 a9       	ldd	r22, Y+49	; 0x31
    3010:	7a a9       	ldd	r23, Y+50	; 0x32
    3012:	8b a9       	ldd	r24, Y+51	; 0x33
    3014:	9c a9       	ldd	r25, Y+52	; 0x34
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	3f ef       	ldi	r19, 0xFF	; 255
    301a:	4f e7       	ldi	r20, 0x7F	; 127
    301c:	57 e4       	ldi	r21, 0x47	; 71
    301e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3022:	18 16       	cp	r1, r24
    3024:	4c f5       	brge	.+82     	; 0x3078 <openDoor+0x69a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3026:	6d a9       	ldd	r22, Y+53	; 0x35
    3028:	7e a9       	ldd	r23, Y+54	; 0x36
    302a:	8f a9       	ldd	r24, Y+55	; 0x37
    302c:	98 ad       	ldd	r25, Y+56	; 0x38
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e2       	ldi	r20, 0x20	; 32
    3034:	51 e4       	ldi	r21, 0x41	; 65
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	98 ab       	std	Y+48, r25	; 0x30
    304c:	8f a7       	std	Y+47, r24	; 0x2f
    304e:	0f c0       	rjmp	.+30     	; 0x306e <openDoor+0x690>
    3050:	88 ec       	ldi	r24, 0xC8	; 200
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9e a7       	std	Y+46, r25	; 0x2e
    3056:	8d a7       	std	Y+45, r24	; 0x2d
    3058:	8d a5       	ldd	r24, Y+45	; 0x2d
    305a:	9e a5       	ldd	r25, Y+46	; 0x2e
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <openDoor+0x67e>
    3060:	9e a7       	std	Y+46, r25	; 0x2e
    3062:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3064:	8f a5       	ldd	r24, Y+47	; 0x2f
    3066:	98 a9       	ldd	r25, Y+48	; 0x30
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	98 ab       	std	Y+48, r25	; 0x30
    306c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3070:	98 a9       	ldd	r25, Y+48	; 0x30
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	69 f7       	brne	.-38     	; 0x3050 <openDoor+0x672>
    3076:	14 c0       	rjmp	.+40     	; 0x30a0 <openDoor+0x6c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3078:	69 a9       	ldd	r22, Y+49	; 0x31
    307a:	7a a9       	ldd	r23, Y+50	; 0x32
    307c:	8b a9       	ldd	r24, Y+51	; 0x33
    307e:	9c a9       	ldd	r25, Y+52	; 0x34
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	98 ab       	std	Y+48, r25	; 0x30
    308a:	8f a7       	std	Y+47, r24	; 0x2f
    308c:	8f a5       	ldd	r24, Y+47	; 0x2f
    308e:	98 a9       	ldd	r25, Y+48	; 0x30
    3090:	9c a7       	std	Y+44, r25	; 0x2c
    3092:	8b a7       	std	Y+43, r24	; 0x2b
    3094:	8b a5       	ldd	r24, Y+43	; 0x2b
    3096:	9c a5       	ldd	r25, Y+44	; 0x2c
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <openDoor+0x6ba>
    309c:	9c a7       	std	Y+44, r25	; 0x2c
    309e:	8b a7       	std	Y+43, r24	; 0x2b
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	a8 ec       	ldi	r26, 0xC8	; 200
    30a6:	b2 e4       	ldi	r27, 0x42	; 66
    30a8:	8f a3       	std	Y+39, r24	; 0x27
    30aa:	98 a7       	std	Y+40, r25	; 0x28
    30ac:	a9 a7       	std	Y+41, r26	; 0x29
    30ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b0:	6f a1       	ldd	r22, Y+39	; 0x27
    30b2:	78 a5       	ldd	r23, Y+40	; 0x28
    30b4:	89 a5       	ldd	r24, Y+41	; 0x29
    30b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	4a ef       	ldi	r20, 0xFA	; 250
    30be:	54 e4       	ldi	r21, 0x44	; 68
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	8b a3       	std	Y+35, r24	; 0x23
    30ca:	9c a3       	std	Y+36, r25	; 0x24
    30cc:	ad a3       	std	Y+37, r26	; 0x25
    30ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30d0:	6b a1       	ldd	r22, Y+35	; 0x23
    30d2:	7c a1       	ldd	r23, Y+36	; 0x24
    30d4:	8d a1       	ldd	r24, Y+37	; 0x25
    30d6:	9e a1       	ldd	r25, Y+38	; 0x26
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e8       	ldi	r20, 0x80	; 128
    30de:	5f e3       	ldi	r21, 0x3F	; 63
    30e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30e4:	88 23       	and	r24, r24
    30e6:	2c f4       	brge	.+10     	; 0x30f2 <openDoor+0x714>
		__ticks = 1;
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	9a a3       	std	Y+34, r25	; 0x22
    30ee:	89 a3       	std	Y+33, r24	; 0x21
    30f0:	3f c0       	rjmp	.+126    	; 0x3170 <openDoor+0x792>
	else if (__tmp > 65535)
    30f2:	6b a1       	ldd	r22, Y+35	; 0x23
    30f4:	7c a1       	ldd	r23, Y+36	; 0x24
    30f6:	8d a1       	ldd	r24, Y+37	; 0x25
    30f8:	9e a1       	ldd	r25, Y+38	; 0x26
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	3f ef       	ldi	r19, 0xFF	; 255
    30fe:	4f e7       	ldi	r20, 0x7F	; 127
    3100:	57 e4       	ldi	r21, 0x47	; 71
    3102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3106:	18 16       	cp	r1, r24
    3108:	4c f5       	brge	.+82     	; 0x315c <openDoor+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    310a:	6f a1       	ldd	r22, Y+39	; 0x27
    310c:	78 a5       	ldd	r23, Y+40	; 0x28
    310e:	89 a5       	ldd	r24, Y+41	; 0x29
    3110:	9a a5       	ldd	r25, Y+42	; 0x2a
    3112:	20 e0       	ldi	r18, 0x00	; 0
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	40 e2       	ldi	r20, 0x20	; 32
    3118:	51 e4       	ldi	r21, 0x41	; 65
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	bc 01       	movw	r22, r24
    3124:	cd 01       	movw	r24, r26
    3126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312a:	dc 01       	movw	r26, r24
    312c:	cb 01       	movw	r24, r22
    312e:	9a a3       	std	Y+34, r25	; 0x22
    3130:	89 a3       	std	Y+33, r24	; 0x21
    3132:	0f c0       	rjmp	.+30     	; 0x3152 <openDoor+0x774>
    3134:	88 ec       	ldi	r24, 0xC8	; 200
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	98 a3       	std	Y+32, r25	; 0x20
    313a:	8f 8f       	std	Y+31, r24	; 0x1f
    313c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    313e:	98 a1       	ldd	r25, Y+32	; 0x20
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <openDoor+0x762>
    3144:	98 a3       	std	Y+32, r25	; 0x20
    3146:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3148:	89 a1       	ldd	r24, Y+33	; 0x21
    314a:	9a a1       	ldd	r25, Y+34	; 0x22
    314c:	01 97       	sbiw	r24, 0x01	; 1
    314e:	9a a3       	std	Y+34, r25	; 0x22
    3150:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3152:	89 a1       	ldd	r24, Y+33	; 0x21
    3154:	9a a1       	ldd	r25, Y+34	; 0x22
    3156:	00 97       	sbiw	r24, 0x00	; 0
    3158:	69 f7       	brne	.-38     	; 0x3134 <openDoor+0x756>
    315a:	14 c0       	rjmp	.+40     	; 0x3184 <openDoor+0x7a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    315c:	6b a1       	ldd	r22, Y+35	; 0x23
    315e:	7c a1       	ldd	r23, Y+36	; 0x24
    3160:	8d a1       	ldd	r24, Y+37	; 0x25
    3162:	9e a1       	ldd	r25, Y+38	; 0x26
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9a a3       	std	Y+34, r25	; 0x22
    316e:	89 a3       	std	Y+33, r24	; 0x21
    3170:	89 a1       	ldd	r24, Y+33	; 0x21
    3172:	9a a1       	ldd	r25, Y+34	; 0x22
    3174:	9e 8f       	std	Y+30, r25	; 0x1e
    3176:	8d 8f       	std	Y+29, r24	; 0x1d
    3178:	8d 8d       	ldd	r24, Y+29	; 0x1d
    317a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <openDoor+0x79e>
    3180:	9e 8f       	std	Y+30, r25	; 0x1e
    3182:	8d 8f       	std	Y+29, r24	; 0x1d
		/*			while(tick<=700){
						LCD_moveCursor(1, 0);
						LCD_intgerToString(tick);
					}*/
					_delay_ms(100);
					LCD_displayStringRowColumn(2,0,"DOOR CLOSING");
    3184:	27 e1       	ldi	r18, 0x17	; 23
    3186:	31 e0       	ldi	r19, 0x01	; 1
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	a9 01       	movw	r20, r18
    318e:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e4       	ldi	r25, 0x40	; 64
    3196:	ac e1       	ldi	r26, 0x1C	; 28
    3198:	b6 e4       	ldi	r27, 0x46	; 70
    319a:	89 8f       	std	Y+25, r24	; 0x19
    319c:	9a 8f       	std	Y+26, r25	; 0x1a
    319e:	ab 8f       	std	Y+27, r26	; 0x1b
    31a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a2:	69 8d       	ldd	r22, Y+25	; 0x19
    31a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	4a ef       	ldi	r20, 0xFA	; 250
    31b0:	54 e4       	ldi	r21, 0x44	; 68
    31b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8d 8b       	std	Y+21, r24	; 0x15
    31bc:	9e 8b       	std	Y+22, r25	; 0x16
    31be:	af 8b       	std	Y+23, r26	; 0x17
    31c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c2:	6d 89       	ldd	r22, Y+21	; 0x15
    31c4:	7e 89       	ldd	r23, Y+22	; 0x16
    31c6:	8f 89       	ldd	r24, Y+23	; 0x17
    31c8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e8       	ldi	r20, 0x80	; 128
    31d0:	5f e3       	ldi	r21, 0x3F	; 63
    31d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31d6:	88 23       	and	r24, r24
    31d8:	2c f4       	brge	.+10     	; 0x31e4 <openDoor+0x806>
		__ticks = 1;
    31da:	81 e0       	ldi	r24, 0x01	; 1
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	9c 8b       	std	Y+20, r25	; 0x14
    31e0:	8b 8b       	std	Y+19, r24	; 0x13
    31e2:	3f c0       	rjmp	.+126    	; 0x3262 <openDoor+0x884>
	else if (__tmp > 65535)
    31e4:	6d 89       	ldd	r22, Y+21	; 0x15
    31e6:	7e 89       	ldd	r23, Y+22	; 0x16
    31e8:	8f 89       	ldd	r24, Y+23	; 0x17
    31ea:	98 8d       	ldd	r25, Y+24	; 0x18
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	4f e7       	ldi	r20, 0x7F	; 127
    31f2:	57 e4       	ldi	r21, 0x47	; 71
    31f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31f8:	18 16       	cp	r1, r24
    31fa:	4c f5       	brge	.+82     	; 0x324e <openDoor+0x870>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fc:	69 8d       	ldd	r22, Y+25	; 0x19
    31fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e2       	ldi	r20, 0x20	; 32
    320a:	51 e4       	ldi	r21, 0x41	; 65
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	bc 01       	movw	r22, r24
    3216:	cd 01       	movw	r24, r26
    3218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321c:	dc 01       	movw	r26, r24
    321e:	cb 01       	movw	r24, r22
    3220:	9c 8b       	std	Y+20, r25	; 0x14
    3222:	8b 8b       	std	Y+19, r24	; 0x13
    3224:	0f c0       	rjmp	.+30     	; 0x3244 <openDoor+0x866>
    3226:	88 ec       	ldi	r24, 0xC8	; 200
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9a 8b       	std	Y+18, r25	; 0x12
    322c:	89 8b       	std	Y+17, r24	; 0x11
    322e:	89 89       	ldd	r24, Y+17	; 0x11
    3230:	9a 89       	ldd	r25, Y+18	; 0x12
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	f1 f7       	brne	.-4      	; 0x3232 <openDoor+0x854>
    3236:	9a 8b       	std	Y+18, r25	; 0x12
    3238:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323a:	8b 89       	ldd	r24, Y+19	; 0x13
    323c:	9c 89       	ldd	r25, Y+20	; 0x14
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	00 97       	sbiw	r24, 0x00	; 0
    324a:	69 f7       	brne	.-38     	; 0x3226 <openDoor+0x848>
    324c:	14 c0       	rjmp	.+40     	; 0x3276 <openDoor+0x898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324e:	6d 89       	ldd	r22, Y+21	; 0x15
    3250:	7e 89       	ldd	r23, Y+22	; 0x16
    3252:	8f 89       	ldd	r24, Y+23	; 0x17
    3254:	98 8d       	ldd	r25, Y+24	; 0x18
    3256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325a:	dc 01       	movw	r26, r24
    325c:	cb 01       	movw	r24, r22
    325e:	9c 8b       	std	Y+20, r25	; 0x14
    3260:	8b 8b       	std	Y+19, r24	; 0x13
    3262:	8b 89       	ldd	r24, Y+19	; 0x13
    3264:	9c 89       	ldd	r25, Y+20	; 0x14
    3266:	98 8b       	std	Y+16, r25	; 0x10
    3268:	8f 87       	std	Y+15, r24	; 0x0f
    326a:	8f 85       	ldd	r24, Y+15	; 0x0f
    326c:	98 89       	ldd	r25, Y+16	; 0x10
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <openDoor+0x890>
    3272:	98 8b       	std	Y+16, r25	; 0x10
    3274:	8f 87       	std	Y+15, r24	; 0x0f
					/*			while(tick<=700){
											LCD_moveCursor(1, 0);
											LCD_intgerToString(tick);
										}*/
					_delay_ms(10000);
					LCD_clearScreen();
    3276:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
					LCD_displayStringRowColumn(1,0,"DOOR CLOSED");
    327a:	24 e2       	ldi	r18, 0x24	; 36
    327c:	31 e0       	ldi	r19, 0x01	; 1
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	60 e0       	ldi	r22, 0x00	; 0
    3282:	a9 01       	movw	r20, r18
    3284:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	aa e7       	ldi	r26, 0x7A	; 122
    328e:	b4 e4       	ldi	r27, 0x44	; 68
    3290:	8b 87       	std	Y+11, r24	; 0x0b
    3292:	9c 87       	std	Y+12, r25	; 0x0c
    3294:	ad 87       	std	Y+13, r26	; 0x0d
    3296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3298:	6b 85       	ldd	r22, Y+11	; 0x0b
    329a:	7c 85       	ldd	r23, Y+12	; 0x0c
    329c:	8d 85       	ldd	r24, Y+13	; 0x0d
    329e:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	4a ef       	ldi	r20, 0xFA	; 250
    32a6:	54 e4       	ldi	r21, 0x44	; 68
    32a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	8f 83       	std	Y+7, r24	; 0x07
    32b2:	98 87       	std	Y+8, r25	; 0x08
    32b4:	a9 87       	std	Y+9, r26	; 0x09
    32b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32b8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ba:	78 85       	ldd	r23, Y+8	; 0x08
    32bc:	89 85       	ldd	r24, Y+9	; 0x09
    32be:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c0:	20 e0       	ldi	r18, 0x00	; 0
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	40 e8       	ldi	r20, 0x80	; 128
    32c6:	5f e3       	ldi	r21, 0x3F	; 63
    32c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32cc:	88 23       	and	r24, r24
    32ce:	2c f4       	brge	.+10     	; 0x32da <openDoor+0x8fc>
		__ticks = 1;
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	3f c0       	rjmp	.+126    	; 0x3358 <openDoor+0x97a>
	else if (__tmp > 65535)
    32da:	6f 81       	ldd	r22, Y+7	; 0x07
    32dc:	78 85       	ldd	r23, Y+8	; 0x08
    32de:	89 85       	ldd	r24, Y+9	; 0x09
    32e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	3f ef       	ldi	r19, 0xFF	; 255
    32e6:	4f e7       	ldi	r20, 0x7F	; 127
    32e8:	57 e4       	ldi	r21, 0x47	; 71
    32ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ee:	18 16       	cp	r1, r24
    32f0:	4c f5       	brge	.+82     	; 0x3344 <openDoor+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    32f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    32f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    32f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	40 e2       	ldi	r20, 0x20	; 32
    3300:	51 e4       	ldi	r21, 0x41	; 65
    3302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	9e 83       	std	Y+6, r25	; 0x06
    3318:	8d 83       	std	Y+5, r24	; 0x05
    331a:	0f c0       	rjmp	.+30     	; 0x333a <openDoor+0x95c>
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	9c 83       	std	Y+4, r25	; 0x04
    3322:	8b 83       	std	Y+3, r24	; 0x03
    3324:	8b 81       	ldd	r24, Y+3	; 0x03
    3326:	9c 81       	ldd	r25, Y+4	; 0x04
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	f1 f7       	brne	.-4      	; 0x3328 <openDoor+0x94a>
    332c:	9c 83       	std	Y+4, r25	; 0x04
    332e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3330:	8d 81       	ldd	r24, Y+5	; 0x05
    3332:	9e 81       	ldd	r25, Y+6	; 0x06
    3334:	01 97       	sbiw	r24, 0x01	; 1
    3336:	9e 83       	std	Y+6, r25	; 0x06
    3338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    333a:	8d 81       	ldd	r24, Y+5	; 0x05
    333c:	9e 81       	ldd	r25, Y+6	; 0x06
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	69 f7       	brne	.-38     	; 0x331c <openDoor+0x93e>
    3342:	1a c0       	rjmp	.+52     	; 0x3378 <openDoor+0x99a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3344:	6f 81       	ldd	r22, Y+7	; 0x07
    3346:	78 85       	ldd	r23, Y+8	; 0x08
    3348:	89 85       	ldd	r24, Y+9	; 0x09
    334a:	9a 85       	ldd	r25, Y+10	; 0x0a
    334c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	9e 83       	std	Y+6, r25	; 0x06
    3356:	8d 83       	std	Y+5, r24	; 0x05
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	9e 81       	ldd	r25, Y+6	; 0x06
    335c:	9a 83       	std	Y+2, r25	; 0x02
    335e:	89 83       	std	Y+1, r24	; 0x01
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	9a 81       	ldd	r25, Y+2	; 0x02
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	f1 f7       	brne	.-4      	; 0x3364 <openDoor+0x986>
    3368:	9a 83       	std	Y+2, r25	; 0x02
    336a:	89 83       	std	Y+1, r24	; 0x01
    336c:	05 c0       	rjmp	.+10     	; 0x3378 <openDoor+0x99a>

			enterPassword();

			savePass();

			for(counter = 0 ; counter<3;counter++){
    336e:	80 91 6d 01 	lds	r24, 0x016D
    3372:	83 30       	cpi	r24, 0x03	; 3
    3374:	08 f4       	brcc	.+2      	; 0x3378 <openDoor+0x99a>
    3376:	bc cc       	rjmp	.-1672   	; 0x2cf0 <openDoor+0x312>
					LCD_displayStringRowColumn(1,0,"DOOR CLOSED");
					_delay_ms(1000);
					break;
				}
			}
}
    3378:	c0 59       	subi	r28, 0x90	; 144
    337a:	df 4f       	sbci	r29, 0xFF	; 255
    337c:	0f b6       	in	r0, 0x3f	; 63
    337e:	f8 94       	cli
    3380:	de bf       	out	0x3e, r29	; 62
    3382:	0f be       	out	0x3f, r0	; 63
    3384:	cd bf       	out	0x3d, r28	; 61
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	08 95       	ret

00003390 <changePass>:
void changePass(void){
    3390:	0f 93       	push	r16
    3392:	1f 93       	push	r17
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	c6 54       	subi	r28, 0x46	; 70
    339e:	d0 40       	sbci	r29, 0x00	; 0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	f8 94       	cli
    33a4:	de bf       	out	0x3e, r29	; 62
    33a6:	0f be       	out	0x3f, r0	; 63
    33a8:	cd bf       	out	0x3d, r28	; 61
	LCD_intgerToString(key);
    33aa:	80 91 6e 01 	lds	r24, 0x016E
    33ae:	88 2f       	mov	r24, r24
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <LCD_intgerToString>
    33b6:	fe 01       	movw	r30, r28
    33b8:	ed 5b       	subi	r30, 0xBD	; 189
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	aa ef       	ldi	r26, 0xFA	; 250
    33c2:	b3 e4       	ldi	r27, 0x43	; 67
    33c4:	80 83       	st	Z, r24
    33c6:	91 83       	std	Z+1, r25	; 0x01
    33c8:	a2 83       	std	Z+2, r26	; 0x02
    33ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	8e 01       	movw	r16, r28
    33ce:	01 5c       	subi	r16, 0xC1	; 193
    33d0:	1f 4f       	sbci	r17, 0xFF	; 255
    33d2:	fe 01       	movw	r30, r28
    33d4:	ed 5b       	subi	r30, 0xBD	; 189
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	60 81       	ld	r22, Z
    33da:	71 81       	ldd	r23, Z+1	; 0x01
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	4a ef       	ldi	r20, 0xFA	; 250
    33e6:	54 e4       	ldi	r21, 0x44	; 68
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	f8 01       	movw	r30, r16
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    33fa:	fe 01       	movw	r30, r28
    33fc:	ff 96       	adiw	r30, 0x3f	; 63
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	40 e8       	ldi	r20, 0x80	; 128
    340c:	5f e3       	ldi	r21, 0x3F	; 63
    340e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3412:	88 23       	and	r24, r24
    3414:	2c f4       	brge	.+10     	; 0x3420 <changePass+0x90>
		__ticks = 1;
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	9e af       	std	Y+62, r25	; 0x3e
    341c:	8d af       	std	Y+61, r24	; 0x3d
    341e:	46 c0       	rjmp	.+140    	; 0x34ac <changePass+0x11c>
	else if (__tmp > 65535)
    3420:	fe 01       	movw	r30, r28
    3422:	ff 96       	adiw	r30, 0x3f	; 63
    3424:	60 81       	ld	r22, Z
    3426:	71 81       	ldd	r23, Z+1	; 0x01
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	3f ef       	ldi	r19, 0xFF	; 255
    3430:	4f e7       	ldi	r20, 0x7F	; 127
    3432:	57 e4       	ldi	r21, 0x47	; 71
    3434:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3438:	18 16       	cp	r1, r24
    343a:	64 f5       	brge	.+88     	; 0x3494 <changePass+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343c:	fe 01       	movw	r30, r28
    343e:	ed 5b       	subi	r30, 0xBD	; 189
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	60 81       	ld	r22, Z
    3444:	71 81       	ldd	r23, Z+1	; 0x01
    3446:	82 81       	ldd	r24, Z+2	; 0x02
    3448:	93 81       	ldd	r25, Z+3	; 0x03
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	40 e2       	ldi	r20, 0x20	; 32
    3450:	51 e4       	ldi	r21, 0x41	; 65
    3452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	9e af       	std	Y+62, r25	; 0x3e
    3468:	8d af       	std	Y+61, r24	; 0x3d
    346a:	0f c0       	rjmp	.+30     	; 0x348a <changePass+0xfa>
    346c:	88 ec       	ldi	r24, 0xC8	; 200
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	9c af       	std	Y+60, r25	; 0x3c
    3472:	8b af       	std	Y+59, r24	; 0x3b
    3474:	8b ad       	ldd	r24, Y+59	; 0x3b
    3476:	9c ad       	ldd	r25, Y+60	; 0x3c
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <changePass+0xe8>
    347c:	9c af       	std	Y+60, r25	; 0x3c
    347e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3480:	8d ad       	ldd	r24, Y+61	; 0x3d
    3482:	9e ad       	ldd	r25, Y+62	; 0x3e
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	9e af       	std	Y+62, r25	; 0x3e
    3488:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348a:	8d ad       	ldd	r24, Y+61	; 0x3d
    348c:	9e ad       	ldd	r25, Y+62	; 0x3e
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	69 f7       	brne	.-38     	; 0x346c <changePass+0xdc>
    3492:	16 c0       	rjmp	.+44     	; 0x34c0 <changePass+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3494:	fe 01       	movw	r30, r28
    3496:	ff 96       	adiw	r30, 0x3f	; 63
    3498:	60 81       	ld	r22, Z
    349a:	71 81       	ldd	r23, Z+1	; 0x01
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	9e af       	std	Y+62, r25	; 0x3e
    34aa:	8d af       	std	Y+61, r24	; 0x3d
    34ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    34b0:	9a af       	std	Y+58, r25	; 0x3a
    34b2:	89 af       	std	Y+57, r24	; 0x39
    34b4:	89 ad       	ldd	r24, Y+57	; 0x39
    34b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    34b8:	01 97       	sbiw	r24, 0x01	; 1
    34ba:	f1 f7       	brne	.-4      	; 0x34b8 <changePass+0x128>
    34bc:	9a af       	std	Y+58, r25	; 0x3a
    34be:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(500);
	LCD_clearScreen();
    34c0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Change Password");
    34c4:	20 e3       	ldi	r18, 0x30	; 48
    34c6:	31 e0       	ldi	r19, 0x01	; 1
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	a9 01       	movw	r20, r18
    34ce:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	aa ef       	ldi	r26, 0xFA	; 250
    34d8:	b3 e4       	ldi	r27, 0x43	; 67
    34da:	8d ab       	std	Y+53, r24	; 0x35
    34dc:	9e ab       	std	Y+54, r25	; 0x36
    34de:	af ab       	std	Y+55, r26	; 0x37
    34e0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e2:	6d a9       	ldd	r22, Y+53	; 0x35
    34e4:	7e a9       	ldd	r23, Y+54	; 0x36
    34e6:	8f a9       	ldd	r24, Y+55	; 0x37
    34e8:	98 ad       	ldd	r25, Y+56	; 0x38
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	4a ef       	ldi	r20, 0xFA	; 250
    34f0:	54 e4       	ldi	r21, 0x44	; 68
    34f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f6:	dc 01       	movw	r26, r24
    34f8:	cb 01       	movw	r24, r22
    34fa:	89 ab       	std	Y+49, r24	; 0x31
    34fc:	9a ab       	std	Y+50, r25	; 0x32
    34fe:	ab ab       	std	Y+51, r26	; 0x33
    3500:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3502:	69 a9       	ldd	r22, Y+49	; 0x31
    3504:	7a a9       	ldd	r23, Y+50	; 0x32
    3506:	8b a9       	ldd	r24, Y+51	; 0x33
    3508:	9c a9       	ldd	r25, Y+52	; 0x34
    350a:	20 e0       	ldi	r18, 0x00	; 0
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	40 e8       	ldi	r20, 0x80	; 128
    3510:	5f e3       	ldi	r21, 0x3F	; 63
    3512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3516:	88 23       	and	r24, r24
    3518:	2c f4       	brge	.+10     	; 0x3524 <changePass+0x194>
		__ticks = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	98 ab       	std	Y+48, r25	; 0x30
    3520:	8f a7       	std	Y+47, r24	; 0x2f
    3522:	3f c0       	rjmp	.+126    	; 0x35a2 <changePass+0x212>
	else if (__tmp > 65535)
    3524:	69 a9       	ldd	r22, Y+49	; 0x31
    3526:	7a a9       	ldd	r23, Y+50	; 0x32
    3528:	8b a9       	ldd	r24, Y+51	; 0x33
    352a:	9c a9       	ldd	r25, Y+52	; 0x34
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	3f ef       	ldi	r19, 0xFF	; 255
    3530:	4f e7       	ldi	r20, 0x7F	; 127
    3532:	57 e4       	ldi	r21, 0x47	; 71
    3534:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3538:	18 16       	cp	r1, r24
    353a:	4c f5       	brge	.+82     	; 0x358e <changePass+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353c:	6d a9       	ldd	r22, Y+53	; 0x35
    353e:	7e a9       	ldd	r23, Y+54	; 0x36
    3540:	8f a9       	ldd	r24, Y+55	; 0x37
    3542:	98 ad       	ldd	r25, Y+56	; 0x38
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e2       	ldi	r20, 0x20	; 32
    354a:	51 e4       	ldi	r21, 0x41	; 65
    354c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3550:	dc 01       	movw	r26, r24
    3552:	cb 01       	movw	r24, r22
    3554:	bc 01       	movw	r22, r24
    3556:	cd 01       	movw	r24, r26
    3558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355c:	dc 01       	movw	r26, r24
    355e:	cb 01       	movw	r24, r22
    3560:	98 ab       	std	Y+48, r25	; 0x30
    3562:	8f a7       	std	Y+47, r24	; 0x2f
    3564:	0f c0       	rjmp	.+30     	; 0x3584 <changePass+0x1f4>
    3566:	88 ec       	ldi	r24, 0xC8	; 200
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	9e a7       	std	Y+46, r25	; 0x2e
    356c:	8d a7       	std	Y+45, r24	; 0x2d
    356e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3570:	9e a5       	ldd	r25, Y+46	; 0x2e
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	f1 f7       	brne	.-4      	; 0x3572 <changePass+0x1e2>
    3576:	9e a7       	std	Y+46, r25	; 0x2e
    3578:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357a:	8f a5       	ldd	r24, Y+47	; 0x2f
    357c:	98 a9       	ldd	r25, Y+48	; 0x30
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	98 ab       	std	Y+48, r25	; 0x30
    3582:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3584:	8f a5       	ldd	r24, Y+47	; 0x2f
    3586:	98 a9       	ldd	r25, Y+48	; 0x30
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	69 f7       	brne	.-38     	; 0x3566 <changePass+0x1d6>
    358c:	14 c0       	rjmp	.+40     	; 0x35b6 <changePass+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358e:	69 a9       	ldd	r22, Y+49	; 0x31
    3590:	7a a9       	ldd	r23, Y+50	; 0x32
    3592:	8b a9       	ldd	r24, Y+51	; 0x33
    3594:	9c a9       	ldd	r25, Y+52	; 0x34
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	98 ab       	std	Y+48, r25	; 0x30
    35a0:	8f a7       	std	Y+47, r24	; 0x2f
    35a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35a4:	98 a9       	ldd	r25, Y+48	; 0x30
    35a6:	9c a7       	std	Y+44, r25	; 0x2c
    35a8:	8b a7       	std	Y+43, r24	; 0x2b
    35aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    35ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <changePass+0x21e>
    35b2:	9c a7       	std	Y+44, r25	; 0x2c
    35b4:	8b a7       	std	Y+43, r24	; 0x2b

/*	UART_sendByte(CHANGE_PASS);
	_delay_ms(100);
	while(UART_recieveByte() != MC2_READY){};*/

	enterPassword();
    35b6:	0e 94 0d 10 	call	0x201a	; 0x201a <enterPassword>
	savePass();
    35ba:	0e 94 6e 12 	call	0x24dc	; 0x24dc <savePass>
	for(counter = 0 ; counter<3;counter++){
    35be:	10 92 6d 01 	sts	0x016D, r1
    35c2:	89 c1       	rjmp	.+786    	; 0x38d6 <changePass+0x546>
		if(UART_recieveByte() == NOT_EQUAL){
    35c4:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    35c8:	83 31       	cpi	r24, 0x13	; 19
    35ca:	09 f0       	breq	.+2      	; 0x35ce <changePass+0x23e>
    35cc:	ff c0       	rjmp	.+510    	; 0x37cc <changePass+0x43c>
			pass = NOT_CORRECT;
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	80 93 67 01 	sts	0x0167, r24
			LCD_clearScreen();
    35d4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"WRONG PASS");
    35d8:	2d ee       	ldi	r18, 0xED	; 237
    35da:	30 e0       	ldi	r19, 0x00	; 0
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	a9 01       	movw	r20, r18
    35e2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	aa e7       	ldi	r26, 0x7A	; 122
    35ec:	b4 e4       	ldi	r27, 0x44	; 68
    35ee:	8f a3       	std	Y+39, r24	; 0x27
    35f0:	98 a7       	std	Y+40, r25	; 0x28
    35f2:	a9 a7       	std	Y+41, r26	; 0x29
    35f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6f a1       	ldd	r22, Y+39	; 0x27
    35f8:	78 a5       	ldd	r23, Y+40	; 0x28
    35fa:	89 a5       	ldd	r24, Y+41	; 0x29
    35fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a ef       	ldi	r20, 0xFA	; 250
    3604:	54 e4       	ldi	r21, 0x44	; 68
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8b a3       	std	Y+35, r24	; 0x23
    3610:	9c a3       	std	Y+36, r25	; 0x24
    3612:	ad a3       	std	Y+37, r26	; 0x25
    3614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3616:	6b a1       	ldd	r22, Y+35	; 0x23
    3618:	7c a1       	ldd	r23, Y+36	; 0x24
    361a:	8d a1       	ldd	r24, Y+37	; 0x25
    361c:	9e a1       	ldd	r25, Y+38	; 0x26
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <changePass+0x2a8>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9a a3       	std	Y+34, r25	; 0x22
    3634:	89 a3       	std	Y+33, r24	; 0x21
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <changePass+0x326>
	else if (__tmp > 65535)
    3638:	6b a1       	ldd	r22, Y+35	; 0x23
    363a:	7c a1       	ldd	r23, Y+36	; 0x24
    363c:	8d a1       	ldd	r24, Y+37	; 0x25
    363e:	9e a1       	ldd	r25, Y+38	; 0x26
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <changePass+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6f a1       	ldd	r22, Y+39	; 0x27
    3652:	78 a5       	ldd	r23, Y+40	; 0x28
    3654:	89 a5       	ldd	r24, Y+41	; 0x29
    3656:	9a a5       	ldd	r25, Y+42	; 0x2a
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9a a3       	std	Y+34, r25	; 0x22
    3676:	89 a3       	std	Y+33, r24	; 0x21
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <changePass+0x308>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	98 a3       	std	Y+32, r25	; 0x20
    3680:	8f 8f       	std	Y+31, r24	; 0x1f
    3682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3684:	98 a1       	ldd	r25, Y+32	; 0x20
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <changePass+0x2f6>
    368a:	98 a3       	std	Y+32, r25	; 0x20
    368c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	89 a1       	ldd	r24, Y+33	; 0x21
    3690:	9a a1       	ldd	r25, Y+34	; 0x22
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9a a3       	std	Y+34, r25	; 0x22
    3696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	89 a1       	ldd	r24, Y+33	; 0x21
    369a:	9a a1       	ldd	r25, Y+34	; 0x22
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <changePass+0x2ea>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <changePass+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6b a1       	ldd	r22, Y+35	; 0x23
    36a4:	7c a1       	ldd	r23, Y+36	; 0x24
    36a6:	8d a1       	ldd	r24, Y+37	; 0x25
    36a8:	9e a1       	ldd	r25, Y+38	; 0x26
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9a a3       	std	Y+34, r25	; 0x22
    36b4:	89 a3       	std	Y+33, r24	; 0x21
    36b6:	89 a1       	ldd	r24, Y+33	; 0x21
    36b8:	9a a1       	ldd	r25, Y+34	; 0x22
    36ba:	9e 8f       	std	Y+30, r25	; 0x1e
    36bc:	8d 8f       	std	Y+29, r24	; 0x1d
    36be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <changePass+0x332>
    36c6:	9e 8f       	std	Y+30, r25	; 0x1e
    36c8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			if(counter < 2){
    36ca:	80 91 6d 01 	lds	r24, 0x016D
    36ce:	82 30       	cpi	r24, 0x02	; 2
    36d0:	50 f4       	brcc	.+20     	; 0x36e6 <changePass+0x356>
				enterPassword();
    36d2:	0e 94 0d 10 	call	0x201a	; 0x201a <enterPassword>
				savePass();
    36d6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <savePass>
	_delay_ms(100);
	while(UART_recieveByte() != MC2_READY){};*/

	enterPassword();
	savePass();
	for(counter = 0 ; counter<3;counter++){
    36da:	80 91 6d 01 	lds	r24, 0x016D
    36de:	8f 5f       	subi	r24, 0xFF	; 255
    36e0:	80 93 6d 01 	sts	0x016D, r24
    36e4:	f8 c0       	rjmp	.+496    	; 0x38d6 <changePass+0x546>
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	90 e4       	ldi	r25, 0x40	; 64
    36ea:	ac e9       	ldi	r26, 0x9C	; 156
    36ec:	b5 e4       	ldi	r27, 0x45	; 69
    36ee:	89 8f       	std	Y+25, r24	; 0x19
    36f0:	9a 8f       	std	Y+26, r25	; 0x1a
    36f2:	ab 8f       	std	Y+27, r26	; 0x1b
    36f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36f6:	69 8d       	ldd	r22, Y+25	; 0x19
    36f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36fe:	20 e0       	ldi	r18, 0x00	; 0
    3700:	30 e0       	ldi	r19, 0x00	; 0
    3702:	4a ef       	ldi	r20, 0xFA	; 250
    3704:	54 e4       	ldi	r21, 0x44	; 68
    3706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	8d 8b       	std	Y+21, r24	; 0x15
    3710:	9e 8b       	std	Y+22, r25	; 0x16
    3712:	af 8b       	std	Y+23, r26	; 0x17
    3714:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3716:	6d 89       	ldd	r22, Y+21	; 0x15
    3718:	7e 89       	ldd	r23, Y+22	; 0x16
    371a:	8f 89       	ldd	r24, Y+23	; 0x17
    371c:	98 8d       	ldd	r25, Y+24	; 0x18
    371e:	20 e0       	ldi	r18, 0x00	; 0
    3720:	30 e0       	ldi	r19, 0x00	; 0
    3722:	40 e8       	ldi	r20, 0x80	; 128
    3724:	5f e3       	ldi	r21, 0x3F	; 63
    3726:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    372a:	88 23       	and	r24, r24
    372c:	2c f4       	brge	.+10     	; 0x3738 <changePass+0x3a8>
		__ticks = 1;
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	9c 8b       	std	Y+20, r25	; 0x14
    3734:	8b 8b       	std	Y+19, r24	; 0x13
    3736:	3f c0       	rjmp	.+126    	; 0x37b6 <changePass+0x426>
	else if (__tmp > 65535)
    3738:	6d 89       	ldd	r22, Y+21	; 0x15
    373a:	7e 89       	ldd	r23, Y+22	; 0x16
    373c:	8f 89       	ldd	r24, Y+23	; 0x17
    373e:	98 8d       	ldd	r25, Y+24	; 0x18
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	3f ef       	ldi	r19, 0xFF	; 255
    3744:	4f e7       	ldi	r20, 0x7F	; 127
    3746:	57 e4       	ldi	r21, 0x47	; 71
    3748:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    374c:	18 16       	cp	r1, r24
    374e:	4c f5       	brge	.+82     	; 0x37a2 <changePass+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3750:	69 8d       	ldd	r22, Y+25	; 0x19
    3752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3758:	20 e0       	ldi	r18, 0x00	; 0
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	40 e2       	ldi	r20, 0x20	; 32
    375e:	51 e4       	ldi	r21, 0x41	; 65
    3760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3764:	dc 01       	movw	r26, r24
    3766:	cb 01       	movw	r24, r22
    3768:	bc 01       	movw	r22, r24
    376a:	cd 01       	movw	r24, r26
    376c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	9c 8b       	std	Y+20, r25	; 0x14
    3776:	8b 8b       	std	Y+19, r24	; 0x13
    3778:	0f c0       	rjmp	.+30     	; 0x3798 <changePass+0x408>
    377a:	88 ec       	ldi	r24, 0xC8	; 200
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	9a 8b       	std	Y+18, r25	; 0x12
    3780:	89 8b       	std	Y+17, r24	; 0x11
    3782:	89 89       	ldd	r24, Y+17	; 0x11
    3784:	9a 89       	ldd	r25, Y+18	; 0x12
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <changePass+0x3f6>
    378a:	9a 8b       	std	Y+18, r25	; 0x12
    378c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    378e:	8b 89       	ldd	r24, Y+19	; 0x13
    3790:	9c 89       	ldd	r25, Y+20	; 0x14
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	9c 8b       	std	Y+20, r25	; 0x14
    3796:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3798:	8b 89       	ldd	r24, Y+19	; 0x13
    379a:	9c 89       	ldd	r25, Y+20	; 0x14
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	69 f7       	brne	.-38     	; 0x377a <changePass+0x3ea>
    37a0:	9f c0       	rjmp	.+318    	; 0x38e0 <changePass+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a2:	6d 89       	ldd	r22, Y+21	; 0x15
    37a4:	7e 89       	ldd	r23, Y+22	; 0x16
    37a6:	8f 89       	ldd	r24, Y+23	; 0x17
    37a8:	98 8d       	ldd	r25, Y+24	; 0x18
    37aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	9c 8b       	std	Y+20, r25	; 0x14
    37b4:	8b 8b       	std	Y+19, r24	; 0x13
    37b6:	8b 89       	ldd	r24, Y+19	; 0x13
    37b8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ba:	98 8b       	std	Y+16, r25	; 0x10
    37bc:	8f 87       	std	Y+15, r24	; 0x0f
    37be:	8f 85       	ldd	r24, Y+15	; 0x0f
    37c0:	98 89       	ldd	r25, Y+16	; 0x10
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <changePass+0x432>
    37c6:	98 8b       	std	Y+16, r25	; 0x10
    37c8:	8f 87       	std	Y+15, r24	; 0x0f
    37ca:	8a c0       	rjmp	.+276    	; 0x38e0 <changePass+0x550>
				break;
			}

		}
		else{
			pass = CORRECT;
    37cc:	10 92 67 01 	sts	0x0167, r1
			LCD_clearScreen();
    37d0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Password Correct");
    37d4:	20 e4       	ldi	r18, 0x40	; 64
    37d6:	31 e0       	ldi	r19, 0x01	; 1
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	a9 01       	movw	r20, r18
    37de:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Proceed :");
    37e2:	21 e5       	ldi	r18, 0x51	; 81
    37e4:	31 e0       	ldi	r19, 0x01	; 1
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	60 e0       	ldi	r22, 0x00	; 0
    37ea:	a9 01       	movw	r20, r18
    37ec:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_displayStringRowColumn>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	aa ef       	ldi	r26, 0xFA	; 250
    37f6:	b4 e4       	ldi	r27, 0x44	; 68
    37f8:	8b 87       	std	Y+11, r24	; 0x0b
    37fa:	9c 87       	std	Y+12, r25	; 0x0c
    37fc:	ad 87       	std	Y+13, r26	; 0x0d
    37fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3800:	6b 85       	ldd	r22, Y+11	; 0x0b
    3802:	7c 85       	ldd	r23, Y+12	; 0x0c
    3804:	8d 85       	ldd	r24, Y+13	; 0x0d
    3806:	9e 85       	ldd	r25, Y+14	; 0x0e
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	4a ef       	ldi	r20, 0xFA	; 250
    380e:	54 e4       	ldi	r21, 0x44	; 68
    3810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	8f 83       	std	Y+7, r24	; 0x07
    381a:	98 87       	std	Y+8, r25	; 0x08
    381c:	a9 87       	std	Y+9, r26	; 0x09
    381e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3820:	6f 81       	ldd	r22, Y+7	; 0x07
    3822:	78 85       	ldd	r23, Y+8	; 0x08
    3824:	89 85       	ldd	r24, Y+9	; 0x09
    3826:	9a 85       	ldd	r25, Y+10	; 0x0a
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e8       	ldi	r20, 0x80	; 128
    382e:	5f e3       	ldi	r21, 0x3F	; 63
    3830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3834:	88 23       	and	r24, r24
    3836:	2c f4       	brge	.+10     	; 0x3842 <changePass+0x4b2>
		__ticks = 1;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	9e 83       	std	Y+6, r25	; 0x06
    383e:	8d 83       	std	Y+5, r24	; 0x05
    3840:	3f c0       	rjmp	.+126    	; 0x38c0 <changePass+0x530>
	else if (__tmp > 65535)
    3842:	6f 81       	ldd	r22, Y+7	; 0x07
    3844:	78 85       	ldd	r23, Y+8	; 0x08
    3846:	89 85       	ldd	r24, Y+9	; 0x09
    3848:	9a 85       	ldd	r25, Y+10	; 0x0a
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	3f ef       	ldi	r19, 0xFF	; 255
    384e:	4f e7       	ldi	r20, 0x7F	; 127
    3850:	57 e4       	ldi	r21, 0x47	; 71
    3852:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3856:	18 16       	cp	r1, r24
    3858:	4c f5       	brge	.+82     	; 0x38ac <changePass+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    385a:	6b 85       	ldd	r22, Y+11	; 0x0b
    385c:	7c 85       	ldd	r23, Y+12	; 0x0c
    385e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3860:	9e 85       	ldd	r25, Y+14	; 0x0e
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e2       	ldi	r20, 0x20	; 32
    3868:	51 e4       	ldi	r21, 0x41	; 65
    386a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    386e:	dc 01       	movw	r26, r24
    3870:	cb 01       	movw	r24, r22
    3872:	bc 01       	movw	r22, r24
    3874:	cd 01       	movw	r24, r26
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	9e 83       	std	Y+6, r25	; 0x06
    3880:	8d 83       	std	Y+5, r24	; 0x05
    3882:	0f c0       	rjmp	.+30     	; 0x38a2 <changePass+0x512>
    3884:	88 ec       	ldi	r24, 0xC8	; 200
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	9c 83       	std	Y+4, r25	; 0x04
    388a:	8b 83       	std	Y+3, r24	; 0x03
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	f1 f7       	brne	.-4      	; 0x3890 <changePass+0x500>
    3894:	9c 83       	std	Y+4, r25	; 0x04
    3896:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	9e 81       	ldd	r25, Y+6	; 0x06
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	9e 83       	std	Y+6, r25	; 0x06
    38a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38a2:	8d 81       	ldd	r24, Y+5	; 0x05
    38a4:	9e 81       	ldd	r25, Y+6	; 0x06
    38a6:	00 97       	sbiw	r24, 0x00	; 0
    38a8:	69 f7       	brne	.-38     	; 0x3884 <changePass+0x4f4>
    38aa:	1a c0       	rjmp	.+52     	; 0x38e0 <changePass+0x550>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ac:	6f 81       	ldd	r22, Y+7	; 0x07
    38ae:	78 85       	ldd	r23, Y+8	; 0x08
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	9e 83       	std	Y+6, r25	; 0x06
    38be:	8d 83       	std	Y+5, r24	; 0x05
    38c0:	8d 81       	ldd	r24, Y+5	; 0x05
    38c2:	9e 81       	ldd	r25, Y+6	; 0x06
    38c4:	9a 83       	std	Y+2, r25	; 0x02
    38c6:	89 83       	std	Y+1, r24	; 0x01
    38c8:	89 81       	ldd	r24, Y+1	; 0x01
    38ca:	9a 81       	ldd	r25, Y+2	; 0x02
    38cc:	01 97       	sbiw	r24, 0x01	; 1
    38ce:	f1 f7       	brne	.-4      	; 0x38cc <changePass+0x53c>
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	05 c0       	rjmp	.+10     	; 0x38e0 <changePass+0x550>
	_delay_ms(100);
	while(UART_recieveByte() != MC2_READY){};*/

	enterPassword();
	savePass();
	for(counter = 0 ; counter<3;counter++){
    38d6:	80 91 6d 01 	lds	r24, 0x016D
    38da:	83 30       	cpi	r24, 0x03	; 3
    38dc:	08 f4       	brcc	.+2      	; 0x38e0 <changePass+0x550>
    38de:	72 ce       	rjmp	.-796    	; 0x35c4 <changePass+0x234>
			_delay_ms(2000);
			break;
		}
	}

}
    38e0:	ca 5b       	subi	r28, 0xBA	; 186
    38e2:	df 4f       	sbci	r29, 0xFF	; 255
    38e4:	0f b6       	in	r0, 0x3f	; 63
    38e6:	f8 94       	cli
    38e8:	de bf       	out	0x3e, r29	; 62
    38ea:	0f be       	out	0x3f, r0	; 63
    38ec:	cd bf       	out	0x3d, r28	; 61
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	08 95       	ret

000038f8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    38f8:	df 93       	push	r29
    38fa:	cf 93       	push	r28
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <UART_init+0x6>
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <UART_init+0x8>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	9c 83       	std	Y+4, r25	; 0x04
    3906:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3908:	1a 82       	std	Y+2, r1	; 0x02
    390a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    390c:	eb e2       	ldi	r30, 0x2B	; 43
    390e:	f0 e0       	ldi	r31, 0x00	; 0
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3914:	ea e2       	ldi	r30, 0x2A	; 42
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	88 e1       	ldi	r24, 0x18	; 24
    391a:	80 83       	st	Z, r24

	if(Config_Ptr->bitNumber == BitNumber_9){
    391c:	eb 81       	ldd	r30, Y+3	; 0x03
    391e:	fc 81       	ldd	r31, Y+4	; 0x04
    3920:	85 81       	ldd	r24, Z+5	; 0x05
    3922:	84 30       	cpi	r24, 0x04	; 4
    3924:	39 f4       	brne	.+14     	; 0x3934 <UART_init+0x3c>
		UCSRB |= (1<<UCSZ2);
    3926:	aa e2       	ldi	r26, 0x2A	; 42
    3928:	b0 e0       	ldi	r27, 0x00	; 0
    392a:	ea e2       	ldi	r30, 0x2A	; 42
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	80 81       	ld	r24, Z
    3930:	84 60       	ori	r24, 0x04	; 4
    3932:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3934:	e0 e4       	ldi	r30, 0x40	; 64
    3936:	f0 e0       	ldi	r31, 0x00	; 0
    3938:	80 e8       	ldi	r24, 0x80	; 128
    393a:	80 83       	st	Z, r24

	 /*Use configuration to get type (Synchronous or Asynchronous)*/
	if(Config_Ptr->bitNumber == BitNumber_9 || Config_Ptr->bitNumber == BitNumber_8){
    393c:	eb 81       	ldd	r30, Y+3	; 0x03
    393e:	fc 81       	ldd	r31, Y+4	; 0x04
    3940:	85 81       	ldd	r24, Z+5	; 0x05
    3942:	84 30       	cpi	r24, 0x04	; 4
    3944:	29 f0       	breq	.+10     	; 0x3950 <UART_init+0x58>
    3946:	eb 81       	ldd	r30, Y+3	; 0x03
    3948:	fc 81       	ldd	r31, Y+4	; 0x04
    394a:	85 81       	ldd	r24, Z+5	; 0x05
    394c:	83 30       	cpi	r24, 0x03	; 3
    394e:	41 f4       	brne	.+16     	; 0x3960 <UART_init+0x68>
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    3950:	a0 e4       	ldi	r26, 0x40	; 64
    3952:	b0 e0       	ldi	r27, 0x00	; 0
    3954:	e0 e4       	ldi	r30, 0x40	; 64
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	86 60       	ori	r24, 0x06	; 6
    395c:	8c 93       	st	X, r24
    395e:	19 c0       	rjmp	.+50     	; 0x3992 <UART_init+0x9a>
	}
	else if(Config_Ptr->bitNumber == BitNumber_7){
    3960:	eb 81       	ldd	r30, Y+3	; 0x03
    3962:	fc 81       	ldd	r31, Y+4	; 0x04
    3964:	85 81       	ldd	r24, Z+5	; 0x05
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	41 f4       	brne	.+16     	; 0x397a <UART_init+0x82>
		UCSRC |= (1<<UCSZ1);
    396a:	a0 e4       	ldi	r26, 0x40	; 64
    396c:	b0 e0       	ldi	r27, 0x00	; 0
    396e:	e0 e4       	ldi	r30, 0x40	; 64
    3970:	f0 e0       	ldi	r31, 0x00	; 0
    3972:	80 81       	ld	r24, Z
    3974:	84 60       	ori	r24, 0x04	; 4
    3976:	8c 93       	st	X, r24
    3978:	0c c0       	rjmp	.+24     	; 0x3992 <UART_init+0x9a>
	}
	else if(Config_Ptr->bitNumber == BitNumber_6){
    397a:	eb 81       	ldd	r30, Y+3	; 0x03
    397c:	fc 81       	ldd	r31, Y+4	; 0x04
    397e:	85 81       	ldd	r24, Z+5	; 0x05
    3980:	81 30       	cpi	r24, 0x01	; 1
    3982:	39 f4       	brne	.+14     	; 0x3992 <UART_init+0x9a>
			UCSRC |= (1<<UCSZ0);
    3984:	a0 e4       	ldi	r26, 0x40	; 64
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e0 e4       	ldi	r30, 0x40	; 64
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	82 60       	ori	r24, 0x02	; 2
    3990:	8c 93       	st	X, r24
		}

	 /*Use configuration to get type (Synchronous or Asynchronous)*/
   if(Config_Ptr->synchType == SYNCHRONOUS){
    3992:	eb 81       	ldd	r30, Y+3	; 0x03
    3994:	fc 81       	ldd	r31, Y+4	; 0x04
    3996:	80 81       	ld	r24, Z
    3998:	81 30       	cpi	r24, 0x01	; 1
    399a:	39 f4       	brne	.+14     	; 0x39aa <UART_init+0xb2>
	   UCSRC |= (1<<UMSEL);
    399c:	a0 e4       	ldi	r26, 0x40	; 64
    399e:	b0 e0       	ldi	r27, 0x00	; 0
    39a0:	e0 e4       	ldi	r30, 0x40	; 64
    39a2:	f0 e0       	ldi	r31, 0x00	; 0
    39a4:	80 81       	ld	r24, Z
    39a6:	80 64       	ori	r24, 0x40	; 64
    39a8:	8c 93       	st	X, r24
   }
   /*Use configuration to get number of stop bits*/
   if(Config_Ptr->stop == STOP_2bit){
    39aa:	eb 81       	ldd	r30, Y+3	; 0x03
    39ac:	fc 81       	ldd	r31, Y+4	; 0x04
    39ae:	84 81       	ldd	r24, Z+4	; 0x04
    39b0:	81 30       	cpi	r24, 0x01	; 1
    39b2:	39 f4       	brne	.+14     	; 0x39c2 <UART_init+0xca>
  	   UCSRC |= (1<<USBS);
    39b4:	a0 e4       	ldi	r26, 0x40	; 64
    39b6:	b0 e0       	ldi	r27, 0x00	; 0
    39b8:	e0 e4       	ldi	r30, 0x40	; 64
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	80 81       	ld	r24, Z
    39be:	88 60       	ori	r24, 0x08	; 8
    39c0:	8c 93       	st	X, r24
     }
/*Use configuration to get the parity type*/
  if(Config_Ptr->parity == RESERVED){
    39c2:	eb 81       	ldd	r30, Y+3	; 0x03
    39c4:	fc 81       	ldd	r31, Y+4	; 0x04
    39c6:	83 81       	ldd	r24, Z+3	; 0x03
    39c8:	81 30       	cpi	r24, 0x01	; 1
    39ca:	41 f4       	brne	.+16     	; 0x39dc <UART_init+0xe4>
	  UCSRC |= (1<<UPM0);
    39cc:	a0 e4       	ldi	r26, 0x40	; 64
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e0 e4       	ldi	r30, 0x40	; 64
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	80 61       	ori	r24, 0x10	; 16
    39d8:	8c 93       	st	X, r24
    39da:	19 c0       	rjmp	.+50     	; 0x3a0e <UART_init+0x116>
  }else if(Config_Ptr->parity == ENABLED_EVEN){
    39dc:	eb 81       	ldd	r30, Y+3	; 0x03
    39de:	fc 81       	ldd	r31, Y+4	; 0x04
    39e0:	83 81       	ldd	r24, Z+3	; 0x03
    39e2:	82 30       	cpi	r24, 0x02	; 2
    39e4:	41 f4       	brne	.+16     	; 0x39f6 <UART_init+0xfe>
	  UCSRC |= (1<<UPM1);
    39e6:	a0 e4       	ldi	r26, 0x40	; 64
    39e8:	b0 e0       	ldi	r27, 0x00	; 0
    39ea:	e0 e4       	ldi	r30, 0x40	; 64
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	80 81       	ld	r24, Z
    39f0:	80 62       	ori	r24, 0x20	; 32
    39f2:	8c 93       	st	X, r24
    39f4:	0c c0       	rjmp	.+24     	; 0x3a0e <UART_init+0x116>
  }else if(Config_Ptr->parity == ENABLED_ODD){
    39f6:	eb 81       	ldd	r30, Y+3	; 0x03
    39f8:	fc 81       	ldd	r31, Y+4	; 0x04
    39fa:	83 81       	ldd	r24, Z+3	; 0x03
    39fc:	83 30       	cpi	r24, 0x03	; 3
    39fe:	39 f4       	brne	.+14     	; 0x3a0e <UART_init+0x116>
	  UCSRC |= (1<<UPM0) | (1<<UPM1);
    3a00:	a0 e4       	ldi	r26, 0x40	; 64
    3a02:	b0 e0       	ldi	r27, 0x00	; 0
    3a04:	e0 e4       	ldi	r30, 0x40	; 64
    3a06:	f0 e0       	ldi	r31, 0x00	; 0
    3a08:	80 81       	ld	r24, Z
    3a0a:	80 63       	ori	r24, 0x30	; 48
    3a0c:	8c 93       	st	X, r24
  }

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3a0e:	eb 81       	ldd	r30, Y+3	; 0x03
    3a10:	fc 81       	ldd	r31, Y+4	; 0x04
    3a12:	81 81       	ldd	r24, Z+1	; 0x01
    3a14:	92 81       	ldd	r25, Z+2	; 0x02
    3a16:	cc 01       	movw	r24, r24
    3a18:	a0 e0       	ldi	r26, 0x00	; 0
    3a1a:	b0 e0       	ldi	r27, 0x00	; 0
    3a1c:	88 0f       	add	r24, r24
    3a1e:	99 1f       	adc	r25, r25
    3a20:	aa 1f       	adc	r26, r26
    3a22:	bb 1f       	adc	r27, r27
    3a24:	88 0f       	add	r24, r24
    3a26:	99 1f       	adc	r25, r25
    3a28:	aa 1f       	adc	r26, r26
    3a2a:	bb 1f       	adc	r27, r27
    3a2c:	88 0f       	add	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	aa 1f       	adc	r26, r26
    3a32:	bb 1f       	adc	r27, r27
    3a34:	9c 01       	movw	r18, r24
    3a36:	ad 01       	movw	r20, r26
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	92 e1       	ldi	r25, 0x12	; 18
    3a3c:	aa e7       	ldi	r26, 0x7A	; 122
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	bc 01       	movw	r22, r24
    3a42:	cd 01       	movw	r24, r26
    3a44:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <__udivmodsi4>
    3a48:	da 01       	movw	r26, r20
    3a4a:	c9 01       	movw	r24, r18
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	9a 83       	std	Y+2, r25	; 0x02
    3a50:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3a52:	e0 e4       	ldi	r30, 0x40	; 64
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	9a 81       	ldd	r25, Y+2	; 0x02
    3a5a:	89 2f       	mov	r24, r25
    3a5c:	99 27       	eor	r25, r25
    3a5e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3a60:	e9 e2       	ldi	r30, 0x29	; 41
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	89 81       	ldd	r24, Y+1	; 0x01
    3a66:	80 83       	st	Z, r24
}
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	08 95       	ret

00003a76 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	0f 92       	push	r0
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
    3a80:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a82:	eb e2       	ldi	r30, 0x2B	; 43
    3a84:	f0 e0       	ldi	r31, 0x00	; 0
    3a86:	80 81       	ld	r24, Z
    3a88:	88 2f       	mov	r24, r24
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	80 72       	andi	r24, 0x20	; 32
    3a8e:	90 70       	andi	r25, 0x00	; 0
    3a90:	00 97       	sbiw	r24, 0x00	; 0
    3a92:	b9 f3       	breq	.-18     	; 0x3a82 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a94:	ec e2       	ldi	r30, 0x2C	; 44
    3a96:	f0 e0       	ldi	r31, 0x00	; 0
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3a9c:	0f 90       	pop	r0
    3a9e:	cf 91       	pop	r28
    3aa0:	df 91       	pop	r29
    3aa2:	08 95       	ret

00003aa4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3aa4:	df 93       	push	r29
    3aa6:	cf 93       	push	r28
    3aa8:	cd b7       	in	r28, 0x3d	; 61
    3aaa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3aac:	eb e2       	ldi	r30, 0x2B	; 43
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	88 23       	and	r24, r24
    3ab4:	dc f7       	brge	.-10     	; 0x3aac <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3ab6:	ec e2       	ldi	r30, 0x2C	; 44
    3ab8:	f0 e0       	ldi	r31, 0x00	; 0
    3aba:	80 81       	ld	r24, Z
}
    3abc:	cf 91       	pop	r28
    3abe:	df 91       	pop	r29
    3ac0:	08 95       	ret

00003ac2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3ac2:	df 93       	push	r29
    3ac4:	cf 93       	push	r28
    3ac6:	00 d0       	rcall	.+0      	; 0x3ac8 <UART_sendString+0x6>
    3ac8:	0f 92       	push	r0
    3aca:	cd b7       	in	r28, 0x3d	; 61
    3acc:	de b7       	in	r29, 0x3e	; 62
    3ace:	9b 83       	std	Y+3, r25	; 0x03
    3ad0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ad2:	19 82       	std	Y+1, r1	; 0x01
    3ad4:	0e c0       	rjmp	.+28     	; 0x3af2 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3ad6:	89 81       	ldd	r24, Y+1	; 0x01
    3ad8:	28 2f       	mov	r18, r24
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ade:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	e2 0f       	add	r30, r18
    3ae4:	f3 1f       	adc	r31, r19
    3ae6:	80 81       	ld	r24, Z
    3ae8:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <UART_sendByte>
		i++;
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	8f 5f       	subi	r24, 0xFF	; 255
    3af0:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	28 2f       	mov	r18, r24
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	9b 81       	ldd	r25, Y+3	; 0x03
    3afc:	fc 01       	movw	r30, r24
    3afe:	e2 0f       	add	r30, r18
    3b00:	f3 1f       	adc	r31, r19
    3b02:	80 81       	ld	r24, Z
    3b04:	88 23       	and	r24, r24
    3b06:	39 f7       	brne	.-50     	; 0x3ad6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3b08:	0f 90       	pop	r0
    3b0a:	0f 90       	pop	r0
    3b0c:	0f 90       	pop	r0
    3b0e:	cf 91       	pop	r28
    3b10:	df 91       	pop	r29
    3b12:	08 95       	ret

00003b14 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	00 d0       	rcall	.+0      	; 0x3b1e <UART_receiveString+0xa>
    3b1e:	0f 92       	push	r0
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	9b 83       	std	Y+3, r25	; 0x03
    3b26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b28:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	8c 01       	movw	r16, r24
    3b36:	02 0f       	add	r16, r18
    3b38:	13 1f       	adc	r17, r19
    3b3a:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    3b3e:	f8 01       	movw	r30, r16
    3b40:	80 83       	st	Z, r24
    3b42:	0f c0       	rjmp	.+30     	; 0x3b62 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3b44:	89 81       	ldd	r24, Y+1	; 0x01
    3b46:	8f 5f       	subi	r24, 0xFF	; 255
    3b48:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3b4a:	89 81       	ldd	r24, Y+1	; 0x01
    3b4c:	28 2f       	mov	r18, r24
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	8a 81       	ldd	r24, Y+2	; 0x02
    3b52:	9b 81       	ldd	r25, Y+3	; 0x03
    3b54:	8c 01       	movw	r16, r24
    3b56:	02 0f       	add	r16, r18
    3b58:	13 1f       	adc	r17, r19
    3b5a:	0e 94 52 1d 	call	0x3aa4	; 0x3aa4 <UART_recieveByte>
    3b5e:	f8 01       	movw	r30, r16
    3b60:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	28 2f       	mov	r18, r24
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	e2 0f       	add	r30, r18
    3b70:	f3 1f       	adc	r31, r19
    3b72:	80 81       	ld	r24, Z
    3b74:	83 32       	cpi	r24, 0x23	; 35
    3b76:	31 f7       	brne	.-52     	; 0x3b44 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	28 2f       	mov	r18, r24
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	fc 01       	movw	r30, r24
    3b84:	e2 0f       	add	r30, r18
    3b86:	f3 1f       	adc	r31, r19
    3b88:	10 82       	st	Z, r1
}
    3b8a:	0f 90       	pop	r0
    3b8c:	0f 90       	pop	r0
    3b8e:	0f 90       	pop	r0
    3b90:	cf 91       	pop	r28
    3b92:	df 91       	pop	r29
    3b94:	1f 91       	pop	r17
    3b96:	0f 91       	pop	r16
    3b98:	08 95       	ret

00003b9a <__udivmodsi4>:
    3b9a:	a1 e2       	ldi	r26, 0x21	; 33
    3b9c:	1a 2e       	mov	r1, r26
    3b9e:	aa 1b       	sub	r26, r26
    3ba0:	bb 1b       	sub	r27, r27
    3ba2:	fd 01       	movw	r30, r26
    3ba4:	0d c0       	rjmp	.+26     	; 0x3bc0 <__udivmodsi4_ep>

00003ba6 <__udivmodsi4_loop>:
    3ba6:	aa 1f       	adc	r26, r26
    3ba8:	bb 1f       	adc	r27, r27
    3baa:	ee 1f       	adc	r30, r30
    3bac:	ff 1f       	adc	r31, r31
    3bae:	a2 17       	cp	r26, r18
    3bb0:	b3 07       	cpc	r27, r19
    3bb2:	e4 07       	cpc	r30, r20
    3bb4:	f5 07       	cpc	r31, r21
    3bb6:	20 f0       	brcs	.+8      	; 0x3bc0 <__udivmodsi4_ep>
    3bb8:	a2 1b       	sub	r26, r18
    3bba:	b3 0b       	sbc	r27, r19
    3bbc:	e4 0b       	sbc	r30, r20
    3bbe:	f5 0b       	sbc	r31, r21

00003bc0 <__udivmodsi4_ep>:
    3bc0:	66 1f       	adc	r22, r22
    3bc2:	77 1f       	adc	r23, r23
    3bc4:	88 1f       	adc	r24, r24
    3bc6:	99 1f       	adc	r25, r25
    3bc8:	1a 94       	dec	r1
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <__udivmodsi4_loop>
    3bcc:	60 95       	com	r22
    3bce:	70 95       	com	r23
    3bd0:	80 95       	com	r24
    3bd2:	90 95       	com	r25
    3bd4:	9b 01       	movw	r18, r22
    3bd6:	ac 01       	movw	r20, r24
    3bd8:	bd 01       	movw	r22, r26
    3bda:	cf 01       	movw	r24, r30
    3bdc:	08 95       	ret

00003bde <__prologue_saves__>:
    3bde:	2f 92       	push	r2
    3be0:	3f 92       	push	r3
    3be2:	4f 92       	push	r4
    3be4:	5f 92       	push	r5
    3be6:	6f 92       	push	r6
    3be8:	7f 92       	push	r7
    3bea:	8f 92       	push	r8
    3bec:	9f 92       	push	r9
    3bee:	af 92       	push	r10
    3bf0:	bf 92       	push	r11
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	ca 1b       	sub	r28, r26
    3c08:	db 0b       	sbc	r29, r27
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	09 94       	ijmp

00003c16 <__epilogue_restores__>:
    3c16:	2a 88       	ldd	r2, Y+18	; 0x12
    3c18:	39 88       	ldd	r3, Y+17	; 0x11
    3c1a:	48 88       	ldd	r4, Y+16	; 0x10
    3c1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c20:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c22:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c26:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c28:	b9 84       	ldd	r11, Y+9	; 0x09
    3c2a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c2c:	df 80       	ldd	r13, Y+7	; 0x07
    3c2e:	ee 80       	ldd	r14, Y+6	; 0x06
    3c30:	fd 80       	ldd	r15, Y+5	; 0x05
    3c32:	0c 81       	ldd	r16, Y+4	; 0x04
    3c34:	1b 81       	ldd	r17, Y+3	; 0x03
    3c36:	aa 81       	ldd	r26, Y+2	; 0x02
    3c38:	b9 81       	ldd	r27, Y+1	; 0x01
    3c3a:	ce 0f       	add	r28, r30
    3c3c:	d1 1d       	adc	r29, r1
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	ed 01       	movw	r28, r26
    3c4a:	08 95       	ret

00003c4c <itoa>:
    3c4c:	fb 01       	movw	r30, r22
    3c4e:	9f 01       	movw	r18, r30
    3c50:	e8 94       	clt
    3c52:	42 30       	cpi	r20, 0x02	; 2
    3c54:	c4 f0       	brlt	.+48     	; 0x3c86 <itoa+0x3a>
    3c56:	45 32       	cpi	r20, 0x25	; 37
    3c58:	b4 f4       	brge	.+44     	; 0x3c86 <itoa+0x3a>
    3c5a:	4a 30       	cpi	r20, 0x0A	; 10
    3c5c:	29 f4       	brne	.+10     	; 0x3c68 <itoa+0x1c>
    3c5e:	97 fb       	bst	r25, 7
    3c60:	1e f4       	brtc	.+6      	; 0x3c68 <itoa+0x1c>
    3c62:	90 95       	com	r25
    3c64:	81 95       	neg	r24
    3c66:	9f 4f       	sbci	r25, 0xFF	; 255
    3c68:	64 2f       	mov	r22, r20
    3c6a:	77 27       	eor	r23, r23
    3c6c:	0e 94 57 1e 	call	0x3cae	; 0x3cae <__udivmodhi4>
    3c70:	80 5d       	subi	r24, 0xD0	; 208
    3c72:	8a 33       	cpi	r24, 0x3A	; 58
    3c74:	0c f0       	brlt	.+2      	; 0x3c78 <itoa+0x2c>
    3c76:	89 5d       	subi	r24, 0xD9	; 217
    3c78:	81 93       	st	Z+, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	00 97       	sbiw	r24, 0x00	; 0
    3c7e:	a1 f7       	brne	.-24     	; 0x3c68 <itoa+0x1c>
    3c80:	16 f4       	brtc	.+4      	; 0x3c86 <itoa+0x3a>
    3c82:	5d e2       	ldi	r21, 0x2D	; 45
    3c84:	51 93       	st	Z+, r21
    3c86:	10 82       	st	Z, r1
    3c88:	c9 01       	movw	r24, r18
    3c8a:	0c 94 47 1e 	jmp	0x3c8e	; 0x3c8e <strrev>

00003c8e <strrev>:
    3c8e:	dc 01       	movw	r26, r24
    3c90:	fc 01       	movw	r30, r24
    3c92:	67 2f       	mov	r22, r23
    3c94:	71 91       	ld	r23, Z+
    3c96:	77 23       	and	r23, r23
    3c98:	e1 f7       	brne	.-8      	; 0x3c92 <strrev+0x4>
    3c9a:	32 97       	sbiw	r30, 0x02	; 2
    3c9c:	04 c0       	rjmp	.+8      	; 0x3ca6 <strrev+0x18>
    3c9e:	7c 91       	ld	r23, X
    3ca0:	6d 93       	st	X+, r22
    3ca2:	70 83       	st	Z, r23
    3ca4:	62 91       	ld	r22, -Z
    3ca6:	ae 17       	cp	r26, r30
    3ca8:	bf 07       	cpc	r27, r31
    3caa:	c8 f3       	brcs	.-14     	; 0x3c9e <strrev+0x10>
    3cac:	08 95       	ret

00003cae <__udivmodhi4>:
    3cae:	aa 1b       	sub	r26, r26
    3cb0:	bb 1b       	sub	r27, r27
    3cb2:	51 e1       	ldi	r21, 0x11	; 17
    3cb4:	07 c0       	rjmp	.+14     	; 0x3cc4 <__udivmodhi4_ep>

00003cb6 <__udivmodhi4_loop>:
    3cb6:	aa 1f       	adc	r26, r26
    3cb8:	bb 1f       	adc	r27, r27
    3cba:	a6 17       	cp	r26, r22
    3cbc:	b7 07       	cpc	r27, r23
    3cbe:	10 f0       	brcs	.+4      	; 0x3cc4 <__udivmodhi4_ep>
    3cc0:	a6 1b       	sub	r26, r22
    3cc2:	b7 0b       	sbc	r27, r23

00003cc4 <__udivmodhi4_ep>:
    3cc4:	88 1f       	adc	r24, r24
    3cc6:	99 1f       	adc	r25, r25
    3cc8:	5a 95       	dec	r21
    3cca:	a9 f7       	brne	.-22     	; 0x3cb6 <__udivmodhi4_loop>
    3ccc:	80 95       	com	r24
    3cce:	90 95       	com	r25
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	08 95       	ret

00003cd6 <_exit>:
    3cd6:	f8 94       	cli

00003cd8 <__stop_program>:
    3cd8:	ff cf       	rjmp	.-2      	; 0x3cd8 <__stop_program>
