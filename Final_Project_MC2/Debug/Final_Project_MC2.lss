
Final_Project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000316e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000316e  00003202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800070  00800070  00003212  2**0
                  ALLOC
  3 .stab         0000303c  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001579  00000000  00000000  00006250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000077c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b35c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__vector_3>
      10:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 a4 13 	jmp	0x2748	; 0x2748 <__vector_8>
      24:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e6       	ldi	r30, 0x6E	; 110
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 09 	call	0x136c	; 0x136c <main>
      8a:	0c 94 b5 18 	jmp	0x316a	; 0x316a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8e 18 	jmp	0x311c	; 0x311c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_Init>:
#include "buzzer.h"
#include "gpio.h"
#include "avr/io.h" /* To use the IO Ports Registers */
#include "common_macros.h" /* To use the macros like SET_BIT */

void BUZZER_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <BUZZER_ON>:


void BUZZER_ON(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
 GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	67 e0       	ldi	r22, 0x07	; 7
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <BUZZER_OFF>:

void BUZZER_OFF(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	67 e0       	ldi	r22, 0x07	; 7
     b8c:	41 e0       	ldi	r20, 0x01	; 1
     b8e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <EEPROM_writeByte+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <EEPROM_writeByte+0x8>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     baa:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     bae:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	11 f0       	breq	.+4      	; 0xbba <EEPROM_writeByte+0x22>
        return ERROR;
     bb6:	1c 82       	std	Y+4, r1	; 0x04
     bb8:	28 c0       	rjmp	.+80     	; 0xc0a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	80 70       	andi	r24, 0x00	; 0
     bc0:	97 70       	andi	r25, 0x07	; 7
     bc2:	88 0f       	add	r24, r24
     bc4:	89 2f       	mov	r24, r25
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	91 95       	neg	r25
     bcc:	80 6a       	ori	r24, 0xA0	; 160
     bce:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     bd2:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     bd6:	88 31       	cpi	r24, 0x18	; 24
     bd8:	11 f0       	breq	.+4      	; 0xbde <EEPROM_writeByte+0x46>
        return ERROR; 
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     be4:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     be8:	88 32       	cpi	r24, 0x28	; 40
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_writeByte+0x58>
        return ERROR;
     bec:	1c 82       	std	Y+4, r1	; 0x04
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     bf6:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     bfa:	88 32       	cpi	r24, 0x28	; 40
     bfc:	11 f0       	breq	.+4      	; 0xc02 <EEPROM_writeByte+0x6a>
        return ERROR;
     bfe:	1c 82       	std	Y+4, r1	; 0x04
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c02:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <TWI_stop>
	
    return SUCCESS;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EEPROM_readByte+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <EEPROM_readByte+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	7c 83       	std	Y+4, r23	; 0x04
     c2e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c30:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c34:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	11 f0       	breq	.+4      	; 0xc40 <EEPROM_readByte+0x26>
        return ERROR;
     c3c:	1d 82       	std	Y+5, r1	; 0x05
     c3e:	44 c0       	rjmp	.+136    	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	80 70       	andi	r24, 0x00	; 0
     c46:	97 70       	andi	r25, 0x07	; 7
     c48:	88 0f       	add	r24, r24
     c4a:	89 2f       	mov	r24, r25
     c4c:	88 1f       	adc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	91 95       	neg	r25
     c52:	80 6a       	ori	r24, 0xA0	; 160
     c54:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c58:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     c5c:	88 31       	cpi	r24, 0x18	; 24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <EEPROM_readByte+0x4a>
        return ERROR;
     c60:	1d 82       	std	Y+5, r1	; 0x05
     c62:	32 c0       	rjmp	.+100    	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c6a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     c6e:	88 32       	cpi	r24, 0x28	; 40
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_readByte+0x5c>
        return ERROR;
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	29 c0       	rjmp	.+82     	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     c76:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     c7a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     c7e:	80 31       	cpi	r24, 0x10	; 16
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_readByte+0x6c>
        return ERROR;
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	21 c0       	rjmp	.+66     	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	80 70       	andi	r24, 0x00	; 0
     c8c:	97 70       	andi	r25, 0x07	; 7
     c8e:	88 0f       	add	r24, r24
     c90:	89 2f       	mov	r24, r25
     c92:	88 1f       	adc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	91 95       	neg	r25
     c98:	81 6a       	ori	r24, 0xA1	; 161
     c9a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     c9e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     ca2:	80 34       	cpi	r24, 0x40	; 64
     ca4:	11 f0       	breq	.+4      	; 0xcaa <EEPROM_readByte+0x90>
        return ERROR;
     ca6:	1d 82       	std	Y+5, r1	; 0x05
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     caa:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <TWI_readByteWithNACK>
     cae:	eb 81       	ldd	r30, Y+3	; 0x03
     cb0:	fc 81       	ldd	r31, Y+4	; 0x04
     cb2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     cb4:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <TWI_getStatus>
     cb8:	88 35       	cpi	r24, 0x58	; 88
     cba:	11 f0       	breq	.+4      	; 0xcc0 <EEPROM_readByte+0xa6>
        return ERROR;
     cbc:	1d 82       	std	Y+5, r1	; 0x05
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     cc0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <TWI_stop>

    return SUCCESS;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8d 83       	std	Y+5, r24	; 0x05
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	00 d0       	rcall	.+0      	; 0xce0 <GPIO_setupPinDirection+0x6>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <GPIO_setupPinDirection+0x8>
     ce2:	0f 92       	push	r0
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	6a 83       	std	Y+2, r22	; 0x02
     cec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 30       	cpi	r24, 0x08	; 8
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <GPIO_setupPinDirection+0x1c>
     cf4:	d5 c0       	rjmp	.+426    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <GPIO_setupPinDirection+0x24>
     cfc:	d1 c0       	rjmp	.+418    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	3d 83       	std	Y+5, r19	; 0x05
     d06:	2c 83       	std	Y+4, r18	; 0x04
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <GPIO_setupPinDirection+0x3a>
     d12:	43 c0       	rjmp	.+134    	; 0xd9a <GPIO_setupPinDirection+0xc0>
     d14:	2c 81       	ldd	r18, Y+4	; 0x04
     d16:	3d 81       	ldd	r19, Y+5	; 0x05
     d18:	22 30       	cpi	r18, 0x02	; 2
     d1a:	31 05       	cpc	r19, r1
     d1c:	2c f4       	brge	.+10     	; 0xd28 <GPIO_setupPinDirection+0x4e>
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	9d 81       	ldd	r25, Y+5	; 0x05
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	71 f0       	breq	.+28     	; 0xd42 <GPIO_setupPinDirection+0x68>
     d26:	bc c0       	rjmp	.+376    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
     d28:	2c 81       	ldd	r18, Y+4	; 0x04
     d2a:	3d 81       	ldd	r19, Y+5	; 0x05
     d2c:	22 30       	cpi	r18, 0x02	; 2
     d2e:	31 05       	cpc	r19, r1
     d30:	09 f4       	brne	.+2      	; 0xd34 <GPIO_setupPinDirection+0x5a>
     d32:	5f c0       	rjmp	.+190    	; 0xdf2 <GPIO_setupPinDirection+0x118>
     d34:	8c 81       	ldd	r24, Y+4	; 0x04
     d36:	9d 81       	ldd	r25, Y+5	; 0x05
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <GPIO_setupPinDirection+0x66>
     d3e:	85 c0       	rjmp	.+266    	; 0xe4a <GPIO_setupPinDirection+0x170>
     d40:	af c0       	rjmp	.+350    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	a1 f4       	brne	.+40     	; 0xd70 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d48:	aa e3       	ldi	r26, 0x3A	; 58
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea e3       	ldi	r30, 0x3A	; 58
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <GPIO_setupPinDirection+0x8c>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <GPIO_setupPinDirection+0x88>
     d6a:	84 2b       	or	r24, r20
     d6c:	8c 93       	st	X, r24
     d6e:	98 c0       	rjmp	.+304    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d70:	aa e3       	ldi	r26, 0x3A	; 58
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ea e3       	ldi	r30, 0x3A	; 58
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <GPIO_setupPinDirection+0xb4>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <GPIO_setupPinDirection+0xb0>
     d92:	80 95       	com	r24
     d94:	84 23       	and	r24, r20
     d96:	8c 93       	st	X, r24
     d98:	83 c0       	rjmp	.+262    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	a1 f4       	brne	.+40     	; 0xdc8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8a 81       	ldd	r24, Y+2	; 0x02
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <GPIO_setupPinDirection+0xe4>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <GPIO_setupPinDirection+0xe0>
     dc2:	84 2b       	or	r24, r20
     dc4:	8c 93       	st	X, r24
     dc6:	6c c0       	rjmp	.+216    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dc8:	a7 e3       	ldi	r26, 0x37	; 55
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e7 e3       	ldi	r30, 0x37	; 55
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <GPIO_setupPinDirection+0x10c>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <GPIO_setupPinDirection+0x108>
     dea:	80 95       	com	r24
     dec:	84 23       	and	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	57 c0       	rjmp	.+174    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	a1 f4       	brne	.+40     	; 0xe20 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     df8:	a4 e3       	ldi	r26, 0x34	; 52
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e4 e3       	ldi	r30, 0x34	; 52
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_setupPinDirection+0x13c>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_setupPinDirection+0x138>
     e1a:	84 2b       	or	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	40 c0       	rjmp	.+128    	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e20:	a4 e3       	ldi	r26, 0x34	; 52
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e4 e3       	ldi	r30, 0x34	; 52
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <GPIO_setupPinDirection+0x164>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <GPIO_setupPinDirection+0x160>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	2b c0       	rjmp	.+86     	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	a1 f4       	brne	.+40     	; 0xe78 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e50:	a1 e3       	ldi	r26, 0x31	; 49
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e1 e3       	ldi	r30, 0x31	; 49
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <GPIO_setupPinDirection+0x194>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <GPIO_setupPinDirection+0x190>
     e72:	84 2b       	or	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e78:	a1 e3       	ldi	r26, 0x31	; 49
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e1 e3       	ldi	r30, 0x31	; 49
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <GPIO_setupPinDirection+0x1bc>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <GPIO_setupPinDirection+0x1b8>
     e9a:	80 95       	com	r24
     e9c:	84 23       	and	r24, r20
     e9e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <GPIO_writePin+0x6>
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <GPIO_writePin+0x8>
     eb8:	0f 92       	push	r0
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	6a 83       	std	Y+2, r22	; 0x02
     ec2:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	08 f0       	brcs	.+2      	; 0xecc <GPIO_writePin+0x1c>
     eca:	d5 c0       	rjmp	.+426    	; 0x1076 <GPIO_writePin+0x1c6>
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <GPIO_writePin+0x24>
     ed2:	d1 c0       	rjmp	.+418    	; 0x1076 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <GPIO_writePin+0x3a>
     ee8:	43 c0       	rjmp	.+134    	; 0xf70 <GPIO_writePin+0xc0>
     eea:	2c 81       	ldd	r18, Y+4	; 0x04
     eec:	3d 81       	ldd	r19, Y+5	; 0x05
     eee:	22 30       	cpi	r18, 0x02	; 2
     ef0:	31 05       	cpc	r19, r1
     ef2:	2c f4       	brge	.+10     	; 0xefe <GPIO_writePin+0x4e>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	71 f0       	breq	.+28     	; 0xf18 <GPIO_writePin+0x68>
     efc:	bc c0       	rjmp	.+376    	; 0x1076 <GPIO_writePin+0x1c6>
     efe:	2c 81       	ldd	r18, Y+4	; 0x04
     f00:	3d 81       	ldd	r19, Y+5	; 0x05
     f02:	22 30       	cpi	r18, 0x02	; 2
     f04:	31 05       	cpc	r19, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <GPIO_writePin+0x5a>
     f08:	5f c0       	rjmp	.+190    	; 0xfc8 <GPIO_writePin+0x118>
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	09 f4       	brne	.+2      	; 0xf16 <GPIO_writePin+0x66>
     f14:	85 c0       	rjmp	.+266    	; 0x1020 <GPIO_writePin+0x170>
     f16:	af c0       	rjmp	.+350    	; 0x1076 <GPIO_writePin+0x1c6>
			{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	a1 f4       	brne	.+40     	; 0xf46 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
     f1e:	ab e3       	ldi	r26, 0x3B	; 59
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_writePin+0x8c>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_writePin+0x88>
     f40:	84 2b       	or	r24, r20
     f42:	8c 93       	st	X, r24
     f44:	98 c0       	rjmp	.+304    	; 0x1076 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
     f46:	ab e3       	ldi	r26, 0x3B	; 59
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	eb e3       	ldi	r30, 0x3B	; 59
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <GPIO_writePin+0xb4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <GPIO_writePin+0xb0>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	83 c0       	rjmp	.+262    	; 0x1076 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	a1 f4       	brne	.+40     	; 0xf9e <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
     f76:	a8 e3       	ldi	r26, 0x38	; 56
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e8 e3       	ldi	r30, 0x38	; 56
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <GPIO_writePin+0xe4>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <GPIO_writePin+0xe0>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	6c c0       	rjmp	.+216    	; 0x1076 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_writePin+0x10c>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_writePin+0x108>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	57 c0       	rjmp	.+174    	; 0x1076 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	81 30       	cpi	r24, 0x01	; 1
     fcc:	a1 f4       	brne	.+40     	; 0xff6 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
     fce:	a5 e3       	ldi	r26, 0x35	; 53
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e5 e3       	ldi	r30, 0x35	; 53
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_writePin+0x13c>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_writePin+0x138>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	40 c0       	rjmp	.+128    	; 0x1076 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <GPIO_writePin+0x164>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <GPIO_writePin+0x160>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	2b c0       	rjmp	.+86     	; 0x1076 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	81 30       	cpi	r24, 0x01	; 1
    1024:	a1 f4       	brne	.+40     	; 0x104e <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
    1026:	a2 e3       	ldi	r26, 0x32	; 50
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e2 e3       	ldi	r30, 0x32	; 50
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <GPIO_writePin+0x194>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <GPIO_writePin+0x190>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	14 c0       	rjmp	.+40     	; 0x1076 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
    104e:	a2 e3       	ldi	r26, 0x32	; 50
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e2 e3       	ldi	r30, 0x32	; 50
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <GPIO_writePin+0x1bc>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <GPIO_writePin+0x1b8>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
				break;
			}
		}


}
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	00 d0       	rcall	.+0      	; 0x108c <GPIO_readPin+0x6>
    108c:	00 d0       	rcall	.+0      	; 0x108e <GPIO_readPin+0x8>
    108e:	00 d0       	rcall	.+0      	; 0x1090 <GPIO_readPin+0xa>
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	18 f4       	brcc	.+6      	; 0x10a4 <GPIO_readPin+0x1e>
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	10 f0       	brcs	.+4      	; 0x10a8 <GPIO_readPin+0x22>
			{
				return 0;
    10a4:	1d 82       	std	Y+5, r1	; 0x05
    10a6:	82 c0       	rjmp	.+260    	; 0x11ac <GPIO_readPin+0x126>
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3c 83       	std	Y+4, r19	; 0x04
    10b0:	2b 83       	std	Y+3, r18	; 0x03
    10b2:	4b 81       	ldd	r20, Y+3	; 0x03
    10b4:	5c 81       	ldd	r21, Y+4	; 0x04
    10b6:	41 30       	cpi	r20, 0x01	; 1
    10b8:	51 05       	cpc	r21, r1
    10ba:	79 f1       	breq	.+94     	; 0x111a <GPIO_readPin+0x94>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	91 05       	cpc	r25, r1
    10c4:	34 f4       	brge	.+12     	; 0x10d2 <GPIO_readPin+0x4c>
    10c6:	2b 81       	ldd	r18, Y+3	; 0x03
    10c8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ca:	21 15       	cp	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	69 f0       	breq	.+26     	; 0x10ea <GPIO_readPin+0x64>
    10d0:	6c c0       	rjmp	.+216    	; 0x11aa <GPIO_readPin+0x124>
    10d2:	4b 81       	ldd	r20, Y+3	; 0x03
    10d4:	5c 81       	ldd	r21, Y+4	; 0x04
    10d6:	42 30       	cpi	r20, 0x02	; 2
    10d8:	51 05       	cpc	r21, r1
    10da:	b9 f1       	breq	.+110    	; 0x114a <GPIO_readPin+0xc4>
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	91 05       	cpc	r25, r1
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <GPIO_readPin+0x62>
    10e6:	49 c0       	rjmp	.+146    	; 0x117a <GPIO_readPin+0xf4>
    10e8:	60 c0       	rjmp	.+192    	; 0x11aa <GPIO_readPin+0x124>
				{
				case PORTA_ID:
					if(BIT_IS_SET(PINA,pin_num)){
    10ea:	e9 e3       	ldi	r30, 0x39	; 57
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a9 01       	movw	r20, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <GPIO_readPin+0x7c>
    10fe:	55 95       	asr	r21
    1100:	47 95       	ror	r20
    1102:	8a 95       	dec	r24
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <GPIO_readPin+0x78>
    1106:	ca 01       	movw	r24, r20
    1108:	81 70       	andi	r24, 0x01	; 1
    110a:	90 70       	andi	r25, 0x00	; 0
    110c:	88 23       	and	r24, r24
    110e:	19 f0       	breq	.+6      	; 0x1116 <GPIO_readPin+0x90>
						return LOGIC_HIGH;
    1110:	51 e0       	ldi	r21, 0x01	; 1
    1112:	5d 83       	std	Y+5, r21	; 0x05
    1114:	4b c0       	rjmp	.+150    	; 0x11ac <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
    1116:	1d 82       	std	Y+5, r1	; 0x05
    1118:	49 c0       	rjmp	.+146    	; 0x11ac <GPIO_readPin+0x126>
					}

					break;
				case PORTB_ID:
					if(BIT_IS_SET(PINB,pin_num)){
    111a:	e6 e3       	ldi	r30, 0x36	; 54
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <GPIO_readPin+0xac>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <GPIO_readPin+0xa8>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	90 70       	andi	r25, 0x00	; 0
    113c:	88 23       	and	r24, r24
    113e:	19 f0       	breq	.+6      	; 0x1146 <GPIO_readPin+0xc0>
						return LOGIC_HIGH;
    1140:	51 e0       	ldi	r21, 0x01	; 1
    1142:	5d 83       	std	Y+5, r21	; 0x05
    1144:	33 c0       	rjmp	.+102    	; 0x11ac <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
    1146:	1d 82       	std	Y+5, r1	; 0x05
    1148:	31 c0       	rjmp	.+98     	; 0x11ac <GPIO_readPin+0x126>
					}
					break;
				case PORTC_ID:
					if(BIT_IS_SET(PINC,pin_num)){
    114a:	e3 e3       	ldi	r30, 0x33	; 51
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	88 2f       	mov	r24, r24
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a9 01       	movw	r20, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_readPin+0xdc>
    115e:	55 95       	asr	r21
    1160:	47 95       	ror	r20
    1162:	8a 95       	dec	r24
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_readPin+0xd8>
    1166:	ca 01       	movw	r24, r20
    1168:	81 70       	andi	r24, 0x01	; 1
    116a:	90 70       	andi	r25, 0x00	; 0
    116c:	88 23       	and	r24, r24
    116e:	19 f0       	breq	.+6      	; 0x1176 <GPIO_readPin+0xf0>
						return LOGIC_HIGH;
    1170:	51 e0       	ldi	r21, 0x01	; 1
    1172:	5d 83       	std	Y+5, r21	; 0x05
    1174:	1b c0       	rjmp	.+54     	; 0x11ac <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
    1176:	1d 82       	std	Y+5, r1	; 0x05
    1178:	19 c0       	rjmp	.+50     	; 0x11ac <GPIO_readPin+0x126>
					}
					break;
				case PORTD_ID:
					if(BIT_IS_SET(PIND,pin_num)){
    117a:	e0 e3       	ldi	r30, 0x30	; 48
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <GPIO_readPin+0x10c>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <GPIO_readPin+0x108>
    1196:	ca 01       	movw	r24, r20
    1198:	81 70       	andi	r24, 0x01	; 1
    119a:	90 70       	andi	r25, 0x00	; 0
    119c:	88 23       	and	r24, r24
    119e:	19 f0       	breq	.+6      	; 0x11a6 <GPIO_readPin+0x120>
						return LOGIC_HIGH;
    11a0:	51 e0       	ldi	r21, 0x01	; 1
    11a2:	5d 83       	std	Y+5, r21	; 0x05
    11a4:	03 c0       	rjmp	.+6      	; 0x11ac <GPIO_readPin+0x126>
					}else{
						return LOGIC_LOW;
    11a6:	1d 82       	std	Y+5, r1	; 0x05
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <GPIO_readPin+0x126>
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <GPIO_readPin+0x12a>
					}
					break;
				}
			}

}
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	8e 83       	std	Y+6, r24	; 0x06
    11b0:	8e 81       	ldd	r24, Y+6	; 0x06
    11b2:	26 96       	adiw	r28, 0x06	; 6
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <GPIO_setupPortDirection+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_setupPortDirection+0x8>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	84 30       	cpi	r24, 0x04	; 4
    11d8:	90 f5       	brcc	.+100    	; 0x123e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3c 83       	std	Y+4, r19	; 0x04
    11e2:	2b 83       	std	Y+3, r18	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	d1 f0       	breq	.+52     	; 0x1222 <GPIO_setupPortDirection+0x5e>
    11ee:	2b 81       	ldd	r18, Y+3	; 0x03
    11f0:	3c 81       	ldd	r19, Y+4	; 0x04
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <GPIO_setupPortDirection+0x3e>
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	61 f0       	breq	.+24     	; 0x1218 <GPIO_setupPortDirection+0x54>
    1200:	1e c0       	rjmp	.+60     	; 0x123e <GPIO_setupPortDirection+0x7a>
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <GPIO_setupPortDirection+0x68>
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	81 f0       	breq	.+32     	; 0x1236 <GPIO_setupPortDirection+0x72>
    1216:	13 c0       	rjmp	.+38     	; 0x123e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1218:	ea e3       	ldi	r30, 0x3A	; 58
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	80 83       	st	Z, r24
    1220:	0e c0       	rjmp	.+28     	; 0x123e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1222:	e7 e3       	ldi	r30, 0x37	; 55
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	80 83       	st	Z, r24
    122a:	09 c0       	rjmp	.+18     	; 0x123e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    122c:	e4 e3       	ldi	r30, 0x34	; 52
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 83       	st	Z, r24
    1234:	04 c0       	rjmp	.+8      	; 0x123e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1236:	e1 e3       	ldi	r30, 0x31	; 49
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 83       	st	Z, r24
			break;
		}
	}
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <GPIO_writePort+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_writePort+0x8>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	84 30       	cpi	r24, 0x04	; 4
    1260:	90 f5       	brcc	.+100    	; 0x12c6 <GPIO_writePort+0x7a>
				/* Do Nothing */
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3c 83       	std	Y+4, r19	; 0x04
    126a:	2b 83       	std	Y+3, r18	; 0x03
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	91 05       	cpc	r25, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <GPIO_writePort+0x5e>
    1276:	2b 81       	ldd	r18, Y+3	; 0x03
    1278:	3c 81       	ldd	r19, Y+4	; 0x04
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	2c f4       	brge	.+10     	; 0x128a <GPIO_writePort+0x3e>
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	9c 81       	ldd	r25, Y+4	; 0x04
    1284:	00 97       	sbiw	r24, 0x00	; 0
    1286:	61 f0       	breq	.+24     	; 0x12a0 <GPIO_writePort+0x54>
    1288:	1e c0       	rjmp	.+60     	; 0x12c6 <GPIO_writePort+0x7a>
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	3c 81       	ldd	r19, Y+4	; 0x04
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	81 f0       	breq	.+32     	; 0x12b4 <GPIO_writePort+0x68>
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	83 30       	cpi	r24, 0x03	; 3
    129a:	91 05       	cpc	r25, r1
    129c:	81 f0       	breq	.+32     	; 0x12be <GPIO_writePort+0x72>
    129e:	13 c0       	rjmp	.+38     	; 0x12c6 <GPIO_writePort+0x7a>
				{
				case PORTA_ID:
					PORTA = value;
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
    12a8:	0e c0       	rjmp	.+28     	; 0x12c6 <GPIO_writePort+0x7a>
					break;
				case PORTB_ID:
					PORTB = value;
    12aa:	e8 e3       	ldi	r30, 0x38	; 56
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	80 83       	st	Z, r24
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <GPIO_writePort+0x7a>
					break;
				case PORTC_ID:
					PORTC = value;
    12b4:	e5 e3       	ldi	r30, 0x35	; 53
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	80 83       	st	Z, r24
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <GPIO_writePort+0x7a>
					break;
				case PORTD_ID:
					PORTD = value;
    12be:	e2 e3       	ldi	r30, 0x32	; 50
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
					break;
				}
			}
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	00 d0       	rcall	.+0      	; 0x12da <GPIO_readPort+0x6>
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_readPort+0x8>
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	84 30       	cpi	r24, 0x04	; 4
    12e8:	10 f0       	brcs	.+4      	; 0x12ee <GPIO_readPort+0x1a>
				{
					return 0;
    12ea:	1c 82       	std	Y+4, r1	; 0x04
    12ec:	34 c0       	rjmp	.+104    	; 0x1356 <GPIO_readPort+0x82>
				}
				else
				{
					/* Setup the pin direction as required */
					switch(port_num)
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3b 83       	std	Y+3, r19	; 0x03
    12f6:	2a 83       	std	Y+2, r18	; 0x02
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	9b 81       	ldd	r25, Y+3	; 0x03
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	91 05       	cpc	r25, r1
    1300:	d1 f0       	breq	.+52     	; 0x1336 <GPIO_readPort+0x62>
    1302:	2a 81       	ldd	r18, Y+2	; 0x02
    1304:	3b 81       	ldd	r19, Y+3	; 0x03
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	2c f4       	brge	.+10     	; 0x1316 <GPIO_readPort+0x42>
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	61 f0       	breq	.+24     	; 0x132c <GPIO_readPort+0x58>
    1314:	1f c0       	rjmp	.+62     	; 0x1354 <GPIO_readPort+0x80>
    1316:	2a 81       	ldd	r18, Y+2	; 0x02
    1318:	3b 81       	ldd	r19, Y+3	; 0x03
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	81 f0       	breq	.+32     	; 0x1340 <GPIO_readPort+0x6c>
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	9b 81       	ldd	r25, Y+3	; 0x03
    1324:	83 30       	cpi	r24, 0x03	; 3
    1326:	91 05       	cpc	r25, r1
    1328:	81 f0       	breq	.+32     	; 0x134a <GPIO_readPort+0x76>
    132a:	14 c0       	rjmp	.+40     	; 0x1354 <GPIO_readPort+0x80>
					{
					case PORTA_ID:
						return PINA;
    132c:	e9 e3       	ldi	r30, 0x39	; 57
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	90 81       	ld	r25, Z
    1332:	9c 83       	std	Y+4, r25	; 0x04
    1334:	10 c0       	rjmp	.+32     	; 0x1356 <GPIO_readPort+0x82>

						break;
					case PORTB_ID:
						return PINB;
    1336:	e6 e3       	ldi	r30, 0x36	; 54
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	20 81       	ld	r18, Z
    133c:	2c 83       	std	Y+4, r18	; 0x04
    133e:	0b c0       	rjmp	.+22     	; 0x1356 <GPIO_readPort+0x82>
						break;
					case PORTC_ID:
						return PINC;
    1340:	e3 e3       	ldi	r30, 0x33	; 51
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	30 81       	ld	r19, Z
    1346:	3c 83       	std	Y+4, r19	; 0x04
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <GPIO_readPort+0x82>
						break;
					case PORTD_ID:
						return PIND;
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8c 83       	std	Y+4, r24	; 0x04
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <GPIO_readPort+0x82>
    1354:	02 c0       	rjmp	.+4      	; 0x135a <GPIO_readPort+0x86>
						break;
					}
				}
}
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	9d 83       	std	Y+5, r25	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <main>:
void Timer_Counter(void);

TIMER_ConfigType config_timePtr = {NORMAL,INIT_0,0,F_CPU_1024};

int main(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	ad 97       	sbiw	r28, 0x2d	; 45
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
	TIMER_setCallBack(Timer_Counter);
    1380:	8b ea       	ldi	r24, 0xAB	; 171
    1382:	92 e1       	ldi	r25, 0x12	; 18
    1384:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <TIMER_setCallBack>

	/* Initialize the MOTOR & BUZZER Driver */
	BUZZER_Init();
    1388:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_Init>
	DcMotor_init();
    138c:	0e 94 ca 12 	call	0x2594	; 0x2594 <DcMotor_init>

	/* Initialize the LCD Driver for tests*/
	//LCD_init();

	/* Initialize the TWI/I2C Driver */
	const TWI_ConfigType Config_Ptr = {PRESCALER_1};
    1390:	1b a6       	std	Y+43, r1	; 0x2b
	TWI_init(&Config_Ptr);
    1392:	ce 01       	movw	r24, r28
    1394:	8b 96       	adiw	r24, 0x2b	; 43
    1396:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <TWI_init>


	/* Initialize the UART Driver */
    UART_ConfigType *PTR2 ;
	PTR2->synchType = ASYNCHRONOUS;
    139a:	ec a5       	ldd	r30, Y+44	; 0x2c
    139c:	fd a5       	ldd	r31, Y+45	; 0x2d
    139e:	10 82       	st	Z, r1
	PTR2->baud_rate = RATE_9600;
    13a0:	ec a5       	ldd	r30, Y+44	; 0x2c
    13a2:	fd a5       	ldd	r31, Y+45	; 0x2d
    13a4:	80 e8       	ldi	r24, 0x80	; 128
    13a6:	95 e2       	ldi	r25, 0x25	; 37
    13a8:	92 83       	std	Z+2, r25	; 0x02
    13aa:	81 83       	std	Z+1, r24	; 0x01
	PTR2->parity = ENABLED_EVEN;
    13ac:	ec a5       	ldd	r30, Y+44	; 0x2c
    13ae:	fd a5       	ldd	r31, Y+45	; 0x2d
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	83 83       	std	Z+3, r24	; 0x03
	PTR2->stop = STOP_2bit;
    13b4:	ec a5       	ldd	r30, Y+44	; 0x2c
    13b6:	fd a5       	ldd	r31, Y+45	; 0x2d
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	84 83       	std	Z+4, r24	; 0x04
	PTR2->bitNumber = BitNumber_8;
    13bc:	ec a5       	ldd	r30, Y+44	; 0x2c
    13be:	fd a5       	ldd	r31, Y+45	; 0x2d
    13c0:	83 e0       	ldi	r24, 0x03	; 3
    13c2:	85 83       	std	Z+5, r24	; 0x05
	UART_init((UART_ConfigType*)&PTR2);
    13c4:	ce 01       	movw	r24, r28
    13c6:	8c 96       	adiw	r24, 0x2c	; 44
    13c8:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <UART_init>


/************************************************************************************/
/*                      SAVE IN MEMORY THE FIRST PASSWORD                           */
/************************************************************************************/
	savePassMC2();
    13cc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>
	saveInMemory();
    13d0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <saveInMemory>
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	aa ef       	ldi	r26, 0xFA	; 250
    13da:	b4 e4       	ldi	r27, 0x44	; 68
    13dc:	8f a3       	std	Y+39, r24	; 0x27
    13de:	98 a7       	std	Y+40, r25	; 0x28
    13e0:	a9 a7       	std	Y+41, r26	; 0x29
    13e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e4:	6f a1       	ldd	r22, Y+39	; 0x27
    13e6:	78 a5       	ldd	r23, Y+40	; 0x28
    13e8:	89 a5       	ldd	r24, Y+41	; 0x29
    13ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a ef       	ldi	r20, 0xFA	; 250
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	8b a3       	std	Y+35, r24	; 0x23
    13fe:	9c a3       	std	Y+36, r25	; 0x24
    1400:	ad a3       	std	Y+37, r26	; 0x25
    1402:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1404:	6b a1       	ldd	r22, Y+35	; 0x23
    1406:	7c a1       	ldd	r23, Y+36	; 0x24
    1408:	8d a1       	ldd	r24, Y+37	; 0x25
    140a:	9e a1       	ldd	r25, Y+38	; 0x26
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	2c f4       	brge	.+10     	; 0x1426 <main+0xba>
		__ticks = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9a a3       	std	Y+34, r25	; 0x22
    1422:	89 a3       	std	Y+33, r24	; 0x21
    1424:	3f c0       	rjmp	.+126    	; 0x14a4 <main+0x138>
	else if (__tmp > 65535)
    1426:	6b a1       	ldd	r22, Y+35	; 0x23
    1428:	7c a1       	ldd	r23, Y+36	; 0x24
    142a:	8d a1       	ldd	r24, Y+37	; 0x25
    142c:	9e a1       	ldd	r25, Y+38	; 0x26
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	4c f5       	brge	.+82     	; 0x1490 <main+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143e:	6f a1       	ldd	r22, Y+39	; 0x27
    1440:	78 a5       	ldd	r23, Y+40	; 0x28
    1442:	89 a5       	ldd	r24, Y+41	; 0x29
    1444:	9a a5       	ldd	r25, Y+42	; 0x2a
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9a a3       	std	Y+34, r25	; 0x22
    1464:	89 a3       	std	Y+33, r24	; 0x21
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <main+0x11a>
    1468:	88 ec       	ldi	r24, 0xC8	; 200
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	98 a3       	std	Y+32, r25	; 0x20
    146e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1470:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1472:	98 a1       	ldd	r25, Y+32	; 0x20
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <main+0x108>
    1478:	98 a3       	std	Y+32, r25	; 0x20
    147a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	89 a1       	ldd	r24, Y+33	; 0x21
    147e:	9a a1       	ldd	r25, Y+34	; 0x22
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	9a a3       	std	Y+34, r25	; 0x22
    1484:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	89 a1       	ldd	r24, Y+33	; 0x21
    1488:	9a a1       	ldd	r25, Y+34	; 0x22
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	69 f7       	brne	.-38     	; 0x1468 <main+0xfc>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	9a a3       	std	Y+34, r25	; 0x22
    14a2:	89 a3       	std	Y+33, r24	; 0x21
    14a4:	89 a1       	ldd	r24, Y+33	; 0x21
    14a6:	9a a1       	ldd	r25, Y+34	; 0x22
    14a8:	9e 8f       	std	Y+30, r25	; 0x1e
    14aa:	8d 8f       	std	Y+29, r24	; 0x1d
    14ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <main+0x144>
    14b4:	9e 8f       	std	Y+30, r25	; 0x1e
    14b6:	8d 8f       	std	Y+29, r24	; 0x1d

	while(1)
	{
		_delay_ms(2000);
		//openDoorMC2();
		data = UART_recieveByte();
    14b8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    14bc:	80 93 70 00 	sts	0x0070, r24
		if(data == 1){
    14c0:	80 91 70 00 	lds	r24, 0x0070
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	09 f0       	breq	.+2      	; 0x14ca <main+0x15e>
    14c8:	78 c0       	rjmp	.+240    	; 0x15ba <main+0x24e>
		/*	LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"OPEN COMMAND");*/
			UART_sendByte(ACK);
    14ca:	89 e0       	ldi	r24, 0x09	; 9
    14cc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a8 ec       	ldi	r26, 0xC8	; 200
    14d6:	b2 e4       	ldi	r27, 0x42	; 66
    14d8:	89 8f       	std	Y+25, r24	; 0x19
    14da:	9a 8f       	std	Y+26, r25	; 0x1a
    14dc:	ab 8f       	std	Y+27, r26	; 0x1b
    14de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e0:	69 8d       	ldd	r22, Y+25	; 0x19
    14e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	4a ef       	ldi	r20, 0xFA	; 250
    14ee:	54 e4       	ldi	r21, 0x44	; 68
    14f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f4:	dc 01       	movw	r26, r24
    14f6:	cb 01       	movw	r24, r22
    14f8:	8d 8b       	std	Y+21, r24	; 0x15
    14fa:	9e 8b       	std	Y+22, r25	; 0x16
    14fc:	af 8b       	std	Y+23, r26	; 0x17
    14fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1500:	6d 89       	ldd	r22, Y+21	; 0x15
    1502:	7e 89       	ldd	r23, Y+22	; 0x16
    1504:	8f 89       	ldd	r24, Y+23	; 0x17
    1506:	98 8d       	ldd	r25, Y+24	; 0x18
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	5f e3       	ldi	r21, 0x3F	; 63
    1510:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1514:	88 23       	and	r24, r24
    1516:	2c f4       	brge	.+10     	; 0x1522 <main+0x1b6>
		__ticks = 1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9c 8b       	std	Y+20, r25	; 0x14
    151e:	8b 8b       	std	Y+19, r24	; 0x13
    1520:	3f c0       	rjmp	.+126    	; 0x15a0 <main+0x234>
	else if (__tmp > 65535)
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	4f e7       	ldi	r20, 0x7F	; 127
    1530:	57 e4       	ldi	r21, 0x47	; 71
    1532:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1536:	18 16       	cp	r1, r24
    1538:	4c f5       	brge	.+82     	; 0x158c <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153a:	69 8d       	ldd	r22, Y+25	; 0x19
    153c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	40 e2       	ldi	r20, 0x20	; 32
    1548:	51 e4       	ldi	r21, 0x41	; 65
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	9c 8b       	std	Y+20, r25	; 0x14
    1560:	8b 8b       	std	Y+19, r24	; 0x13
    1562:	0f c0       	rjmp	.+30     	; 0x1582 <main+0x216>
    1564:	88 ec       	ldi	r24, 0xC8	; 200
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	9a 8b       	std	Y+18, r25	; 0x12
    156a:	89 8b       	std	Y+17, r24	; 0x11
    156c:	89 89       	ldd	r24, Y+17	; 0x11
    156e:	9a 89       	ldd	r25, Y+18	; 0x12
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <main+0x204>
    1574:	9a 8b       	std	Y+18, r25	; 0x12
    1576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1578:	8b 89       	ldd	r24, Y+19	; 0x13
    157a:	9c 89       	ldd	r25, Y+20	; 0x14
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 8b       	std	Y+20, r25	; 0x14
    1580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1582:	8b 89       	ldd	r24, Y+19	; 0x13
    1584:	9c 89       	ldd	r25, Y+20	; 0x14
    1586:	00 97       	sbiw	r24, 0x00	; 0
    1588:	69 f7       	brne	.-38     	; 0x1564 <main+0x1f8>
    158a:	14 c0       	rjmp	.+40     	; 0x15b4 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158c:	6d 89       	ldd	r22, Y+21	; 0x15
    158e:	7e 89       	ldd	r23, Y+22	; 0x16
    1590:	8f 89       	ldd	r24, Y+23	; 0x17
    1592:	98 8d       	ldd	r25, Y+24	; 0x18
    1594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 8b       	std	Y+20, r25	; 0x14
    159e:	8b 8b       	std	Y+19, r24	; 0x13
    15a0:	8b 89       	ldd	r24, Y+19	; 0x13
    15a2:	9c 89       	ldd	r25, Y+20	; 0x14
    15a4:	98 8b       	std	Y+16, r25	; 0x10
    15a6:	8f 87       	std	Y+15, r24	; 0x0f
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	98 89       	ldd	r25, Y+16	; 0x10
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <main+0x240>
    15b0:	98 8b       	std	Y+16, r25	; 0x10
    15b2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			openDoorMC2();
    15b4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <openDoorMC2>
    15b8:	0d cf       	rjmp	.-486    	; 0x13d4 <main+0x68>

		}
		else if(data == 2){
    15ba:	80 91 70 00 	lds	r24, 0x0070
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <main+0x258>
    15c2:	08 cf       	rjmp	.-496    	; 0x13d4 <main+0x68>
		/*	LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"Chnge COMMAND");*/
			UART_sendByte(ACK);
    15c4:	89 e0       	ldi	r24, 0x09	; 9
    15c6:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a8 ec       	ldi	r26, 0xC8	; 200
    15d0:	b2 e4       	ldi	r27, 0x42	; 66
    15d2:	8b 87       	std	Y+11, r24	; 0x0b
    15d4:	9c 87       	std	Y+12, r25	; 0x0c
    15d6:	ad 87       	std	Y+13, r26	; 0x0d
    15d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15da:	6b 85       	ldd	r22, Y+11	; 0x0b
    15dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15de:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	4a ef       	ldi	r20, 0xFA	; 250
    15e8:	54 e4       	ldi	r21, 0x44	; 68
    15ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	8f 83       	std	Y+7, r24	; 0x07
    15f4:	98 87       	std	Y+8, r25	; 0x08
    15f6:	a9 87       	std	Y+9, r26	; 0x09
    15f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fa:	6f 81       	ldd	r22, Y+7	; 0x07
    15fc:	78 85       	ldd	r23, Y+8	; 0x08
    15fe:	89 85       	ldd	r24, Y+9	; 0x09
    1600:	9a 85       	ldd	r25, Y+10	; 0x0a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e8       	ldi	r20, 0x80	; 128
    1608:	5f e3       	ldi	r21, 0x3F	; 63
    160a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    160e:	88 23       	and	r24, r24
    1610:	2c f4       	brge	.+10     	; 0x161c <main+0x2b0>
		__ticks = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	3f c0       	rjmp	.+126    	; 0x169a <main+0x32e>
	else if (__tmp > 65535)
    161c:	6f 81       	ldd	r22, Y+7	; 0x07
    161e:	78 85       	ldd	r23, Y+8	; 0x08
    1620:	89 85       	ldd	r24, Y+9	; 0x09
    1622:	9a 85       	ldd	r25, Y+10	; 0x0a
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	3f ef       	ldi	r19, 0xFF	; 255
    1628:	4f e7       	ldi	r20, 0x7F	; 127
    162a:	57 e4       	ldi	r21, 0x47	; 71
    162c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1630:	18 16       	cp	r1, r24
    1632:	4c f5       	brge	.+82     	; 0x1686 <main+0x31a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1634:	6b 85       	ldd	r22, Y+11	; 0x0b
    1636:	7c 85       	ldd	r23, Y+12	; 0x0c
    1638:	8d 85       	ldd	r24, Y+13	; 0x0d
    163a:	9e 85       	ldd	r25, Y+14	; 0x0e
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	51 e4       	ldi	r21, 0x41	; 65
    1644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1648:	dc 01       	movw	r26, r24
    164a:	cb 01       	movw	r24, r22
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	9e 83       	std	Y+6, r25	; 0x06
    165a:	8d 83       	std	Y+5, r24	; 0x05
    165c:	0f c0       	rjmp	.+30     	; 0x167c <main+0x310>
    165e:	88 ec       	ldi	r24, 0xC8	; 200
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	9c 83       	std	Y+4, r25	; 0x04
    1664:	8b 83       	std	Y+3, r24	; 0x03
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	f1 f7       	brne	.-4      	; 0x166a <main+0x2fe>
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	9e 83       	std	Y+6, r25	; 0x06
    167a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	69 f7       	brne	.-38     	; 0x165e <main+0x2f2>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <main+0x342>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9e 83       	std	Y+6, r25	; 0x06
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	9a 81       	ldd	r25, Y+2	; 0x02
    16a6:	01 97       	sbiw	r24, 0x01	; 1
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <main+0x33a>
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			changePassMC2();
    16ae:	0e 94 2e 11 	call	0x225c	; 0x225c <changePassMC2>
    16b2:	90 ce       	rjmp	.-736    	; 0x13d4 <main+0x68>

000016b4 <savePassMC2>:

}


}
void savePassMC2(void){
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	2e 97       	sbiw	r28, 0x0e	; 14
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte() != MC1_DONE){};
    16c8:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    16cc:	81 31       	cpi	r24, 0x11	; 17
    16ce:	e1 f7       	brne	.-8      	; 0x16c8 <savePassMC2+0x14>
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e2       	ldi	r26, 0x20	; 32
    16d6:	b1 e4       	ldi	r27, 0x41	; 65
    16d8:	8b 87       	std	Y+11, r24	; 0x0b
    16da:	9c 87       	std	Y+12, r25	; 0x0c
    16dc:	ad 87       	std	Y+13, r26	; 0x0d
    16de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	4a ef       	ldi	r20, 0xFA	; 250
    16ee:	54 e4       	ldi	r21, 0x44	; 68
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	8f 83       	std	Y+7, r24	; 0x07
    16fa:	98 87       	std	Y+8, r25	; 0x08
    16fc:	a9 87       	std	Y+9, r26	; 0x09
    16fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1700:	6f 81       	ldd	r22, Y+7	; 0x07
    1702:	78 85       	ldd	r23, Y+8	; 0x08
    1704:	89 85       	ldd	r24, Y+9	; 0x09
    1706:	9a 85       	ldd	r25, Y+10	; 0x0a
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1714:	88 23       	and	r24, r24
    1716:	2c f4       	brge	.+10     	; 0x1722 <savePassMC2+0x6e>
		__ticks = 1;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	3f c0       	rjmp	.+126    	; 0x17a0 <savePassMC2+0xec>
	else if (__tmp > 65535)
    1722:	6f 81       	ldd	r22, Y+7	; 0x07
    1724:	78 85       	ldd	r23, Y+8	; 0x08
    1726:	89 85       	ldd	r24, Y+9	; 0x09
    1728:	9a 85       	ldd	r25, Y+10	; 0x0a
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	4c f5       	brge	.+82     	; 0x178c <savePassMC2+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e2       	ldi	r20, 0x20	; 32
    1748:	51 e4       	ldi	r21, 0x41	; 65
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	9e 83       	std	Y+6, r25	; 0x06
    1760:	8d 83       	std	Y+5, r24	; 0x05
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <savePassMC2+0xce>
    1764:	88 ec       	ldi	r24, 0xC8	; 200
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9c 83       	std	Y+4, r25	; 0x04
    176a:	8b 83       	std	Y+3, r24	; 0x03
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <savePassMC2+0xbc>
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	9e 83       	std	Y+6, r25	; 0x06
    1780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f7       	brne	.-38     	; 0x1764 <savePassMC2+0xb0>
    178a:	14 c0       	rjmp	.+40     	; 0x17b4 <savePassMC2+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	89 85       	ldd	r24, Y+9	; 0x09
    1792:	9a 85       	ldd	r25, Y+10	; 0x0a
    1794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	9e 81       	ldd	r25, Y+6	; 0x06
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <savePassMC2+0xf8>
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendByte(MC2_READY);
    17b4:	89 e1       	ldi	r24, 0x19	; 25
    17b6:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
	passArray[0] = UART_recieveByte();
    17ba:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    17be:	80 93 7e 00 	sts	0x007E, r24
//	_delay_ms(100);
/*	LCD_moveCursor(1, 0);
	LCD_intgerToString(passArray[0]);*/
	passArray[1] = UART_recieveByte();
    17c2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    17c6:	80 93 7f 00 	sts	0x007F, r24
//	_delay_ms(100);
/*	LCD_moveCursor(1, 1);
	LCD_intgerToString(passArray[1]);*/
	passArray[2] = UART_recieveByte();
    17ca:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    17ce:	80 93 80 00 	sts	0x0080, r24
//	_delay_ms(100);
/*	LCD_moveCursor(1, 2);
	LCD_intgerToString(passArray[2]);*/
	passArray[3] = UART_recieveByte();
    17d2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    17d6:	80 93 81 00 	sts	0x0081, r24
//	_delay_ms(100);
/*	LCD_moveCursor(1, 3);
	LCD_intgerToString(passArray[3]);*/
	passArray[4] = UART_recieveByte();
    17da:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    17de:	80 93 82 00 	sts	0x0082, r24
//	_delay_ms(100);
/*	LCD_moveCursor(1, 4);
	LCD_intgerToString(passArray[4]);*/
}
    17e2:	2e 96       	adiw	r28, 0x0e	; 14
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	cf 91       	pop	r28
    17f0:	df 91       	pop	r29
    17f2:	08 95       	ret

000017f4 <saveInMemory>:
void saveInMemory(void){
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	e8 97       	sbiw	r28, 0x38	; 56
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	cd bf       	out	0x3d, r28	; 61
	EEPROM_writeByte(0x0311 , passArray[0]);
    1808:	20 91 7e 00 	lds	r18, 0x007E
    180c:	81 e1       	ldi	r24, 0x11	; 17
    180e:	93 e0       	ldi	r25, 0x03	; 3
    1810:	62 2f       	mov	r22, r18
    1812:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e2       	ldi	r26, 0x20	; 32
    181c:	b1 e4       	ldi	r27, 0x41	; 65
    181e:	8d ab       	std	Y+53, r24	; 0x35
    1820:	9e ab       	std	Y+54, r25	; 0x36
    1822:	af ab       	std	Y+55, r26	; 0x37
    1824:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6d a9       	ldd	r22, Y+53	; 0x35
    1828:	7e a9       	ldd	r23, Y+54	; 0x36
    182a:	8f a9       	ldd	r24, Y+55	; 0x37
    182c:	98 ad       	ldd	r25, Y+56	; 0x38
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	89 ab       	std	Y+49, r24	; 0x31
    1840:	9a ab       	std	Y+50, r25	; 0x32
    1842:	ab ab       	std	Y+51, r26	; 0x33
    1844:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1846:	69 a9       	ldd	r22, Y+49	; 0x31
    1848:	7a a9       	ldd	r23, Y+50	; 0x32
    184a:	8b a9       	ldd	r24, Y+51	; 0x33
    184c:	9c a9       	ldd	r25, Y+52	; 0x34
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <saveInMemory+0x74>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <saveInMemory+0xf2>
	else if (__tmp > 65535)
    1868:	69 a9       	ldd	r22, Y+49	; 0x31
    186a:	7a a9       	ldd	r23, Y+50	; 0x32
    186c:	8b a9       	ldd	r24, Y+51	; 0x33
    186e:	9c a9       	ldd	r25, Y+52	; 0x34
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <saveInMemory+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6d a9       	ldd	r22, Y+53	; 0x35
    1882:	7e a9       	ldd	r23, Y+54	; 0x36
    1884:	8f a9       	ldd	r24, Y+55	; 0x37
    1886:	98 ad       	ldd	r25, Y+56	; 0x38
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	98 ab       	std	Y+48, r25	; 0x30
    18a6:	8f a7       	std	Y+47, r24	; 0x2f
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <saveInMemory+0xd4>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e a7       	std	Y+46, r25	; 0x2e
    18b0:	8d a7       	std	Y+45, r24	; 0x2d
    18b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    18b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <saveInMemory+0xc2>
    18ba:	9e a7       	std	Y+46, r25	; 0x2e
    18bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c0:	98 a9       	ldd	r25, Y+48	; 0x30
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	98 ab       	std	Y+48, r25	; 0x30
    18c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ca:	98 a9       	ldd	r25, Y+48	; 0x30
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <saveInMemory+0xb6>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <saveInMemory+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	69 a9       	ldd	r22, Y+49	; 0x31
    18d4:	7a a9       	ldd	r23, Y+50	; 0x32
    18d6:	8b a9       	ldd	r24, Y+51	; 0x33
    18d8:	9c a9       	ldd	r25, Y+52	; 0x34
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	98 ab       	std	Y+48, r25	; 0x30
    18e4:	8f a7       	std	Y+47, r24	; 0x2f
    18e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ea:	9c a7       	std	Y+44, r25	; 0x2c
    18ec:	8b a7       	std	Y+43, r24	; 0x2b
    18ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    18f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <saveInMemory+0xfe>
    18f6:	9c a7       	std	Y+44, r25	; 0x2c
    18f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_writeByte(0x0322 , passArray[1]);
    18fa:	20 91 7f 00 	lds	r18, 0x007F
    18fe:	82 e2       	ldi	r24, 0x22	; 34
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	62 2f       	mov	r22, r18
    1904:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e2       	ldi	r26, 0x20	; 32
    190e:	b1 e4       	ldi	r27, 0x41	; 65
    1910:	8f a3       	std	Y+39, r24	; 0x27
    1912:	98 a7       	std	Y+40, r25	; 0x28
    1914:	a9 a7       	std	Y+41, r26	; 0x29
    1916:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6f a1       	ldd	r22, Y+39	; 0x27
    191a:	78 a5       	ldd	r23, Y+40	; 0x28
    191c:	89 a5       	ldd	r24, Y+41	; 0x29
    191e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8b a3       	std	Y+35, r24	; 0x23
    1932:	9c a3       	std	Y+36, r25	; 0x24
    1934:	ad a3       	std	Y+37, r26	; 0x25
    1936:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1938:	6b a1       	ldd	r22, Y+35	; 0x23
    193a:	7c a1       	ldd	r23, Y+36	; 0x24
    193c:	8d a1       	ldd	r24, Y+37	; 0x25
    193e:	9e a1       	ldd	r25, Y+38	; 0x26
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <saveInMemory+0x166>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <saveInMemory+0x1e4>
	else if (__tmp > 65535)
    195a:	6b a1       	ldd	r22, Y+35	; 0x23
    195c:	7c a1       	ldd	r23, Y+36	; 0x24
    195e:	8d a1       	ldd	r24, Y+37	; 0x25
    1960:	9e a1       	ldd	r25, Y+38	; 0x26
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <saveInMemory+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6f a1       	ldd	r22, Y+39	; 0x27
    1974:	78 a5       	ldd	r23, Y+40	; 0x28
    1976:	89 a5       	ldd	r24, Y+41	; 0x29
    1978:	9a a5       	ldd	r25, Y+42	; 0x2a
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	9a a3       	std	Y+34, r25	; 0x22
    1998:	89 a3       	std	Y+33, r24	; 0x21
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <saveInMemory+0x1c6>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	98 a3       	std	Y+32, r25	; 0x20
    19a2:	8f 8f       	std	Y+31, r24	; 0x1f
    19a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19a6:	98 a1       	ldd	r25, Y+32	; 0x20
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <saveInMemory+0x1b4>
    19ac:	98 a3       	std	Y+32, r25	; 0x20
    19ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	89 a1       	ldd	r24, Y+33	; 0x21
    19b2:	9a a1       	ldd	r25, Y+34	; 0x22
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	9a a3       	std	Y+34, r25	; 0x22
    19b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	89 a1       	ldd	r24, Y+33	; 0x21
    19bc:	9a a1       	ldd	r25, Y+34	; 0x22
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <saveInMemory+0x1a8>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <saveInMemory+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	6b a1       	ldd	r22, Y+35	; 0x23
    19c6:	7c a1       	ldd	r23, Y+36	; 0x24
    19c8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ca:	9e a1       	ldd	r25, Y+38	; 0x26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9a a3       	std	Y+34, r25	; 0x22
    19d6:	89 a3       	std	Y+33, r24	; 0x21
    19d8:	89 a1       	ldd	r24, Y+33	; 0x21
    19da:	9a a1       	ldd	r25, Y+34	; 0x22
    19dc:	9e 8f       	std	Y+30, r25	; 0x1e
    19de:	8d 8f       	std	Y+29, r24	; 0x1d
    19e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <saveInMemory+0x1f0>
    19e8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_writeByte(0x0333 , passArray[2]);
    19ec:	20 91 80 00 	lds	r18, 0x0080
    19f0:	83 e3       	ldi	r24, 0x33	; 51
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	62 2f       	mov	r22, r18
    19f6:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a0 e2       	ldi	r26, 0x20	; 32
    1a00:	b1 e4       	ldi	r27, 0x41	; 65
    1a02:	89 8f       	std	Y+25, r24	; 0x19
    1a04:	9a 8f       	std	Y+26, r25	; 0x1a
    1a06:	ab 8f       	std	Y+27, r26	; 0x1b
    1a08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4a ef       	ldi	r20, 0xFA	; 250
    1a18:	54 e4       	ldi	r21, 0x44	; 68
    1a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	8d 8b       	std	Y+21, r24	; 0x15
    1a24:	9e 8b       	std	Y+22, r25	; 0x16
    1a26:	af 8b       	std	Y+23, r26	; 0x17
    1a28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e8       	ldi	r20, 0x80	; 128
    1a38:	5f e3       	ldi	r21, 0x3F	; 63
    1a3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3e:	88 23       	and	r24, r24
    1a40:	2c f4       	brge	.+10     	; 0x1a4c <saveInMemory+0x258>
		__ticks = 1;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	9c 8b       	std	Y+20, r25	; 0x14
    1a48:	8b 8b       	std	Y+19, r24	; 0x13
    1a4a:	3f c0       	rjmp	.+126    	; 0x1aca <saveInMemory+0x2d6>
	else if (__tmp > 65535)
    1a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a50:	8f 89       	ldd	r24, Y+23	; 0x17
    1a52:	98 8d       	ldd	r25, Y+24	; 0x18
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	3f ef       	ldi	r19, 0xFF	; 255
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	57 e4       	ldi	r21, 0x47	; 71
    1a5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	4c f5       	brge	.+82     	; 0x1ab6 <saveInMemory+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a64:	69 8d       	ldd	r22, Y+25	; 0x19
    1a66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e2       	ldi	r20, 0x20	; 32
    1a72:	51 e4       	ldi	r21, 0x41	; 65
    1a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	bc 01       	movw	r22, r24
    1a7e:	cd 01       	movw	r24, r26
    1a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	9c 8b       	std	Y+20, r25	; 0x14
    1a8a:	8b 8b       	std	Y+19, r24	; 0x13
    1a8c:	0f c0       	rjmp	.+30     	; 0x1aac <saveInMemory+0x2b8>
    1a8e:	88 ec       	ldi	r24, 0xC8	; 200
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9a 8b       	std	Y+18, r25	; 0x12
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	89 89       	ldd	r24, Y+17	; 0x11
    1a98:	9a 89       	ldd	r25, Y+18	; 0x12
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <saveInMemory+0x2a6>
    1a9e:	9a 8b       	std	Y+18, r25	; 0x12
    1aa0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa6:	01 97       	sbiw	r24, 0x01	; 1
    1aa8:	9c 8b       	std	Y+20, r25	; 0x14
    1aaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aac:	8b 89       	ldd	r24, Y+19	; 0x13
    1aae:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	69 f7       	brne	.-38     	; 0x1a8e <saveInMemory+0x29a>
    1ab4:	14 c0       	rjmp	.+40     	; 0x1ade <saveInMemory+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9c 8b       	std	Y+20, r25	; 0x14
    1ac8:	8b 8b       	std	Y+19, r24	; 0x13
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
    1acc:	9c 89       	ldd	r25, Y+20	; 0x14
    1ace:	98 8b       	std	Y+16, r25	; 0x10
    1ad0:	8f 87       	std	Y+15, r24	; 0x0f
    1ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad4:	98 89       	ldd	r25, Y+16	; 0x10
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <saveInMemory+0x2e2>
    1ada:	98 8b       	std	Y+16, r25	; 0x10
    1adc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_writeByte(0x0344  , passArray[3]);
    1ade:	20 91 81 00 	lds	r18, 0x0081
    1ae2:	84 e4       	ldi	r24, 0x44	; 68
    1ae4:	93 e0       	ldi	r25, 0x03	; 3
    1ae6:	62 2f       	mov	r22, r18
    1ae8:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e2       	ldi	r26, 0x20	; 32
    1af2:	b1 e4       	ldi	r27, 0x41	; 65
    1af4:	8b 87       	std	Y+11, r24	; 0x0b
    1af6:	9c 87       	std	Y+12, r25	; 0x0c
    1af8:	ad 87       	std	Y+13, r26	; 0x0d
    1afa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	4a ef       	ldi	r20, 0xFA	; 250
    1b0a:	54 e4       	ldi	r21, 0x44	; 68
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 83       	std	Y+7, r24	; 0x07
    1b16:	98 87       	std	Y+8, r25	; 0x08
    1b18:	a9 87       	std	Y+9, r26	; 0x09
    1b1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1e:	78 85       	ldd	r23, Y+8	; 0x08
    1b20:	89 85       	ldd	r24, Y+9	; 0x09
    1b22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	2c f4       	brge	.+10     	; 0x1b3e <saveInMemory+0x34a>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9e 83       	std	Y+6, r25	; 0x06
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	3f c0       	rjmp	.+126    	; 0x1bbc <saveInMemory+0x3c8>
	else if (__tmp > 65535)
    1b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b40:	78 85       	ldd	r23, Y+8	; 0x08
    1b42:	89 85       	ldd	r24, Y+9	; 0x09
    1b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	3f ef       	ldi	r19, 0xFF	; 255
    1b4a:	4f e7       	ldi	r20, 0x7F	; 127
    1b4c:	57 e4       	ldi	r21, 0x47	; 71
    1b4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b52:	18 16       	cp	r1, r24
    1b54:	4c f5       	brge	.+82     	; 0x1ba8 <saveInMemory+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	40 e2       	ldi	r20, 0x20	; 32
    1b64:	51 e4       	ldi	r21, 0x41	; 65
    1b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	bc 01       	movw	r22, r24
    1b70:	cd 01       	movw	r24, r26
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <saveInMemory+0x3aa>
    1b80:	88 ec       	ldi	r24, 0xC8	; 200
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 83       	std	Y+4, r25	; 0x04
    1b86:	8b 83       	std	Y+3, r24	; 0x03
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	f1 f7       	brne	.-4      	; 0x1b8c <saveInMemory+0x398>
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	8d 81       	ldd	r24, Y+5	; 0x05
    1b96:	9e 81       	ldd	r25, Y+6	; 0x06
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	69 f7       	brne	.-38     	; 0x1b80 <saveInMemory+0x38c>
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <saveInMemory+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba8:	6f 81       	ldd	r22, Y+7	; 0x07
    1baa:	78 85       	ldd	r23, Y+8	; 0x08
    1bac:	89 85       	ldd	r24, Y+9	; 0x09
    1bae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	9a 83       	std	Y+2, r25	; 0x02
    1bc2:	89 83       	std	Y+1, r24	; 0x01
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <saveInMemory+0x3d4>
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	EEPROM_writeByte(0x0355  , passArray[4]);
    1bd0:	20 91 82 00 	lds	r18, 0x0082
    1bd4:	85 e5       	ldi	r24, 0x55	; 85
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	62 2f       	mov	r22, r18
    1bda:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
}
    1bde:	e8 96       	adiw	r28, 0x38	; 56
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <readFromMemory>:
void readFromMemory(void){
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
	EEPROM_readByte(0x0311 , &memoryArray[0]);
    1bf8:	29 e7       	ldi	r18, 0x79	; 121
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e1       	ldi	r24, 0x11	; 17
    1bfe:	93 e0       	ldi	r25, 0x03	; 3
    1c00:	b9 01       	movw	r22, r18
    1c02:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
	EEPROM_readByte(0x0322 , &memoryArray[1]);
    1c06:	2a e7       	ldi	r18, 0x7A	; 122
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	82 e2       	ldi	r24, 0x22	; 34
    1c0c:	93 e0       	ldi	r25, 0x03	; 3
    1c0e:	b9 01       	movw	r22, r18
    1c10:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
	EEPROM_readByte(0x0333 , &memoryArray[2]);
    1c14:	2b e7       	ldi	r18, 0x7B	; 123
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	83 e3       	ldi	r24, 0x33	; 51
    1c1a:	93 e0       	ldi	r25, 0x03	; 3
    1c1c:	b9 01       	movw	r22, r18
    1c1e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
	EEPROM_readByte(0x0344 , &memoryArray[3]);
    1c22:	2c e7       	ldi	r18, 0x7C	; 124
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	84 e4       	ldi	r24, 0x44	; 68
    1c28:	93 e0       	ldi	r25, 0x03	; 3
    1c2a:	b9 01       	movw	r22, r18
    1c2c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
	EEPROM_readByte(0x0355 , &memoryArray[4]);
    1c30:	2d e7       	ldi	r18, 0x7D	; 125
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	85 e5       	ldi	r24, 0x55	; 85
    1c36:	93 e0       	ldi	r25, 0x03	; 3
    1c38:	b9 01       	movw	r22, r18
    1c3a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
}
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <openDoorMC2>:
void openDoorMC2(void){
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	c6 54       	subi	r28, 0x46	; 70
    1c52:	d0 40       	sbci	r29, 0x00	; 0
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
	savePassMC2();
    1c5e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>
	readFromMemory();
    1c62:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <readFromMemory>
	for(counter = 0 ; counter<5;counter++){
    1c66:	10 92 78 00 	sts	0x0078, r1
    1c6a:	63 c1       	rjmp	.+710    	; 0x1f32 <openDoorMC2+0x2ee>
		if (memoryArray[counter] != passArray[counter]){
    1c6c:	80 91 78 00 	lds	r24, 0x0078
    1c70:	88 2f       	mov	r24, r24
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	fc 01       	movw	r30, r24
    1c76:	e7 58       	subi	r30, 0x87	; 135
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	20 81       	ld	r18, Z
    1c7c:	80 91 78 00 	lds	r24, 0x0078
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 58       	subi	r30, 0x82	; 130
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 17       	cp	r18, r24
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <openDoorMC2+0x4e>
    1c90:	4b c1       	rjmp	.+662    	; 0x1f28 <openDoorMC2+0x2e4>
    1c92:	fe 01       	movw	r30, r28
    1c94:	ed 5b       	subi	r30, 0xBD	; 189
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a8 ec       	ldi	r26, 0xC8	; 200
    1c9e:	b2 e4       	ldi	r27, 0x42	; 66
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	8e 01       	movw	r16, r28
    1caa:	01 5c       	subi	r16, 0xC1	; 193
    1cac:	1f 4f       	sbci	r17, 0xFF	; 255
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ed 5b       	subi	r30, 0xBD	; 189
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a ef       	ldi	r20, 0xFA	; 250
    1cc2:	54 e4       	ldi	r21, 0x44	; 68
    1cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	f8 01       	movw	r30, r16
    1cce:	80 83       	st	Z, r24
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	a2 83       	std	Z+2, r26	; 0x02
    1cd4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd6:	fe 01       	movw	r30, r28
    1cd8:	ff 96       	adiw	r30, 0x3f	; 63
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e8       	ldi	r20, 0x80	; 128
    1ce8:	5f e3       	ldi	r21, 0x3F	; 63
    1cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cee:	88 23       	and	r24, r24
    1cf0:	2c f4       	brge	.+10     	; 0x1cfc <openDoorMC2+0xb8>
		__ticks = 1;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	9e af       	std	Y+62, r25	; 0x3e
    1cf8:	8d af       	std	Y+61, r24	; 0x3d
    1cfa:	46 c0       	rjmp	.+140    	; 0x1d88 <openDoorMC2+0x144>
	else if (__tmp > 65535)
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ff 96       	adiw	r30, 0x3f	; 63
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	3f ef       	ldi	r19, 0xFF	; 255
    1d0c:	4f e7       	ldi	r20, 0x7F	; 127
    1d0e:	57 e4       	ldi	r21, 0x47	; 71
    1d10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d14:	18 16       	cp	r1, r24
    1d16:	64 f5       	brge	.+88     	; 0x1d70 <openDoorMC2+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ed 5b       	subi	r30, 0xBD	; 189
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e2       	ldi	r20, 0x20	; 32
    1d2c:	51 e4       	ldi	r21, 0x41	; 65
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	bc 01       	movw	r22, r24
    1d38:	cd 01       	movw	r24, r26
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e af       	std	Y+62, r25	; 0x3e
    1d44:	8d af       	std	Y+61, r24	; 0x3d
    1d46:	0f c0       	rjmp	.+30     	; 0x1d66 <openDoorMC2+0x122>
    1d48:	88 ec       	ldi	r24, 0xC8	; 200
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c af       	std	Y+60, r25	; 0x3c
    1d4e:	8b af       	std	Y+59, r24	; 0x3b
    1d50:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d52:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <openDoorMC2+0x110>
    1d58:	9c af       	std	Y+60, r25	; 0x3c
    1d5a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	9e af       	std	Y+62, r25	; 0x3e
    1d64:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6a:	00 97       	sbiw	r24, 0x00	; 0
    1d6c:	69 f7       	brne	.-38     	; 0x1d48 <openDoorMC2+0x104>
    1d6e:	16 c0       	rjmp	.+44     	; 0x1d9c <openDoorMC2+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d70:	fe 01       	movw	r30, r28
    1d72:	ff 96       	adiw	r30, 0x3f	; 63
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9e af       	std	Y+62, r25	; 0x3e
    1d86:	8d af       	std	Y+61, r24	; 0x3d
    1d88:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d8c:	9a af       	std	Y+58, r25	; 0x3a
    1d8e:	89 af       	std	Y+57, r24	; 0x39
    1d90:	89 ad       	ldd	r24, Y+57	; 0x39
    1d92:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <openDoorMC2+0x150>
    1d98:	9a af       	std	Y+58, r25	; 0x3a
    1d9a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(100);
			UART_sendByte(NOT_EQUAL);
    1d9c:	83 e1       	ldi	r24, 0x13	; 19
    1d9e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
			savePassMC2();
    1da2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>

			for(counter = 0 ; counter<5;counter++){
    1da6:	10 92 78 00 	sts	0x0078, r1
    1daa:	b9 c0       	rjmp	.+370    	; 0x1f1e <openDoorMC2+0x2da>
				if (memoryArray[counter] != passArray[counter]){
    1dac:	80 91 78 00 	lds	r24, 0x0078
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	fc 01       	movw	r30, r24
    1db6:	e7 58       	subi	r30, 0x87	; 135
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	20 81       	ld	r18, Z
    1dbc:	80 91 78 00 	lds	r24, 0x0078
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	e2 58       	subi	r30, 0x82	; 130
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 81       	ld	r24, Z
    1dcc:	28 17       	cp	r18, r24
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <openDoorMC2+0x18e>
    1dd0:	a1 c0       	rjmp	.+322    	; 0x1f14 <openDoorMC2+0x2d0>
					UART_sendByte(NOT_EQUAL);
    1dd2:	83 e1       	ldi	r24, 0x13	; 19
    1dd4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
					savePassMC2();
    1dd8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>

					for(counter = 0 ; counter<5;counter++){
    1ddc:	10 92 78 00 	sts	0x0078, r1
    1de0:	94 c0       	rjmp	.+296    	; 0x1f0a <openDoorMC2+0x2c6>
						if (memoryArray[counter] != passArray[counter]){
    1de2:	80 91 78 00 	lds	r24, 0x0078
    1de6:	88 2f       	mov	r24, r24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	fc 01       	movw	r30, r24
    1dec:	e7 58       	subi	r30, 0x87	; 135
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	20 81       	ld	r18, Z
    1df2:	80 91 78 00 	lds	r24, 0x0078
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	e2 58       	subi	r30, 0x82	; 130
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	28 17       	cp	r18, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <openDoorMC2+0x1c4>
    1e06:	7c c0       	rjmp	.+248    	; 0x1f00 <openDoorMC2+0x2bc>
							flag2 = NOT_MATCH;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	80 93 73 00 	sts	0x0073, r24
							UART_sendByte(NOT_EQUAL);
    1e0e:	83 e1       	ldi	r24, 0x13	; 19
    1e10:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
							BUZZER_ON();
    1e14:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_ON>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	aa e7       	ldi	r26, 0x7A	; 122
    1e1e:	b4 e4       	ldi	r27, 0x44	; 68
    1e20:	8d ab       	std	Y+53, r24	; 0x35
    1e22:	9e ab       	std	Y+54, r25	; 0x36
    1e24:	af ab       	std	Y+55, r26	; 0x37
    1e26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6d a9       	ldd	r22, Y+53	; 0x35
    1e2a:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2c:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2e:	98 ad       	ldd	r25, Y+56	; 0x38
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	89 ab       	std	Y+49, r24	; 0x31
    1e42:	9a ab       	std	Y+50, r25	; 0x32
    1e44:	ab ab       	std	Y+51, r26	; 0x33
    1e46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e48:	69 a9       	ldd	r22, Y+49	; 0x31
    1e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <openDoorMC2+0x226>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	98 ab       	std	Y+48, r25	; 0x30
    1e66:	8f a7       	std	Y+47, r24	; 0x2f
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <openDoorMC2+0x2a4>
	else if (__tmp > 65535)
    1e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e70:	9c a9       	ldd	r25, Y+52	; 0x34
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <openDoorMC2+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6d a9       	ldd	r22, Y+53	; 0x35
    1e84:	7e a9       	ldd	r23, Y+54	; 0x36
    1e86:	8f a9       	ldd	r24, Y+55	; 0x37
    1e88:	98 ad       	ldd	r25, Y+56	; 0x38
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	98 ab       	std	Y+48, r25	; 0x30
    1ea8:	8f a7       	std	Y+47, r24	; 0x2f
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <openDoorMC2+0x286>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e a7       	std	Y+46, r25	; 0x2e
    1eb2:	8d a7       	std	Y+45, r24	; 0x2d
    1eb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <openDoorMC2+0x274>
    1ebc:	9e a7       	std	Y+46, r25	; 0x2e
    1ebe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	98 ab       	std	Y+48, r25	; 0x30
    1ec8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <openDoorMC2+0x268>
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <openDoorMC2+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eda:	9c a9       	ldd	r25, Y+52	; 0x34
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	98 ab       	std	Y+48, r25	; 0x30
    1ee6:	8f a7       	std	Y+47, r24	; 0x2f
    1ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eea:	98 a9       	ldd	r25, Y+48	; 0x30
    1eec:	9c a7       	std	Y+44, r25	; 0x2c
    1eee:	8b a7       	std	Y+43, r24	; 0x2b
    1ef0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ef2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <openDoorMC2+0x2b0>
    1ef8:	9c a7       	std	Y+44, r25	; 0x2c
    1efa:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(1000);
							BUZZER_OFF();
    1efc:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_OFF>
			for(counter = 0 ; counter<5;counter++){
				if (memoryArray[counter] != passArray[counter]){
					UART_sendByte(NOT_EQUAL);
					savePassMC2();

					for(counter = 0 ; counter<5;counter++){
    1f00:	80 91 78 00 	lds	r24, 0x0078
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	80 93 78 00 	sts	0x0078, r24
    1f0a:	80 91 78 00 	lds	r24, 0x0078
    1f0e:	85 30       	cpi	r24, 0x05	; 5
    1f10:	08 f4       	brcc	.+2      	; 0x1f14 <openDoorMC2+0x2d0>
    1f12:	67 cf       	rjmp	.-306    	; 0x1de2 <openDoorMC2+0x19e>
		if (memoryArray[counter] != passArray[counter]){
			_delay_ms(100);
			UART_sendByte(NOT_EQUAL);
			savePassMC2();

			for(counter = 0 ; counter<5;counter++){
    1f14:	80 91 78 00 	lds	r24, 0x0078
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	80 93 78 00 	sts	0x0078, r24
    1f1e:	80 91 78 00 	lds	r24, 0x0078
    1f22:	85 30       	cpi	r24, 0x05	; 5
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <openDoorMC2+0x2e4>
    1f26:	42 cf       	rjmp	.-380    	; 0x1dac <openDoorMC2+0x168>
	EEPROM_readByte(0x0355 , &memoryArray[4]);
}
void openDoorMC2(void){
	savePassMC2();
	readFromMemory();
	for(counter = 0 ; counter<5;counter++){
    1f28:	80 91 78 00 	lds	r24, 0x0078
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	80 93 78 00 	sts	0x0078, r24
    1f32:	80 91 78 00 	lds	r24, 0x0078
    1f36:	85 30       	cpi	r24, 0x05	; 5
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <openDoorMC2+0x2f8>
    1f3a:	98 ce       	rjmp	.-720    	; 0x1c6c <openDoorMC2+0x28>
					}
				}
			}
		}
	}
	if (flag2 == MATCH){
    1f3c:	80 91 73 00 	lds	r24, 0x0073
    1f40:	88 23       	and	r24, r24
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <openDoorMC2+0x302>
    1f44:	7d c1       	rjmp	.+762    	; 0x2240 <openDoorMC2+0x5fc>
		UART_sendByte(EQUAL);
    1f46:	84 e1       	ldi	r24, 0x14	; 20
    1f48:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a8 ec       	ldi	r26, 0xC8	; 200
    1f52:	b2 e4       	ldi	r27, 0x42	; 66
    1f54:	8f a3       	std	Y+39, r24	; 0x27
    1f56:	98 a7       	std	Y+40, r25	; 0x28
    1f58:	a9 a7       	std	Y+41, r26	; 0x29
    1f5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f60:	89 a5       	ldd	r24, Y+41	; 0x29
    1f62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8b a3       	std	Y+35, r24	; 0x23
    1f76:	9c a3       	std	Y+36, r25	; 0x24
    1f78:	ad a3       	std	Y+37, r26	; 0x25
    1f7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f7c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f7e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f80:	8d a1       	ldd	r24, Y+37	; 0x25
    1f82:	9e a1       	ldd	r25, Y+38	; 0x26
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <openDoorMC2+0x35a>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9a a3       	std	Y+34, r25	; 0x22
    1f9a:	89 a3       	std	Y+33, r24	; 0x21
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <openDoorMC2+0x3d8>
	else if (__tmp > 65535)
    1f9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <openDoorMC2+0x3c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fba:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9a a3       	std	Y+34, r25	; 0x22
    1fdc:	89 a3       	std	Y+33, r24	; 0x21
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <openDoorMC2+0x3ba>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fea:	98 a1       	ldd	r25, Y+32	; 0x20
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <openDoorMC2+0x3a8>
    1ff0:	98 a3       	std	Y+32, r25	; 0x20
    1ff2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9a a3       	std	Y+34, r25	; 0x22
    1ffc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	89 a1       	ldd	r24, Y+33	; 0x21
    2000:	9a a1       	ldd	r25, Y+34	; 0x22
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <openDoorMC2+0x39c>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <openDoorMC2+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6b a1       	ldd	r22, Y+35	; 0x23
    200a:	7c a1       	ldd	r23, Y+36	; 0x24
    200c:	8d a1       	ldd	r24, Y+37	; 0x25
    200e:	9e a1       	ldd	r25, Y+38	; 0x26
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9a a3       	std	Y+34, r25	; 0x22
    201a:	89 a3       	std	Y+33, r24	; 0x21
    201c:	89 a1       	ldd	r24, Y+33	; 0x21
    201e:	9a a1       	ldd	r25, Y+34	; 0x22
    2020:	9e 8f       	std	Y+30, r25	; 0x1e
    2022:	8d 8f       	std	Y+29, r24	; 0x1d
    2024:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2026:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <openDoorMC2+0x3e4>
    202c:	9e 8f       	std	Y+30, r25	; 0x1e
    202e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		DcMotor_Rotate(clockwise);
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <DcMotor_Rotate>
		TIMER_Init(&config_timePtr,TIMER_1);
    2036:	88 e6       	ldi	r24, 0x68	; 104
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <TIMER_Init>
		while(tick<=500){
    2040:	80 91 71 00 	lds	r24, 0x0071
    2044:	90 91 72 00 	lds	r25, 0x0072
    2048:	f1 e0       	ldi	r31, 0x01	; 1
    204a:	85 3f       	cpi	r24, 0xF5	; 245
    204c:	9f 07       	cpc	r25, r31
    204e:	c0 f3       	brcs	.-16     	; 0x2040 <openDoorMC2+0x3fc>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	a8 ec       	ldi	r26, 0xC8	; 200
    2056:	b2 e4       	ldi	r27, 0x42	; 66
    2058:	89 8f       	std	Y+25, r24	; 0x19
    205a:	9a 8f       	std	Y+26, r25	; 0x1a
    205c:	ab 8f       	std	Y+27, r26	; 0x1b
    205e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2060:	69 8d       	ldd	r22, Y+25	; 0x19
    2062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	4a ef       	ldi	r20, 0xFA	; 250
    206e:	54 e4       	ldi	r21, 0x44	; 68
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	8d 8b       	std	Y+21, r24	; 0x15
    207a:	9e 8b       	std	Y+22, r25	; 0x16
    207c:	af 8b       	std	Y+23, r26	; 0x17
    207e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2080:	6d 89       	ldd	r22, Y+21	; 0x15
    2082:	7e 89       	ldd	r23, Y+22	; 0x16
    2084:	8f 89       	ldd	r24, Y+23	; 0x17
    2086:	98 8d       	ldd	r25, Y+24	; 0x18
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	2c f4       	brge	.+10     	; 0x20a2 <openDoorMC2+0x45e>
		__ticks = 1;
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9c 8b       	std	Y+20, r25	; 0x14
    209e:	8b 8b       	std	Y+19, r24	; 0x13
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <openDoorMC2+0x4dc>
	else if (__tmp > 65535)
    20a2:	6d 89       	ldd	r22, Y+21	; 0x15
    20a4:	7e 89       	ldd	r23, Y+22	; 0x16
    20a6:	8f 89       	ldd	r24, Y+23	; 0x17
    20a8:	98 8d       	ldd	r25, Y+24	; 0x18
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	3f ef       	ldi	r19, 0xFF	; 255
    20ae:	4f e7       	ldi	r20, 0x7F	; 127
    20b0:	57 e4       	ldi	r21, 0x47	; 71
    20b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b6:	18 16       	cp	r1, r24
    20b8:	4c f5       	brge	.+82     	; 0x210c <openDoorMC2+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ba:	69 8d       	ldd	r22, Y+25	; 0x19
    20bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9c 8b       	std	Y+20, r25	; 0x14
    20e0:	8b 8b       	std	Y+19, r24	; 0x13
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <openDoorMC2+0x4be>
    20e4:	88 ec       	ldi	r24, 0xC8	; 200
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	89 8b       	std	Y+17, r24	; 0x11
    20ec:	89 89       	ldd	r24, Y+17	; 0x11
    20ee:	9a 89       	ldd	r25, Y+18	; 0x12
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <openDoorMC2+0x4ac>
    20f4:	9a 8b       	std	Y+18, r25	; 0x12
    20f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9c 8b       	std	Y+20, r25	; 0x14
    2100:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <openDoorMC2+0x4a0>
    210a:	14 c0       	rjmp	.+40     	; 0x2134 <openDoorMC2+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9c 8b       	std	Y+20, r25	; 0x14
    211e:	8b 8b       	std	Y+19, r24	; 0x13
    2120:	8b 89       	ldd	r24, Y+19	; 0x13
    2122:	9c 89       	ldd	r25, Y+20	; 0x14
    2124:	98 8b       	std	Y+16, r25	; 0x10
    2126:	8f 87       	std	Y+15, r24	; 0x0f
    2128:	8f 85       	ldd	r24, Y+15	; 0x0f
    212a:	98 89       	ldd	r25, Y+16	; 0x10
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	f1 f7       	brne	.-4      	; 0x212c <openDoorMC2+0x4e8>
    2130:	98 8b       	std	Y+16, r25	; 0x10
    2132:	8f 87       	std	Y+15, r24	; 0x0f
		}
		_delay_ms(100);
	/*	LCD_clearScreen();
    	LCD_displayStringRowColumn(0,0,"DOOR CLOSING");*/
		DcMotor_Rotate(antiClockwise);
    2134:	82 e0       	ldi	r24, 0x02	; 2
    2136:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <DcMotor_Rotate>

		TIMER_Init(&config_timePtr,TIMER_1);
    213a:	88 e6       	ldi	r24, 0x68	; 104
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	0e 94 70 14 	call	0x28e0	; 0x28e0 <TIMER_Init>
		while(tick<=500){
    2144:	80 91 71 00 	lds	r24, 0x0071
    2148:	90 91 72 00 	lds	r25, 0x0072
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	85 3f       	cpi	r24, 0xF5	; 245
    2150:	92 07       	cpc	r25, r18
    2152:	c0 f3       	brcs	.-16     	; 0x2144 <openDoorMC2+0x500>
	/*		LCD_moveCursor(1, 0);
			LCD_intgerToString(tick);*/
		}
	/*	LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"DOOR CLOSED");*/
		DcMotor_Rotate(stop);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <DcMotor_Rotate>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	aa e7       	ldi	r26, 0x7A	; 122
    2160:	b4 e4       	ldi	r27, 0x44	; 68
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a ef       	ldi	r20, 0xFA	; 250
    2178:	54 e4       	ldi	r21, 0x44	; 68
    217a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <openDoorMC2+0x568>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <openDoorMC2+0x5e6>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <openDoorMC2+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <openDoorMC2+0x5c8>
    21ee:	88 ec       	ldi	r24, 0xC8	; 200
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <openDoorMC2+0x5b6>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <openDoorMC2+0x5aa>
    2214:	17 c0       	rjmp	.+46     	; 0x2244 <openDoorMC2+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <openDoorMC2+0x5f2>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <openDoorMC2+0x600>
		_delay_ms(1000);
	}
	else{
		flag2 = MATCH;
    2240:	10 92 73 00 	sts	0x0073, r1
	}
}
    2244:	ca 5b       	subi	r28, 0xBA	; 186
    2246:	df 4f       	sbci	r29, 0xFF	; 255
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <changePassMC2>:

void changePassMC2(void){
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	6c 97       	sbiw	r28, 0x1c	; 28
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
	savePassMC2();
    2270:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>
	readFromMemory();
    2274:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <readFromMemory>
	for(counter = 0 ; counter<5;counter++){
    2278:	10 92 78 00 	sts	0x0078, r1
    227c:	50 c1       	rjmp	.+672    	; 0x251e <changePassMC2+0x2c2>
		if (memoryArray[counter] != passArray[counter]){
    227e:	80 91 78 00 	lds	r24, 0x0078
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	fc 01       	movw	r30, r24
    2288:	e7 58       	subi	r30, 0x87	; 135
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	20 81       	ld	r18, Z
    228e:	80 91 78 00 	lds	r24, 0x0078
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	fc 01       	movw	r30, r24
    2298:	e2 58       	subi	r30, 0x82	; 130
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	80 81       	ld	r24, Z
    229e:	28 17       	cp	r18, r24
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <changePassMC2+0x48>
    22a2:	38 c1       	rjmp	.+624    	; 0x2514 <changePassMC2+0x2b8>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a8 ec       	ldi	r26, 0xC8	; 200
    22aa:	b2 e4       	ldi	r27, 0x42	; 66
    22ac:	89 8f       	std	Y+25, r24	; 0x19
    22ae:	9a 8f       	std	Y+26, r25	; 0x1a
    22b0:	ab 8f       	std	Y+27, r26	; 0x1b
    22b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	69 8d       	ldd	r22, Y+25	; 0x19
    22b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8d 8b       	std	Y+21, r24	; 0x15
    22ce:	9e 8b       	std	Y+22, r25	; 0x16
    22d0:	af 8b       	std	Y+23, r26	; 0x17
    22d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <changePassMC2+0x9a>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9c 8b       	std	Y+20, r25	; 0x14
    22f2:	8b 8b       	std	Y+19, r24	; 0x13
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <changePassMC2+0x118>
	else if (__tmp > 65535)
    22f6:	6d 89       	ldd	r22, Y+21	; 0x15
    22f8:	7e 89       	ldd	r23, Y+22	; 0x16
    22fa:	8f 89       	ldd	r24, Y+23	; 0x17
    22fc:	98 8d       	ldd	r25, Y+24	; 0x18
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <changePassMC2+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	69 8d       	ldd	r22, Y+25	; 0x19
    2310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9c 8b       	std	Y+20, r25	; 0x14
    2334:	8b 8b       	std	Y+19, r24	; 0x13
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <changePassMC2+0xfa>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9a 8b       	std	Y+18, r25	; 0x12
    233e:	89 8b       	std	Y+17, r24	; 0x11
    2340:	89 89       	ldd	r24, Y+17	; 0x11
    2342:	9a 89       	ldd	r25, Y+18	; 0x12
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <changePassMC2+0xe8>
    2348:	9a 8b       	std	Y+18, r25	; 0x12
    234a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8b 89       	ldd	r24, Y+19	; 0x13
    234e:	9c 89       	ldd	r25, Y+20	; 0x14
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9c 8b       	std	Y+20, r25	; 0x14
    2354:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8b 89       	ldd	r24, Y+19	; 0x13
    2358:	9c 89       	ldd	r25, Y+20	; 0x14
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <changePassMC2+0xdc>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <changePassMC2+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6d 89       	ldd	r22, Y+21	; 0x15
    2362:	7e 89       	ldd	r23, Y+22	; 0x16
    2364:	8f 89       	ldd	r24, Y+23	; 0x17
    2366:	98 8d       	ldd	r25, Y+24	; 0x18
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9c 8b       	std	Y+20, r25	; 0x14
    2372:	8b 8b       	std	Y+19, r24	; 0x13
    2374:	8b 89       	ldd	r24, Y+19	; 0x13
    2376:	9c 89       	ldd	r25, Y+20	; 0x14
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	98 89       	ldd	r25, Y+16	; 0x10
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <changePassMC2+0x124>
    2384:	98 8b       	std	Y+16, r25	; 0x10
    2386:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			UART_sendByte(NOT_EQUAL);
    2388:	83 e1       	ldi	r24, 0x13	; 19
    238a:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
			savePassMC2();
    238e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>

			for(counter = 0 ; counter<5;counter++){
    2392:	10 92 78 00 	sts	0x0078, r1
    2396:	b9 c0       	rjmp	.+370    	; 0x250a <changePassMC2+0x2ae>
				if (memoryArray[counter] != passArray[counter]){
    2398:	80 91 78 00 	lds	r24, 0x0078
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	fc 01       	movw	r30, r24
    23a2:	e7 58       	subi	r30, 0x87	; 135
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	20 81       	ld	r18, Z
    23a8:	80 91 78 00 	lds	r24, 0x0078
    23ac:	88 2f       	mov	r24, r24
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	fc 01       	movw	r30, r24
    23b2:	e2 58       	subi	r30, 0x82	; 130
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	28 17       	cp	r18, r24
    23ba:	09 f4       	brne	.+2      	; 0x23be <changePassMC2+0x162>
    23bc:	a1 c0       	rjmp	.+322    	; 0x2500 <changePassMC2+0x2a4>
					UART_sendByte(NOT_EQUAL);
    23be:	83 e1       	ldi	r24, 0x13	; 19
    23c0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
					savePassMC2();
    23c4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>

					for(counter = 0 ; counter<5;counter++){
    23c8:	10 92 78 00 	sts	0x0078, r1
    23cc:	94 c0       	rjmp	.+296    	; 0x24f6 <changePassMC2+0x29a>
						if (memoryArray[counter] != passArray[counter]){
    23ce:	80 91 78 00 	lds	r24, 0x0078
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	fc 01       	movw	r30, r24
    23d8:	e7 58       	subi	r30, 0x87	; 135
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	20 81       	ld	r18, Z
    23de:	80 91 78 00 	lds	r24, 0x0078
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 58       	subi	r30, 0x82	; 130
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	28 17       	cp	r18, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <changePassMC2+0x198>
    23f2:	7c c0       	rjmp	.+248    	; 0x24ec <changePassMC2+0x290>
							flag2 = NOT_MATCH;
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	80 93 73 00 	sts	0x0073, r24
							UART_sendByte(NOT_EQUAL);
    23fa:	83 e1       	ldi	r24, 0x13	; 19
    23fc:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
							BUZZER_ON();
    2400:	0e 94 b4 05 	call	0xb68	; 0xb68 <BUZZER_ON>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	90 e4       	ldi	r25, 0x40	; 64
    2408:	ac e9       	ldi	r26, 0x9C	; 156
    240a:	b5 e4       	ldi	r27, 0x45	; 69
    240c:	8b 87       	std	Y+11, r24	; 0x0b
    240e:	9c 87       	std	Y+12, r25	; 0x0c
    2410:	ad 87       	std	Y+13, r26	; 0x0d
    2412:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2414:	6b 85       	ldd	r22, Y+11	; 0x0b
    2416:	7c 85       	ldd	r23, Y+12	; 0x0c
    2418:	8d 85       	ldd	r24, Y+13	; 0x0d
    241a:	9e 85       	ldd	r25, Y+14	; 0x0e
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a ef       	ldi	r20, 0xFA	; 250
    2422:	54 e4       	ldi	r21, 0x44	; 68
    2424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8f 83       	std	Y+7, r24	; 0x07
    242e:	98 87       	std	Y+8, r25	; 0x08
    2430:	a9 87       	std	Y+9, r26	; 0x09
    2432:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2434:	6f 81       	ldd	r22, Y+7	; 0x07
    2436:	78 85       	ldd	r23, Y+8	; 0x08
    2438:	89 85       	ldd	r24, Y+9	; 0x09
    243a:	9a 85       	ldd	r25, Y+10	; 0x0a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	2c f4       	brge	.+10     	; 0x2456 <changePassMC2+0x1fa>
		__ticks = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e 83       	std	Y+6, r25	; 0x06
    2452:	8d 83       	std	Y+5, r24	; 0x05
    2454:	3f c0       	rjmp	.+126    	; 0x24d4 <changePassMC2+0x278>
	else if (__tmp > 65535)
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	3f ef       	ldi	r19, 0xFF	; 255
    2462:	4f e7       	ldi	r20, 0x7F	; 127
    2464:	57 e4       	ldi	r21, 0x47	; 71
    2466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    246a:	18 16       	cp	r1, r24
    246c:	4c f5       	brge	.+82     	; 0x24c0 <changePassMC2+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	40 e2       	ldi	r20, 0x20	; 32
    247c:	51 e4       	ldi	r21, 0x41	; 65
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	0f c0       	rjmp	.+30     	; 0x24b6 <changePassMC2+0x25a>
    2498:	88 ec       	ldi	r24, 0xC8	; 200
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9c 83       	std	Y+4, r25	; 0x04
    249e:	8b 83       	std	Y+3, r24	; 0x03
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	9c 81       	ldd	r25, Y+4	; 0x04
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <changePassMC2+0x248>
    24a8:	9c 83       	std	Y+4, r25	; 0x04
    24aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b6:	8d 81       	ldd	r24, Y+5	; 0x05
    24b8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ba:	00 97       	sbiw	r24, 0x00	; 0
    24bc:	69 f7       	brne	.-38     	; 0x2498 <changePassMC2+0x23c>
    24be:	14 c0       	rjmp	.+40     	; 0x24e8 <changePassMC2+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	8d 81       	ldd	r24, Y+5	; 0x05
    24d6:	9e 81       	ldd	r25, Y+6	; 0x06
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	9a 81       	ldd	r25, Y+2	; 0x02
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	f1 f7       	brne	.-4      	; 0x24e0 <changePassMC2+0x284>
    24e4:	9a 83       	std	Y+2, r25	; 0x02
    24e6:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(5000);
							BUZZER_OFF();
    24e8:	0e 94 c0 05 	call	0xb80	; 0xb80 <BUZZER_OFF>
			for(counter = 0 ; counter<5;counter++){
				if (memoryArray[counter] != passArray[counter]){
					UART_sendByte(NOT_EQUAL);
					savePassMC2();

					for(counter = 0 ; counter<5;counter++){
    24ec:	80 91 78 00 	lds	r24, 0x0078
    24f0:	8f 5f       	subi	r24, 0xFF	; 255
    24f2:	80 93 78 00 	sts	0x0078, r24
    24f6:	80 91 78 00 	lds	r24, 0x0078
    24fa:	85 30       	cpi	r24, 0x05	; 5
    24fc:	08 f4       	brcc	.+2      	; 0x2500 <changePassMC2+0x2a4>
    24fe:	67 cf       	rjmp	.-306    	; 0x23ce <changePassMC2+0x172>
		if (memoryArray[counter] != passArray[counter]){
			_delay_ms(100);
			UART_sendByte(NOT_EQUAL);
			savePassMC2();

			for(counter = 0 ; counter<5;counter++){
    2500:	80 91 78 00 	lds	r24, 0x0078
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	80 93 78 00 	sts	0x0078, r24
    250a:	80 91 78 00 	lds	r24, 0x0078
    250e:	85 30       	cpi	r24, 0x05	; 5
    2510:	08 f4       	brcc	.+2      	; 0x2514 <changePassMC2+0x2b8>
    2512:	42 cf       	rjmp	.-380    	; 0x2398 <changePassMC2+0x13c>
}

void changePassMC2(void){
	savePassMC2();
	readFromMemory();
	for(counter = 0 ; counter<5;counter++){
    2514:	80 91 78 00 	lds	r24, 0x0078
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	80 93 78 00 	sts	0x0078, r24
    251e:	80 91 78 00 	lds	r24, 0x0078
    2522:	85 30       	cpi	r24, 0x05	; 5
    2524:	08 f4       	brcc	.+2      	; 0x2528 <changePassMC2+0x2cc>
    2526:	ab ce       	rjmp	.-682    	; 0x227e <changePassMC2+0x22>
					}
				}
			}
		}
	}
	if (flag2 == MATCH){
    2528:	80 91 73 00 	lds	r24, 0x0073
    252c:	88 23       	and	r24, r24
    252e:	41 f4       	brne	.+16     	; 0x2540 <changePassMC2+0x2e4>
		UART_sendByte(EQUAL);
    2530:	84 e1       	ldi	r24, 0x14	; 20
    2532:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
		savePassMC2();
    2536:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <savePassMC2>
		saveInMemory();
    253a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <saveInMemory>
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <changePassMC2+0x2e8>
	}
	else{
		flag2 = MATCH;
    2540:	10 92 73 00 	sts	0x0073, r1
	}
}
    2544:	6c 96       	adiw	r28, 0x1c	; 28
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <Timer_Counter>:

void Timer_Counter(void){
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
		tick++;
    255e:	80 91 71 00 	lds	r24, 0x0071
    2562:	90 91 72 00 	lds	r25, 0x0072
    2566:	01 96       	adiw	r24, 0x01	; 1
    2568:	90 93 72 00 	sts	0x0072, r25
    256c:	80 93 71 00 	sts	0x0071, r24
		if(tick == 510)
    2570:	80 91 71 00 	lds	r24, 0x0071
    2574:	90 91 72 00 	lds	r25, 0x0072
    2578:	21 e0       	ldi	r18, 0x01	; 1
    257a:	8e 3f       	cpi	r24, 0xFE	; 254
    257c:	92 07       	cpc	r25, r18
    257e:	39 f4       	brne	.+14     	; 0x258e <Timer_Counter+0x38>
		{
			TIMER_DeInit(TIMER_1);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <TIMER_DeInit>
			tick = 0;
    2586:	10 92 72 00 	sts	0x0072, r1
    258a:	10 92 71 00 	sts	0x0071, r1
		}

}
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <DcMotor_init>:
	TCNT0 = 0;
	OCR0 = dutyCycle;
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);

}*/
void DcMotor_init(void){
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, PIN_OUTPUT);
    259c:	82 e0       	ldi	r24, 0x02	; 2
    259e:	65 e0       	ldi	r22, 0x05	; 5
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, PIN_OUTPUT);
    25a6:	82 e0       	ldi	r24, 0x02	; 2
    25a8:	66 e0       	ldi	r22, 0x06	; 6
    25aa:	41 e0       	ldi	r20, 0x01	; 1
    25ac:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, PIN_OUTPUT);
    25b0:	82 e0       	ldi	r24, 0x02	; 2
    25b2:	67 e0       	ldi	r22, 0x07	; 7
    25b4:	41 e0       	ldi	r20, 0x01	; 1
    25b6:	0e 94 6d 06 	call	0xcda	; 0xcda <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	65 e0       	ldi	r22, 0x05	; 5
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    25c4:	82 e0       	ldi	r24, 0x02	; 2
    25c6:	66 e0       	ldi	r22, 0x06	; 6
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	state = stop;
    25ce:	10 92 77 00 	sts	0x0077, r1
}
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <DcMotor_Rotate>:

void DcMotor_Rotate(enum DcMotor_State currentState){
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <DcMotor_Rotate+0x6>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	89 83       	std	Y+1, r24	; 0x01
	state = currentState;
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	80 93 77 00 	sts	0x0077, r24
	switch(currentState){
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	3b 83       	std	Y+3, r19	; 0x03
    25f4:	2a 83       	std	Y+2, r18	; 0x02
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	81 30       	cpi	r24, 0x01	; 1
    25fc:	91 05       	cpc	r25, r1
    25fe:	c9 f0       	breq	.+50     	; 0x2632 <DcMotor_Rotate+0x5a>
    2600:	2a 81       	ldd	r18, Y+2	; 0x02
    2602:	3b 81       	ldd	r19, Y+3	; 0x03
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	21 f1       	breq	.+72     	; 0x2652 <DcMotor_Rotate+0x7a>
    260a:	8a 81       	ldd	r24, Y+2	; 0x02
    260c:	9b 81       	ldd	r25, Y+3	; 0x03
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	79 f5       	brne	.+94     	; 0x2670 <DcMotor_Rotate+0x98>
	case stop:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	65 e0       	ldi	r22, 0x05	; 5
    2616:	40 e0       	ldi	r20, 0x00	; 0
    2618:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
			  GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	66 e0       	ldi	r22, 0x06	; 6
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
			  GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_LOW);
    2626:	82 e0       	ldi	r24, 0x02	; 2
    2628:	67 e0       	ldi	r22, 0x07	; 7
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    2630:	1f c0       	rjmp	.+62     	; 0x2670 <DcMotor_Rotate+0x98>
			  break;

	case clockwise:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_LOW);
    2632:	82 e0       	ldi	r24, 0x02	; 2
    2634:	65 e0       	ldi	r22, 0x05	; 5
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
				   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_HIGH);
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	66 e0       	ldi	r22, 0x06	; 6
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
				   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_HIGH);
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	67 e0       	ldi	r22, 0x07	; 7
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <DcMotor_Rotate+0x98>
				   break;

	case antiClockwise:GPIO_writePin(MOTOR_PORT_ID, MOTOR_FIRST_PIN_ID, LOGIC_HIGH);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	65 e0       	ldi	r22, 0x05	; 5
    2656:	41 e0       	ldi	r20, 0x01	; 1
    2658:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
					   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SECOND_PIN_ID, LOGIC_LOW);
    265c:	82 e0       	ldi	r24, 0x02	; 2
    265e:	66 e0       	ldi	r22, 0x06	; 6
    2660:	40 e0       	ldi	r20, 0x00	; 0
    2662:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
					   GPIO_writePin(MOTOR_PORT_ID, MOTOR_SPEED_PIN_ID, LOGIC_HIGH);
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	67 e0       	ldi	r22, 0x07	; 7
    266a:	41 e0       	ldi	r20, 0x01	; 1
    266c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_LOW);
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
#endif*/

//PWM_INIT(speed);
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	08 95       	ret

0000267c <__vector_9>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    267c:	1f 92       	push	r1
    267e:	0f 92       	push	r0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	0f 92       	push	r0
    2684:	11 24       	eor	r1, r1
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    26a6:	80 91 75 00 	lds	r24, 0x0075
    26aa:	90 91 76 00 	lds	r25, 0x0076
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	29 f0       	breq	.+10     	; 0x26bc <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    26b2:	e0 91 75 00 	lds	r30, 0x0075
    26b6:	f0 91 76 00 	lds	r31, 0x0076
    26ba:	09 95       	icall
	}
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	ff 91       	pop	r31
    26c2:	ef 91       	pop	r30
    26c4:	bf 91       	pop	r27
    26c6:	af 91       	pop	r26
    26c8:	9f 91       	pop	r25
    26ca:	8f 91       	pop	r24
    26cc:	7f 91       	pop	r23
    26ce:	6f 91       	pop	r22
    26d0:	5f 91       	pop	r21
    26d2:	4f 91       	pop	r20
    26d4:	3f 91       	pop	r19
    26d6:	2f 91       	pop	r18
    26d8:	0f 90       	pop	r0
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	0f 90       	pop	r0
    26de:	1f 90       	pop	r1
    26e0:	18 95       	reti

000026e2 <__vector_19>:

ISR(TIMER0_COMP_vect){
    26e2:	1f 92       	push	r1
    26e4:	0f 92       	push	r0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	0f 92       	push	r0
    26ea:	11 24       	eor	r1, r1
    26ec:	2f 93       	push	r18
    26ee:	3f 93       	push	r19
    26f0:	4f 93       	push	r20
    26f2:	5f 93       	push	r21
    26f4:	6f 93       	push	r22
    26f6:	7f 93       	push	r23
    26f8:	8f 93       	push	r24
    26fa:	9f 93       	push	r25
    26fc:	af 93       	push	r26
    26fe:	bf 93       	push	r27
    2700:	ef 93       	push	r30
    2702:	ff 93       	push	r31
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    270c:	80 91 75 00 	lds	r24, 0x0075
    2710:	90 91 76 00 	lds	r25, 0x0076
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	29 f0       	breq	.+10     	; 0x2722 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2718:	e0 91 75 00 	lds	r30, 0x0075
    271c:	f0 91 76 00 	lds	r31, 0x0076
    2720:	09 95       	icall
	}
}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	ff 91       	pop	r31
    2728:	ef 91       	pop	r30
    272a:	bf 91       	pop	r27
    272c:	af 91       	pop	r26
    272e:	9f 91       	pop	r25
    2730:	8f 91       	pop	r24
    2732:	7f 91       	pop	r23
    2734:	6f 91       	pop	r22
    2736:	5f 91       	pop	r21
    2738:	4f 91       	pop	r20
    273a:	3f 91       	pop	r19
    273c:	2f 91       	pop	r18
    273e:	0f 90       	pop	r0
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	0f 90       	pop	r0
    2744:	1f 90       	pop	r1
    2746:	18 95       	reti

00002748 <__vector_8>:


ISR(TIMER1_OVF_vect){
    2748:	1f 92       	push	r1
    274a:	0f 92       	push	r0
    274c:	0f b6       	in	r0, 0x3f	; 63
    274e:	0f 92       	push	r0
    2750:	11 24       	eor	r1, r1
    2752:	2f 93       	push	r18
    2754:	3f 93       	push	r19
    2756:	4f 93       	push	r20
    2758:	5f 93       	push	r21
    275a:	6f 93       	push	r22
    275c:	7f 93       	push	r23
    275e:	8f 93       	push	r24
    2760:	9f 93       	push	r25
    2762:	af 93       	push	r26
    2764:	bf 93       	push	r27
    2766:	ef 93       	push	r30
    2768:	ff 93       	push	r31
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2772:	80 91 75 00 	lds	r24, 0x0075
    2776:	90 91 76 00 	lds	r25, 0x0076
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	29 f0       	breq	.+10     	; 0x2788 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    277e:	e0 91 75 00 	lds	r30, 0x0075
    2782:	f0 91 76 00 	lds	r31, 0x0076
    2786:	09 95       	icall
	}
}
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	ff 91       	pop	r31
    278e:	ef 91       	pop	r30
    2790:	bf 91       	pop	r27
    2792:	af 91       	pop	r26
    2794:	9f 91       	pop	r25
    2796:	8f 91       	pop	r24
    2798:	7f 91       	pop	r23
    279a:	6f 91       	pop	r22
    279c:	5f 91       	pop	r21
    279e:	4f 91       	pop	r20
    27a0:	3f 91       	pop	r19
    27a2:	2f 91       	pop	r18
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_6>:
ISR(TIMER1_COMPA_vect){
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	2f 93       	push	r18
    27ba:	3f 93       	push	r19
    27bc:	4f 93       	push	r20
    27be:	5f 93       	push	r21
    27c0:	6f 93       	push	r22
    27c2:	7f 93       	push	r23
    27c4:	8f 93       	push	r24
    27c6:	9f 93       	push	r25
    27c8:	af 93       	push	r26
    27ca:	bf 93       	push	r27
    27cc:	ef 93       	push	r30
    27ce:	ff 93       	push	r31
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    27d8:	80 91 75 00 	lds	r24, 0x0075
    27dc:	90 91 76 00 	lds	r25, 0x0076
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	29 f0       	breq	.+10     	; 0x27ee <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27e4:	e0 91 75 00 	lds	r30, 0x0075
    27e8:	f0 91 76 00 	lds	r31, 0x0076
    27ec:	09 95       	icall
	}
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	ff 91       	pop	r31
    27f4:	ef 91       	pop	r30
    27f6:	bf 91       	pop	r27
    27f8:	af 91       	pop	r26
    27fa:	9f 91       	pop	r25
    27fc:	8f 91       	pop	r24
    27fe:	7f 91       	pop	r23
    2800:	6f 91       	pop	r22
    2802:	5f 91       	pop	r21
    2804:	4f 91       	pop	r20
    2806:	3f 91       	pop	r19
    2808:	2f 91       	pop	r18
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	0f 90       	pop	r0
    2810:	1f 90       	pop	r1
    2812:	18 95       	reti

00002814 <__vector_4>:

ISR(TIMER2_OVF_vect){
    2814:	1f 92       	push	r1
    2816:	0f 92       	push	r0
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	0f 92       	push	r0
    281c:	11 24       	eor	r1, r1
    281e:	2f 93       	push	r18
    2820:	3f 93       	push	r19
    2822:	4f 93       	push	r20
    2824:	5f 93       	push	r21
    2826:	6f 93       	push	r22
    2828:	7f 93       	push	r23
    282a:	8f 93       	push	r24
    282c:	9f 93       	push	r25
    282e:	af 93       	push	r26
    2830:	bf 93       	push	r27
    2832:	ef 93       	push	r30
    2834:	ff 93       	push	r31
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    283e:	80 91 75 00 	lds	r24, 0x0075
    2842:	90 91 76 00 	lds	r25, 0x0076
    2846:	00 97       	sbiw	r24, 0x00	; 0
    2848:	29 f0       	breq	.+10     	; 0x2854 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    284a:	e0 91 75 00 	lds	r30, 0x0075
    284e:	f0 91 76 00 	lds	r31, 0x0076
    2852:	09 95       	icall
	}
}
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	ff 91       	pop	r31
    285a:	ef 91       	pop	r30
    285c:	bf 91       	pop	r27
    285e:	af 91       	pop	r26
    2860:	9f 91       	pop	r25
    2862:	8f 91       	pop	r24
    2864:	7f 91       	pop	r23
    2866:	6f 91       	pop	r22
    2868:	5f 91       	pop	r21
    286a:	4f 91       	pop	r20
    286c:	3f 91       	pop	r19
    286e:	2f 91       	pop	r18
    2870:	0f 90       	pop	r0
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	0f 90       	pop	r0
    2876:	1f 90       	pop	r1
    2878:	18 95       	reti

0000287a <__vector_3>:
ISR(TIMER2_COMP_vect){
    287a:	1f 92       	push	r1
    287c:	0f 92       	push	r0
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	0f 92       	push	r0
    2882:	11 24       	eor	r1, r1
    2884:	2f 93       	push	r18
    2886:	3f 93       	push	r19
    2888:	4f 93       	push	r20
    288a:	5f 93       	push	r21
    288c:	6f 93       	push	r22
    288e:	7f 93       	push	r23
    2890:	8f 93       	push	r24
    2892:	9f 93       	push	r25
    2894:	af 93       	push	r26
    2896:	bf 93       	push	r27
    2898:	ef 93       	push	r30
    289a:	ff 93       	push	r31
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    28a4:	80 91 75 00 	lds	r24, 0x0075
    28a8:	90 91 76 00 	lds	r25, 0x0076
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	29 f0       	breq	.+10     	; 0x28ba <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    28b0:	e0 91 75 00 	lds	r30, 0x0075
    28b4:	f0 91 76 00 	lds	r31, 0x0076
    28b8:	09 95       	icall
	}
}
    28ba:	cf 91       	pop	r28
    28bc:	df 91       	pop	r29
    28be:	ff 91       	pop	r31
    28c0:	ef 91       	pop	r30
    28c2:	bf 91       	pop	r27
    28c4:	af 91       	pop	r26
    28c6:	9f 91       	pop	r25
    28c8:	8f 91       	pop	r24
    28ca:	7f 91       	pop	r23
    28cc:	6f 91       	pop	r22
    28ce:	5f 91       	pop	r21
    28d0:	4f 91       	pop	r20
    28d2:	3f 91       	pop	r19
    28d4:	2f 91       	pop	r18
    28d6:	0f 90       	pop	r0
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	0f 90       	pop	r0
    28dc:	1f 90       	pop	r1
    28de:	18 95       	reti

000028e0 <TIMER_Init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/



void TIMER_Init(const TIMER_ConfigType * Config_Ptr , Timer_Number timer){
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	6b 97       	sbiw	r28, 0x1b	; 27
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	9a 83       	std	Y+2, r25	; 0x02
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	6b 83       	std	Y+3, r22	; 0x03

	if(timer == TIMER_0){
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	88 23       	and	r24, r24
    28fe:	09 f0       	breq	.+2      	; 0x2902 <TIMER_Init+0x22>
    2900:	83 c0       	rjmp	.+262    	; 0x2a08 <TIMER_Init+0x128>

		if(Config_Ptr->timerMode == NORMAL){
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	80 81       	ld	r24, Z
    2908:	88 23       	and	r24, r24
    290a:	b9 f5       	brne	.+110    	; 0x297a <TIMER_Init+0x9a>
			TCCR0 = (1<<FOC0);
    290c:	e3 e5       	ldi	r30, 0x53	; 83
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 e8       	ldi	r24, 0x80	; 128
    2912:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) || (Config_Ptr->prescaler & 0x07);
    2914:	83 e5       	ldi	r24, 0x53	; 83
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	9b 8f       	std	Y+27, r25	; 0x1b
    291a:	8a 8f       	std	Y+26, r24	; 0x1a
    291c:	e3 e5       	ldi	r30, 0x53	; 83
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	88 7f       	andi	r24, 0xF8	; 248
    2928:	90 70       	andi	r25, 0x00	; 0
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	49 f4       	brne	.+18     	; 0x2940 <TIMER_Init+0x60>
    292e:	e9 81       	ldd	r30, Y+1	; 0x01
    2930:	fa 81       	ldd	r31, Y+2	; 0x02
    2932:	86 81       	ldd	r24, Z+6	; 0x06
    2934:	88 2f       	mov	r24, r24
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	87 70       	andi	r24, 0x07	; 7
    293a:	90 70       	andi	r25, 0x00	; 0
    293c:	00 97       	sbiw	r24, 0x00	; 0
    293e:	29 f0       	breq	.+10     	; 0x294a <TIMER_Init+0x6a>
    2940:	e1 e0       	ldi	r30, 0x01	; 1
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	f9 8f       	std	Y+25, r31	; 0x19
    2946:	e8 8f       	std	Y+24, r30	; 0x18
    2948:	02 c0       	rjmp	.+4      	; 0x294e <TIMER_Init+0x6e>
    294a:	19 8e       	std	Y+25, r1	; 0x19
    294c:	18 8e       	std	Y+24, r1	; 0x18
    294e:	88 8d       	ldd	r24, Y+24	; 0x18
    2950:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2952:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2954:	80 83       	st	Z, r24
			TCNT0 = Config_Ptr->initialValue;
    2956:	a2 e5       	ldi	r26, 0x52	; 82
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e9 81       	ldd	r30, Y+1	; 0x01
    295c:	fa 81       	ldd	r31, Y+2	; 0x02
    295e:	81 81       	ldd	r24, Z+1	; 0x01
    2960:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE0);
    2962:	e9 e5       	ldi	r30, 0x59	; 89
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	80 83       	st	Z, r24
			SREG |= (1<<7);
    296a:	af e5       	ldi	r26, 0x5F	; 95
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	ef e5       	ldi	r30, 0x5F	; 95
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	80 68       	ori	r24, 0x80	; 128
    2976:	8c 93       	st	X, r24
    2978:	65 c1       	rjmp	.+714    	; 0x2c44 <TIMER_Init+0x364>
		}
		else if(Config_Ptr->timerMode == COMPARE){
    297a:	e9 81       	ldd	r30, Y+1	; 0x01
    297c:	fa 81       	ldd	r31, Y+2	; 0x02
    297e:	80 81       	ld	r24, Z
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	09 f0       	breq	.+2      	; 0x2986 <TIMER_Init+0xa6>
    2984:	5f c1       	rjmp	.+702    	; 0x2c44 <TIMER_Init+0x364>
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    2986:	e3 e5       	ldi	r30, 0x53	; 83
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	88 e8       	ldi	r24, 0x88	; 136
    298c:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0xF8) || (Config_Ptr->prescaler & 0x07);
    298e:	83 e5       	ldi	r24, 0x53	; 83
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	9f 8b       	std	Y+23, r25	; 0x17
    2994:	8e 8b       	std	Y+22, r24	; 0x16
    2996:	e3 e5       	ldi	r30, 0x53	; 83
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	88 2f       	mov	r24, r24
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	88 7f       	andi	r24, 0xF8	; 248
    29a2:	90 70       	andi	r25, 0x00	; 0
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	49 f4       	brne	.+18     	; 0x29ba <TIMER_Init+0xda>
    29a8:	e9 81       	ldd	r30, Y+1	; 0x01
    29aa:	fa 81       	ldd	r31, Y+2	; 0x02
    29ac:	86 81       	ldd	r24, Z+6	; 0x06
    29ae:	88 2f       	mov	r24, r24
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	87 70       	andi	r24, 0x07	; 7
    29b4:	90 70       	andi	r25, 0x00	; 0
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	29 f0       	breq	.+10     	; 0x29c4 <TIMER_Init+0xe4>
    29ba:	e1 e0       	ldi	r30, 0x01	; 1
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	fd 8b       	std	Y+21, r31	; 0x15
    29c0:	ec 8b       	std	Y+20, r30	; 0x14
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <TIMER_Init+0xe8>
    29c4:	1d 8a       	std	Y+21, r1	; 0x15
    29c6:	1c 8a       	std	Y+20, r1	; 0x14
    29c8:	8c 89       	ldd	r24, Y+20	; 0x14
    29ca:	ee 89       	ldd	r30, Y+22	; 0x16
    29cc:	ff 89       	ldd	r31, Y+23	; 0x17
    29ce:	80 83       	st	Z, r24
			TCNT0 = Config_Ptr->initialValue;
    29d0:	a2 e5       	ldi	r26, 0x52	; 82
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	81 81       	ldd	r24, Z+1	; 0x01
    29da:	8c 93       	st	X, r24
			OCR0 = Config_Ptr->compareValue; // Compare register
    29dc:	2c e5       	ldi	r18, 0x5C	; 92
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	e9 81       	ldd	r30, Y+1	; 0x01
    29e2:	fa 81       	ldd	r31, Y+2	; 0x02
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	a4 81       	ldd	r26, Z+4	; 0x04
    29ea:	b5 81       	ldd	r27, Z+5	; 0x05
    29ec:	f9 01       	movw	r30, r18
    29ee:	80 83       	st	Z, r24
			TIMSK = (1<<OCIE0); // Timer compare interrupt Enable
    29f0:	e9 e5       	ldi	r30, 0x59	; 89
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	80 83       	st	Z, r24
			SREG |= (1<<7); // Global interrupt Enable
    29f8:	af e5       	ldi	r26, 0x5F	; 95
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ef e5       	ldi	r30, 0x5F	; 95
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	80 68       	ori	r24, 0x80	; 128
    2a04:	8c 93       	st	X, r24
    2a06:	1e c1       	rjmp	.+572    	; 0x2c44 <TIMER_Init+0x364>
		}

	}
	else if(timer == TIMER_1){
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	81 30       	cpi	r24, 0x01	; 1
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <TIMER_Init+0x130>
    2a0e:	94 c0       	rjmp	.+296    	; 0x2b38 <TIMER_Init+0x258>

		if(Config_Ptr->timerMode == NORMAL){
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	80 81       	ld	r24, Z
    2a16:	88 23       	and	r24, r24
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <TIMER_Init+0x13c>
    2a1a:	3e c0       	rjmp	.+124    	; 0x2a98 <TIMER_Init+0x1b8>
			TCCR1A = (1<<FOC1A) ;
    2a1c:	ef e4       	ldi	r30, 0x4F	; 79
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	88 e0       	ldi	r24, 0x08	; 8
    2a22:	80 83       	st	Z, r24
			TCCR1B = 0;
    2a24:	ee e4       	ldi	r30, 0x4E	; 78
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	10 82       	st	Z, r1
			TCCR1B = (TCCR1B & 0xF8) || (Config_Ptr->prescaler & 0x07);
    2a2a:	8e e4       	ldi	r24, 0x4E	; 78
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9b 8b       	std	Y+19, r25	; 0x13
    2a30:	8a 8b       	std	Y+18, r24	; 0x12
    2a32:	ee e4       	ldi	r30, 0x4E	; 78
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	88 7f       	andi	r24, 0xF8	; 248
    2a3e:	90 70       	andi	r25, 0x00	; 0
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	49 f4       	brne	.+18     	; 0x2a56 <TIMER_Init+0x176>
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	86 81       	ldd	r24, Z+6	; 0x06
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	87 70       	andi	r24, 0x07	; 7
    2a50:	90 70       	andi	r25, 0x00	; 0
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	29 f0       	breq	.+10     	; 0x2a60 <TIMER_Init+0x180>
    2a56:	e1 e0       	ldi	r30, 0x01	; 1
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	f9 8b       	std	Y+17, r31	; 0x11
    2a5c:	e8 8b       	std	Y+16, r30	; 0x10
    2a5e:	02 c0       	rjmp	.+4      	; 0x2a64 <TIMER_Init+0x184>
    2a60:	19 8a       	std	Y+17, r1	; 0x11
    2a62:	18 8a       	std	Y+16, r1	; 0x10
    2a64:	88 89       	ldd	r24, Y+16	; 0x10
    2a66:	ea 89       	ldd	r30, Y+18	; 0x12
    2a68:	fb 89       	ldd	r31, Y+19	; 0x13
    2a6a:	80 83       	st	Z, r24
			TCNT1 = Config_Ptr->initialValue;
    2a6c:	ac e4       	ldi	r26, 0x4C	; 76
    2a6e:	b0 e0       	ldi	r27, 0x00	; 0
    2a70:	e9 81       	ldd	r30, Y+1	; 0x01
    2a72:	fa 81       	ldd	r31, Y+2	; 0x02
    2a74:	81 81       	ldd	r24, Z+1	; 0x01
    2a76:	88 2f       	mov	r24, r24
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	11 96       	adiw	r26, 0x01	; 1
    2a7c:	9c 93       	st	X, r25
    2a7e:	8e 93       	st	-X, r24
			TIMSK = (1<<TOIE1); // Timer NORMA interrupt Enable
    2a80:	e9 e5       	ldi	r30, 0x59	; 89
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	84 e0       	ldi	r24, 0x04	; 4
    2a86:	80 83       	st	Z, r24
			SREG |= (1<<7);
    2a88:	af e5       	ldi	r26, 0x5F	; 95
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ef e5       	ldi	r30, 0x5F	; 95
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	80 68       	ori	r24, 0x80	; 128
    2a94:	8c 93       	st	X, r24
    2a96:	d6 c0       	rjmp	.+428    	; 0x2c44 <TIMER_Init+0x364>


		}
		else if(Config_Ptr->timerMode == COMPARE){
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	80 81       	ld	r24, Z
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <TIMER_Init+0x1c4>
    2aa2:	d0 c0       	rjmp	.+416    	; 0x2c44 <TIMER_Init+0x364>
			TCCR1A = (1<<COM1A1) | (1<<COM1A0) | (1<<FOC1A) ;
    2aa4:	ef e4       	ldi	r30, 0x4F	; 79
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	88 ec       	ldi	r24, 0xC8	; 200
    2aaa:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12)  ;
    2aac:	ee e4       	ldi	r30, 0x4E	; 78
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	88 e0       	ldi	r24, 0x08	; 8
    2ab2:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0xF8) || (Config_Ptr->prescaler & 0x07);
    2ab4:	8e e4       	ldi	r24, 0x4E	; 78
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9f 87       	std	Y+15, r25	; 0x0f
    2aba:	8e 87       	std	Y+14, r24	; 0x0e
    2abc:	ee e4       	ldi	r30, 0x4E	; 78
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	88 7f       	andi	r24, 0xF8	; 248
    2ac8:	90 70       	andi	r25, 0x00	; 0
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	49 f4       	brne	.+18     	; 0x2ae0 <TIMER_Init+0x200>
    2ace:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad2:	86 81       	ldd	r24, Z+6	; 0x06
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	87 70       	andi	r24, 0x07	; 7
    2ada:	90 70       	andi	r25, 0x00	; 0
    2adc:	00 97       	sbiw	r24, 0x00	; 0
    2ade:	29 f0       	breq	.+10     	; 0x2aea <TIMER_Init+0x20a>
    2ae0:	e1 e0       	ldi	r30, 0x01	; 1
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	fd 87       	std	Y+13, r31	; 0x0d
    2ae6:	ec 87       	std	Y+12, r30	; 0x0c
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <TIMER_Init+0x20e>
    2aea:	1d 86       	std	Y+13, r1	; 0x0d
    2aec:	1c 86       	std	Y+12, r1	; 0x0c
    2aee:	8c 85       	ldd	r24, Y+12	; 0x0c
    2af0:	ee 85       	ldd	r30, Y+14	; 0x0e
    2af2:	ff 85       	ldd	r31, Y+15	; 0x0f
    2af4:	80 83       	st	Z, r24
			TCNT1 = Config_Ptr->initialValue;
    2af6:	ac e4       	ldi	r26, 0x4C	; 76
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e9 81       	ldd	r30, Y+1	; 0x01
    2afc:	fa 81       	ldd	r31, Y+2	; 0x02
    2afe:	81 81       	ldd	r24, Z+1	; 0x01
    2b00:	88 2f       	mov	r24, r24
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	11 96       	adiw	r26, 0x01	; 1
    2b06:	9c 93       	st	X, r25
    2b08:	8e 93       	st	-X, r24
			OCR1A = Config_Ptr->compareValue; // Compare register
    2b0a:	2a e4       	ldi	r18, 0x4A	; 74
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2b10:	fa 81       	ldd	r31, Y+2	; 0x02
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	a4 81       	ldd	r26, Z+4	; 0x04
    2b18:	b5 81       	ldd	r27, Z+5	; 0x05
    2b1a:	f9 01       	movw	r30, r18
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
			TIMSK = (1<<OCIE1A); // Timer compare interrupt Enable
    2b20:	e9 e5       	ldi	r30, 0x59	; 89
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 e1       	ldi	r24, 0x10	; 16
    2b26:	80 83       	st	Z, r24
			SREG |= (1<<7);
    2b28:	af e5       	ldi	r26, 0x5F	; 95
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	ef e5       	ldi	r30, 0x5F	; 95
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	80 81       	ld	r24, Z
    2b32:	80 68       	ori	r24, 0x80	; 128
    2b34:	8c 93       	st	X, r24
    2b36:	86 c0       	rjmp	.+268    	; 0x2c44 <TIMER_Init+0x364>
		}

	}
	else if (timer == TIMER_2){
    2b38:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	09 f0       	breq	.+2      	; 0x2b40 <TIMER_Init+0x260>
    2b3e:	82 c0       	rjmp	.+260    	; 0x2c44 <TIMER_Init+0x364>
		if(Config_Ptr->timerMode == NORMAL){
    2b40:	e9 81       	ldd	r30, Y+1	; 0x01
    2b42:	fa 81       	ldd	r31, Y+2	; 0x02
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	b9 f5       	brne	.+110    	; 0x2bb8 <TIMER_Init+0x2d8>
			TCCR2 = (1<<FOC2);
    2b4a:	e5 e4       	ldi	r30, 0x45	; 69
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 e8       	ldi	r24, 0x80	; 128
    2b50:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0xF8) || (Config_Ptr->prescaler & 0x07);
    2b52:	85 e4       	ldi	r24, 0x45	; 69
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	9b 87       	std	Y+11, r25	; 0x0b
    2b58:	8a 87       	std	Y+10, r24	; 0x0a
    2b5a:	e5 e4       	ldi	r30, 0x45	; 69
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	88 2f       	mov	r24, r24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	88 7f       	andi	r24, 0xF8	; 248
    2b66:	90 70       	andi	r25, 0x00	; 0
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	49 f4       	brne	.+18     	; 0x2b7e <TIMER_Init+0x29e>
    2b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b70:	86 81       	ldd	r24, Z+6	; 0x06
    2b72:	88 2f       	mov	r24, r24
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	87 70       	andi	r24, 0x07	; 7
    2b78:	90 70       	andi	r25, 0x00	; 0
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	29 f0       	breq	.+10     	; 0x2b88 <TIMER_Init+0x2a8>
    2b7e:	e1 e0       	ldi	r30, 0x01	; 1
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	f9 87       	std	Y+9, r31	; 0x09
    2b84:	e8 87       	std	Y+8, r30	; 0x08
    2b86:	02 c0       	rjmp	.+4      	; 0x2b8c <TIMER_Init+0x2ac>
    2b88:	19 86       	std	Y+9, r1	; 0x09
    2b8a:	18 86       	std	Y+8, r1	; 0x08
    2b8c:	88 85       	ldd	r24, Y+8	; 0x08
    2b8e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b90:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b92:	80 83       	st	Z, r24
			TCNT2 = Config_Ptr->initialValue;
    2b94:	a4 e4       	ldi	r26, 0x44	; 68
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9c:	81 81       	ldd	r24, Z+1	; 0x01
    2b9e:	8c 93       	st	X, r24
			TIMSK = (1<<TOIE2);
    2ba0:	e9 e5       	ldi	r30, 0x59	; 89
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 e4       	ldi	r24, 0x40	; 64
    2ba6:	80 83       	st	Z, r24
			SREG |= (1<<7);
    2ba8:	af e5       	ldi	r26, 0x5F	; 95
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	ef e5       	ldi	r30, 0x5F	; 95
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	80 68       	ori	r24, 0x80	; 128
    2bb4:	8c 93       	st	X, r24
    2bb6:	46 c0       	rjmp	.+140    	; 0x2c44 <TIMER_Init+0x364>
		}
		else if(Config_Ptr->timerMode == COMPARE){
    2bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bba:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbc:	80 81       	ld	r24, Z
    2bbe:	81 30       	cpi	r24, 0x01	; 1
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <TIMER_Init+0x2e4>
    2bc2:	40 c0       	rjmp	.+128    	; 0x2c44 <TIMER_Init+0x364>
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    2bc4:	e5 e4       	ldi	r30, 0x45	; 69
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	88 e8       	ldi	r24, 0x88	; 136
    2bca:	80 83       	st	Z, r24
			TCCR2 = (TCCR2 & 0xF8) || (Config_Ptr->prescaler & 0x07);
    2bcc:	85 e4       	ldi	r24, 0x45	; 69
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	9f 83       	std	Y+7, r25	; 0x07
    2bd2:	8e 83       	std	Y+6, r24	; 0x06
    2bd4:	e5 e4       	ldi	r30, 0x45	; 69
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	88 7f       	andi	r24, 0xF8	; 248
    2be0:	90 70       	andi	r25, 0x00	; 0
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	49 f4       	brne	.+18     	; 0x2bf8 <TIMER_Init+0x318>
    2be6:	e9 81       	ldd	r30, Y+1	; 0x01
    2be8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bea:	86 81       	ldd	r24, Z+6	; 0x06
    2bec:	88 2f       	mov	r24, r24
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	87 70       	andi	r24, 0x07	; 7
    2bf2:	90 70       	andi	r25, 0x00	; 0
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	29 f0       	breq	.+10     	; 0x2c02 <TIMER_Init+0x322>
    2bf8:	e1 e0       	ldi	r30, 0x01	; 1
    2bfa:	f0 e0       	ldi	r31, 0x00	; 0
    2bfc:	fd 83       	std	Y+5, r31	; 0x05
    2bfe:	ec 83       	std	Y+4, r30	; 0x04
    2c00:	02 c0       	rjmp	.+4      	; 0x2c06 <TIMER_Init+0x326>
    2c02:	1d 82       	std	Y+5, r1	; 0x05
    2c04:	1c 82       	std	Y+4, r1	; 0x04
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	ee 81       	ldd	r30, Y+6	; 0x06
    2c0a:	ff 81       	ldd	r31, Y+7	; 0x07
    2c0c:	80 83       	st	Z, r24
			TCNT2 = Config_Ptr->initialValue;
    2c0e:	a4 e4       	ldi	r26, 0x44	; 68
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e9 81       	ldd	r30, Y+1	; 0x01
    2c14:	fa 81       	ldd	r31, Y+2	; 0x02
    2c16:	81 81       	ldd	r24, Z+1	; 0x01
    2c18:	8c 93       	st	X, r24
			OCR2 = Config_Ptr->compareValue; // Compare register
    2c1a:	23 e4       	ldi	r18, 0x43	; 67
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c20:	fa 81       	ldd	r31, Y+2	; 0x02
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	a4 81       	ldd	r26, Z+4	; 0x04
    2c28:	b5 81       	ldd	r27, Z+5	; 0x05
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	80 83       	st	Z, r24
			TIMSK = (1<<OCIE2); // Timer compare interrupt Enable
    2c2e:	e9 e5       	ldi	r30, 0x59	; 89
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 e8       	ldi	r24, 0x80	; 128
    2c34:	80 83       	st	Z, r24
			SREG |= (1<<7); // Global interrupt Enable
    2c36:	af e5       	ldi	r26, 0x5F	; 95
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	ef e5       	ldi	r30, 0x5F	; 95
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	80 68       	ori	r24, 0x80	; 128
    2c42:	8c 93       	st	X, r24
		}

	}

	}
    2c44:	6b 96       	adiw	r28, 0x1b	; 27
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <TIMER_setCallBack>:

void TIMER_setCallBack(void(*a_ptr)(void))
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <TIMER_setCallBack+0x6>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	9a 81       	ldd	r25, Y+2	; 0x02
    2c68:	90 93 76 00 	sts	0x0076, r25
    2c6c:	80 93 75 00 	sts	0x0075, r24
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <TIMER_DeInit>:

void TIMER_DeInit(Timer_Number timer){
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	0f 92       	push	r0
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
    2c84:	89 83       	std	Y+1, r24	; 0x01
	if(timer == TIMER_0){
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	88 23       	and	r24, r24
    2c8a:	71 f4       	brne	.+28     	; 0x2ca8 <TIMER_DeInit+0x2e>
		TCCR0 = 0;
    2c8c:	e3 e5       	ldi	r30, 0x53	; 83
    2c8e:	f0 e0       	ldi	r31, 0x00	; 0
    2c90:	10 82       	st	Z, r1
		TCNT0 = 0;
    2c92:	e2 e5       	ldi	r30, 0x52	; 82
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0) &~(1<<OCIE0);
    2c98:	a9 e5       	ldi	r26, 0x59	; 89
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e9 e5       	ldi	r30, 0x59	; 89
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	8c 7f       	andi	r24, 0xFC	; 252
    2ca4:	8c 93       	st	X, r24
    2ca6:	25 c0       	rjmp	.+74     	; 0x2cf2 <TIMER_DeInit+0x78>
	}else if(timer == TIMER_1){
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	81 30       	cpi	r24, 0x01	; 1
    2cac:	91 f4       	brne	.+36     	; 0x2cd2 <TIMER_DeInit+0x58>
		TCCR1A = 0;
    2cae:	ef e4       	ldi	r30, 0x4F	; 79
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	10 82       	st	Z, r1
		TCCR1B = 0;
    2cb4:	ee e4       	ldi	r30, 0x4E	; 78
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	10 82       	st	Z, r1
		TCNT1 = 0;
    2cba:	ec e4       	ldi	r30, 0x4C	; 76
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	11 82       	std	Z+1, r1	; 0x01
    2cc0:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE1) &~(1<<OCIE1A);
    2cc2:	a9 e5       	ldi	r26, 0x59	; 89
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e9 e5       	ldi	r30, 0x59	; 89
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	8b 7e       	andi	r24, 0xEB	; 235
    2cce:	8c 93       	st	X, r24
    2cd0:	10 c0       	rjmp	.+32     	; 0x2cf2 <TIMER_DeInit+0x78>
	}
	else if(timer == TIMER_2){
    2cd2:	89 81       	ldd	r24, Y+1	; 0x01
    2cd4:	82 30       	cpi	r24, 0x02	; 2
    2cd6:	69 f4       	brne	.+26     	; 0x2cf2 <TIMER_DeInit+0x78>
		TCCR2 = 0;
    2cd8:	e5 e4       	ldi	r30, 0x45	; 69
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	10 82       	st	Z, r1
		TCNT2 = 0;
    2cde:	e4 e4       	ldi	r30, 0x44	; 68
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE2) &~(1<<OCIE2);
    2ce4:	a9 e5       	ldi	r26, 0x59	; 89
    2ce6:	b0 e0       	ldi	r27, 0x00	; 0
    2ce8:	e9 e5       	ldi	r30, 0x59	; 89
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8f 73       	andi	r24, 0x3F	; 63
    2cf0:	8c 93       	st	X, r24
	}
}
    2cf2:	0f 90       	pop	r0
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <TWI_init+0x6>
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	9a 83       	std	Y+2, r25	; 0x02
    2d06:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2d08:	e0 e2       	ldi	r30, 0x20	; 32
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	82 e0       	ldi	r24, 0x02	; 2
    2d0e:	80 83       	st	Z, r24
	TWSR = 0x00;
    2d10:	e1 e2       	ldi	r30, 0x21	; 33
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	10 82       	st	Z, r1
	TWSR = (TWSR & 0xFC) | Config_Ptr->prescaler;
    2d16:	a1 e2       	ldi	r26, 0x21	; 33
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e1 e2       	ldi	r30, 0x21	; 33
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	98 2f       	mov	r25, r24
    2d22:	9c 7f       	andi	r25, 0xFC	; 252
    2d24:	e9 81       	ldd	r30, Y+1	; 0x01
    2d26:	fa 81       	ldd	r31, Y+2	; 0x02
    2d28:	80 81       	ld	r24, Z
    2d2a:	89 2b       	or	r24, r25
    2d2c:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    2d2e:	e2 e2       	ldi	r30, 0x22	; 34
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2d36:	e6 e5       	ldi	r30, 0x56	; 86
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	80 83       	st	Z, r24
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <TWI_start>:

void TWI_start(void)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2d50:	e6 e5       	ldi	r30, 0x56	; 86
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	84 ea       	ldi	r24, 0xA4	; 164
    2d56:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2d58:	e6 e5       	ldi	r30, 0x56	; 86
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	80 81       	ld	r24, Z
    2d5e:	88 23       	and	r24, r24
    2d60:	dc f7       	brge	.-10     	; 0x2d58 <TWI_start+0x10>
}
    2d62:	cf 91       	pop	r28
    2d64:	df 91       	pop	r29
    2d66:	08 95       	ret

00002d68 <TWI_stop>:

void TWI_stop(void)
{
    2d68:	df 93       	push	r29
    2d6a:	cf 93       	push	r28
    2d6c:	cd b7       	in	r28, 0x3d	; 61
    2d6e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2d70:	e6 e5       	ldi	r30, 0x56	; 86
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	84 e9       	ldi	r24, 0x94	; 148
    2d76:	80 83       	st	Z, r24
}
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	08 95       	ret

00002d7e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2d7e:	df 93       	push	r29
    2d80:	cf 93       	push	r28
    2d82:	0f 92       	push	r0
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2d8a:	e3 e2       	ldi	r30, 0x23	; 35
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2d92:	e6 e5       	ldi	r30, 0x56	; 86
    2d94:	f0 e0       	ldi	r31, 0x00	; 0
    2d96:	84 e8       	ldi	r24, 0x84	; 132
    2d98:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2d9a:	e6 e5       	ldi	r30, 0x56	; 86
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	80 81       	ld	r24, Z
    2da0:	88 23       	and	r24, r24
    2da2:	dc f7       	brge	.-10     	; 0x2d9a <TWI_writeByte+0x1c>
}
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2dac:	df 93       	push	r29
    2dae:	cf 93       	push	r28
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2db4:	e6 e5       	ldi	r30, 0x56	; 86
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	84 ec       	ldi	r24, 0xC4	; 196
    2dba:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2dbc:	e6 e5       	ldi	r30, 0x56	; 86
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	88 23       	and	r24, r24
    2dc4:	dc f7       	brge	.-10     	; 0x2dbc <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2dc6:	e3 e2       	ldi	r30, 0x23	; 35
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
}
    2dcc:	cf 91       	pop	r28
    2dce:	df 91       	pop	r29
    2dd0:	08 95       	ret

00002dd2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2dd2:	df 93       	push	r29
    2dd4:	cf 93       	push	r28
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2dda:	e6 e5       	ldi	r30, 0x56	; 86
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	84 e8       	ldi	r24, 0x84	; 132
    2de0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2de2:	e6 e5       	ldi	r30, 0x56	; 86
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	88 23       	and	r24, r24
    2dea:	dc f7       	brge	.-10     	; 0x2de2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2dec:	e3 e2       	ldi	r30, 0x23	; 35
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	0f 92       	push	r0
    2dfe:	cd b7       	in	r28, 0x3d	; 61
    2e00:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2e02:	e1 e2       	ldi	r30, 0x21	; 33
    2e04:	f0 e0       	ldi	r31, 0x00	; 0
    2e06:	80 81       	ld	r24, Z
    2e08:	88 7f       	andi	r24, 0xF8	; 248
    2e0a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e0e:	0f 90       	pop	r0
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	08 95       	ret

00002e16 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <UART_init+0x6>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <UART_init+0x8>
    2e1e:	cd b7       	in	r28, 0x3d	; 61
    2e20:	de b7       	in	r29, 0x3e	; 62
    2e22:	9c 83       	std	Y+4, r25	; 0x04
    2e24:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e26:	1a 82       	std	Y+2, r1	; 0x02
    2e28:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e2a:	eb e2       	ldi	r30, 0x2B	; 43
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e32:	ea e2       	ldi	r30, 0x2A	; 42
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	88 e1       	ldi	r24, 0x18	; 24
    2e38:	80 83       	st	Z, r24

	if(Config_Ptr->bitNumber == BitNumber_9){
    2e3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e3e:	85 81       	ldd	r24, Z+5	; 0x05
    2e40:	84 30       	cpi	r24, 0x04	; 4
    2e42:	39 f4       	brne	.+14     	; 0x2e52 <UART_init+0x3c>
		UCSRB |= (1<<UCSZ2);
    2e44:	aa e2       	ldi	r26, 0x2A	; 42
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	ea e2       	ldi	r30, 0x2A	; 42
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	84 60       	ori	r24, 0x04	; 4
    2e50:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2e52:	e0 e4       	ldi	r30, 0x40	; 64
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 e8       	ldi	r24, 0x80	; 128
    2e58:	80 83       	st	Z, r24

	 /*Use configuration to get type (Synchronous or Asynchronous)*/
	if(Config_Ptr->bitNumber == BitNumber_9 || Config_Ptr->bitNumber == BitNumber_8){
    2e5a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e5c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e5e:	85 81       	ldd	r24, Z+5	; 0x05
    2e60:	84 30       	cpi	r24, 0x04	; 4
    2e62:	29 f0       	breq	.+10     	; 0x2e6e <UART_init+0x58>
    2e64:	eb 81       	ldd	r30, Y+3	; 0x03
    2e66:	fc 81       	ldd	r31, Y+4	; 0x04
    2e68:	85 81       	ldd	r24, Z+5	; 0x05
    2e6a:	83 30       	cpi	r24, 0x03	; 3
    2e6c:	41 f4       	brne	.+16     	; 0x2e7e <UART_init+0x68>
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2e6e:	a0 e4       	ldi	r26, 0x40	; 64
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e0 e4       	ldi	r30, 0x40	; 64
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	86 60       	ori	r24, 0x06	; 6
    2e7a:	8c 93       	st	X, r24
    2e7c:	19 c0       	rjmp	.+50     	; 0x2eb0 <UART_init+0x9a>
	}
	else if(Config_Ptr->bitNumber == BitNumber_7){
    2e7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2e80:	fc 81       	ldd	r31, Y+4	; 0x04
    2e82:	85 81       	ldd	r24, Z+5	; 0x05
    2e84:	82 30       	cpi	r24, 0x02	; 2
    2e86:	41 f4       	brne	.+16     	; 0x2e98 <UART_init+0x82>
		UCSRC |= (1<<UCSZ1);
    2e88:	a0 e4       	ldi	r26, 0x40	; 64
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e0 e4       	ldi	r30, 0x40	; 64
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	84 60       	ori	r24, 0x04	; 4
    2e94:	8c 93       	st	X, r24
    2e96:	0c c0       	rjmp	.+24     	; 0x2eb0 <UART_init+0x9a>
	}
	else if(Config_Ptr->bitNumber == BitNumber_6){
    2e98:	eb 81       	ldd	r30, Y+3	; 0x03
    2e9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2e9c:	85 81       	ldd	r24, Z+5	; 0x05
    2e9e:	81 30       	cpi	r24, 0x01	; 1
    2ea0:	39 f4       	brne	.+14     	; 0x2eb0 <UART_init+0x9a>
			UCSRC |= (1<<UCSZ0);
    2ea2:	a0 e4       	ldi	r26, 0x40	; 64
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e0 e4       	ldi	r30, 0x40	; 64
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	82 60       	ori	r24, 0x02	; 2
    2eae:	8c 93       	st	X, r24
		}

	 /*Use configuration to get type (Synchronous or Asynchronous)*/
   if(Config_Ptr->synchType == SYNCHRONOUS){
    2eb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2eb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2eb4:	80 81       	ld	r24, Z
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	39 f4       	brne	.+14     	; 0x2ec8 <UART_init+0xb2>
	   UCSRC |= (1<<UMSEL);
    2eba:	a0 e4       	ldi	r26, 0x40	; 64
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e0 e4       	ldi	r30, 0x40	; 64
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	80 64       	ori	r24, 0x40	; 64
    2ec6:	8c 93       	st	X, r24
   }
   /*Use configuration to get number of stop bits*/
   if(Config_Ptr->stop == STOP_2bit){
    2ec8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eca:	fc 81       	ldd	r31, Y+4	; 0x04
    2ecc:	84 81       	ldd	r24, Z+4	; 0x04
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	39 f4       	brne	.+14     	; 0x2ee0 <UART_init+0xca>
  	   UCSRC |= (1<<USBS);
    2ed2:	a0 e4       	ldi	r26, 0x40	; 64
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e0 e4       	ldi	r30, 0x40	; 64
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	88 60       	ori	r24, 0x08	; 8
    2ede:	8c 93       	st	X, r24
     }
/*Use configuration to get the parity type*/
  if(Config_Ptr->parity == RESERVED){
    2ee0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ee2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ee4:	83 81       	ldd	r24, Z+3	; 0x03
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	41 f4       	brne	.+16     	; 0x2efa <UART_init+0xe4>
	  UCSRC |= (1<<UPM0);
    2eea:	a0 e4       	ldi	r26, 0x40	; 64
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e0 e4       	ldi	r30, 0x40	; 64
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	80 61       	ori	r24, 0x10	; 16
    2ef6:	8c 93       	st	X, r24
    2ef8:	19 c0       	rjmp	.+50     	; 0x2f2c <UART_init+0x116>
  }else if(Config_Ptr->parity == ENABLED_EVEN){
    2efa:	eb 81       	ldd	r30, Y+3	; 0x03
    2efc:	fc 81       	ldd	r31, Y+4	; 0x04
    2efe:	83 81       	ldd	r24, Z+3	; 0x03
    2f00:	82 30       	cpi	r24, 0x02	; 2
    2f02:	41 f4       	brne	.+16     	; 0x2f14 <UART_init+0xfe>
	  UCSRC |= (1<<UPM1);
    2f04:	a0 e4       	ldi	r26, 0x40	; 64
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e0 e4       	ldi	r30, 0x40	; 64
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 62       	ori	r24, 0x20	; 32
    2f10:	8c 93       	st	X, r24
    2f12:	0c c0       	rjmp	.+24     	; 0x2f2c <UART_init+0x116>
  }else if(Config_Ptr->parity == ENABLED_ODD){
    2f14:	eb 81       	ldd	r30, Y+3	; 0x03
    2f16:	fc 81       	ldd	r31, Y+4	; 0x04
    2f18:	83 81       	ldd	r24, Z+3	; 0x03
    2f1a:	83 30       	cpi	r24, 0x03	; 3
    2f1c:	39 f4       	brne	.+14     	; 0x2f2c <UART_init+0x116>
	  UCSRC |= (1<<UPM0) | (1<<UPM1);
    2f1e:	a0 e4       	ldi	r26, 0x40	; 64
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e0 e4       	ldi	r30, 0x40	; 64
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	80 63       	ori	r24, 0x30	; 48
    2f2a:	8c 93       	st	X, r24
  }

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f30:	81 81       	ldd	r24, Z+1	; 0x01
    2f32:	92 81       	ldd	r25, Z+2	; 0x02
    2f34:	cc 01       	movw	r24, r24
    2f36:	a0 e0       	ldi	r26, 0x00	; 0
    2f38:	b0 e0       	ldi	r27, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	aa 1f       	adc	r26, r26
    2f40:	bb 1f       	adc	r27, r27
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	aa 1f       	adc	r26, r26
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	aa 1f       	adc	r26, r26
    2f50:	bb 1f       	adc	r27, r27
    2f52:	9c 01       	movw	r18, r24
    2f54:	ad 01       	movw	r20, r26
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	92 e1       	ldi	r25, 0x12	; 18
    2f5a:	aa e7       	ldi	r26, 0x7A	; 122
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <__udivmodsi4>
    2f66:	da 01       	movw	r26, r20
    2f68:	c9 01       	movw	r24, r18
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	9a 83       	std	Y+2, r25	; 0x02
    2f6e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2f70:	e0 e4       	ldi	r30, 0x40	; 64
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	89 2f       	mov	r24, r25
    2f7a:	99 27       	eor	r25, r25
    2f7c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2f7e:	e9 e2       	ldi	r30, 0x29	; 41
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	80 83       	st	Z, r24
}
    2f86:	0f 90       	pop	r0
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	0f 92       	push	r0
    2f9a:	cd b7       	in	r28, 0x3d	; 61
    2f9c:	de b7       	in	r29, 0x3e	; 62
    2f9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2fa0:	eb e2       	ldi	r30, 0x2B	; 43
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	88 2f       	mov	r24, r24
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	80 72       	andi	r24, 0x20	; 32
    2fac:	90 70       	andi	r25, 0x00	; 0
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	b9 f3       	breq	.-18     	; 0x2fa0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2fb2:	ec e2       	ldi	r30, 0x2C	; 44
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	89 81       	ldd	r24, Y+1	; 0x01
    2fb8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2fba:	0f 90       	pop	r0
    2fbc:	cf 91       	pop	r28
    2fbe:	df 91       	pop	r29
    2fc0:	08 95       	ret

00002fc2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2fca:	eb e2       	ldi	r30, 0x2B	; 43
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	88 23       	and	r24, r24
    2fd2:	dc f7       	brge	.-10     	; 0x2fca <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2fd4:	ec e2       	ldi	r30, 0x2C	; 44
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
}
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <UART_sendString+0x6>
    2fe6:	0f 92       	push	r0
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	9b 83       	std	Y+3, r25	; 0x03
    2fee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ff0:	19 82       	std	Y+1, r1	; 0x01
    2ff2:	0e c0       	rjmp	.+28     	; 0x3010 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ff4:	89 81       	ldd	r24, Y+1	; 0x01
    2ff6:	28 2f       	mov	r18, r24
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffe:	fc 01       	movw	r30, r24
    3000:	e2 0f       	add	r30, r18
    3002:	f3 1f       	adc	r31, r19
    3004:	80 81       	ld	r24, Z
    3006:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_sendByte>
		i++;
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	8f 5f       	subi	r24, 0xFF	; 255
    300e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	fc 01       	movw	r30, r24
    301c:	e2 0f       	add	r30, r18
    301e:	f3 1f       	adc	r31, r19
    3020:	80 81       	ld	r24, Z
    3022:	88 23       	and	r24, r24
    3024:	39 f7       	brne	.-50     	; 0x2ff4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	df 93       	push	r29
    3038:	cf 93       	push	r28
    303a:	00 d0       	rcall	.+0      	; 0x303c <UART_receiveString+0xa>
    303c:	0f 92       	push	r0
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	9b 83       	std	Y+3, r25	; 0x03
    3044:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3046:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	9b 81       	ldd	r25, Y+3	; 0x03
    3052:	8c 01       	movw	r16, r24
    3054:	02 0f       	add	r16, r18
    3056:	13 1f       	adc	r17, r19
    3058:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    305c:	f8 01       	movw	r30, r16
    305e:	80 83       	st	Z, r24
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	8f 5f       	subi	r24, 0xFF	; 255
    3066:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	28 2f       	mov	r18, r24
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	9b 81       	ldd	r25, Y+3	; 0x03
    3072:	8c 01       	movw	r16, r24
    3074:	02 0f       	add	r16, r18
    3076:	13 1f       	adc	r17, r19
    3078:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <UART_recieveByte>
    307c:	f8 01       	movw	r30, r16
    307e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	fc 01       	movw	r30, r24
    308c:	e2 0f       	add	r30, r18
    308e:	f3 1f       	adc	r31, r19
    3090:	80 81       	ld	r24, Z
    3092:	83 32       	cpi	r24, 0x23	; 35
    3094:	31 f7       	brne	.-52     	; 0x3062 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	8a 81       	ldd	r24, Y+2	; 0x02
    309e:	9b 81       	ldd	r25, Y+3	; 0x03
    30a0:	fc 01       	movw	r30, r24
    30a2:	e2 0f       	add	r30, r18
    30a4:	f3 1f       	adc	r31, r19
    30a6:	10 82       	st	Z, r1
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <__udivmodsi4>:
    30b8:	a1 e2       	ldi	r26, 0x21	; 33
    30ba:	1a 2e       	mov	r1, r26
    30bc:	aa 1b       	sub	r26, r26
    30be:	bb 1b       	sub	r27, r27
    30c0:	fd 01       	movw	r30, r26
    30c2:	0d c0       	rjmp	.+26     	; 0x30de <__udivmodsi4_ep>

000030c4 <__udivmodsi4_loop>:
    30c4:	aa 1f       	adc	r26, r26
    30c6:	bb 1f       	adc	r27, r27
    30c8:	ee 1f       	adc	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	a2 17       	cp	r26, r18
    30ce:	b3 07       	cpc	r27, r19
    30d0:	e4 07       	cpc	r30, r20
    30d2:	f5 07       	cpc	r31, r21
    30d4:	20 f0       	brcs	.+8      	; 0x30de <__udivmodsi4_ep>
    30d6:	a2 1b       	sub	r26, r18
    30d8:	b3 0b       	sbc	r27, r19
    30da:	e4 0b       	sbc	r30, r20
    30dc:	f5 0b       	sbc	r31, r21

000030de <__udivmodsi4_ep>:
    30de:	66 1f       	adc	r22, r22
    30e0:	77 1f       	adc	r23, r23
    30e2:	88 1f       	adc	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	1a 94       	dec	r1
    30e8:	69 f7       	brne	.-38     	; 0x30c4 <__udivmodsi4_loop>
    30ea:	60 95       	com	r22
    30ec:	70 95       	com	r23
    30ee:	80 95       	com	r24
    30f0:	90 95       	com	r25
    30f2:	9b 01       	movw	r18, r22
    30f4:	ac 01       	movw	r20, r24
    30f6:	bd 01       	movw	r22, r26
    30f8:	cf 01       	movw	r24, r30
    30fa:	08 95       	ret

000030fc <__prologue_saves__>:
    30fc:	2f 92       	push	r2
    30fe:	3f 92       	push	r3
    3100:	4f 92       	push	r4
    3102:	5f 92       	push	r5
    3104:	6f 92       	push	r6
    3106:	7f 92       	push	r7
    3108:	8f 92       	push	r8
    310a:	9f 92       	push	r9
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	cf 92       	push	r12
    3112:	df 92       	push	r13
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	ca 1b       	sub	r28, r26
    3126:	db 0b       	sbc	r29, r27
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	de bf       	out	0x3e, r29	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	cd bf       	out	0x3d, r28	; 61
    3132:	09 94       	ijmp

00003134 <__epilogue_restores__>:
    3134:	2a 88       	ldd	r2, Y+18	; 0x12
    3136:	39 88       	ldd	r3, Y+17	; 0x11
    3138:	48 88       	ldd	r4, Y+16	; 0x10
    313a:	5f 84       	ldd	r5, Y+15	; 0x0f
    313c:	6e 84       	ldd	r6, Y+14	; 0x0e
    313e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3140:	8c 84       	ldd	r8, Y+12	; 0x0c
    3142:	9b 84       	ldd	r9, Y+11	; 0x0b
    3144:	aa 84       	ldd	r10, Y+10	; 0x0a
    3146:	b9 84       	ldd	r11, Y+9	; 0x09
    3148:	c8 84       	ldd	r12, Y+8	; 0x08
    314a:	df 80       	ldd	r13, Y+7	; 0x07
    314c:	ee 80       	ldd	r14, Y+6	; 0x06
    314e:	fd 80       	ldd	r15, Y+5	; 0x05
    3150:	0c 81       	ldd	r16, Y+4	; 0x04
    3152:	1b 81       	ldd	r17, Y+3	; 0x03
    3154:	aa 81       	ldd	r26, Y+2	; 0x02
    3156:	b9 81       	ldd	r27, Y+1	; 0x01
    3158:	ce 0f       	add	r28, r30
    315a:	d1 1d       	adc	r29, r1
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	de bf       	out	0x3e, r29	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	cd bf       	out	0x3d, r28	; 61
    3166:	ed 01       	movw	r28, r26
    3168:	08 95       	ret

0000316a <_exit>:
    316a:	f8 94       	cli

0000316c <__stop_program>:
    316c:	ff cf       	rjmp	.-2      	; 0x316c <__stop_program>
